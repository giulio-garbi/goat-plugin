/*
 * generated by Xtext 2.12.0
 */
parser grammar InternalGoatInfrastructureParser;

options {
	tokenVocab=InternalGoatInfrastructureLexer;
	superClass=AbstractInternalAntlrParser;
}

@header {
package com.sysma.goat.eclipse_plugin.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.sysma.goat.eclipse_plugin.services.GoatInfrastructureGrammarAccess;

}

@members {

 	private GoatInfrastructureGrammarAccess grammarAccess;

    public InternalGoatInfrastructureParser(TokenStream input, GoatInfrastructureGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Infrastructure";
   	}

   	@Override
   	protected GoatInfrastructureGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleInfrastructure
entryRuleInfrastructure returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInfrastructureRule()); }
	iv_ruleInfrastructure=ruleInfrastructure
	{ $current=$iv_ruleInfrastructure.current; }
	EOF;

// Rule Infrastructure
ruleInfrastructure returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getInfrastructureAccess().getSingleServerParserRuleCall());
	}
	this_SingleServer_0=ruleSingleServer
	{
		$current = $this_SingleServer_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleSingleServer
entryRuleSingleServer returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSingleServerRule()); }
	iv_ruleSingleServer=ruleSingleServer
	{ $current=$iv_ruleSingleServer.current; }
	EOF;

// Rule SingleServer
ruleSingleServer returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_external_0_0=External
				{
					newLeafNode(lv_external_0_0, grammarAccess.getSingleServerAccess().getExternalExternalKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSingleServerRule());
					}
					setWithLastConsumed($current, "external", true, "external");
				}
			)
		)?
		otherlv_1=SingleServer
		{
			newLeafNode(otherlv_1, grammarAccess.getSingleServerAccess().getSingleServerKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSingleServerAccess().getParamsParamsParserRuleCall_2_0());
				}
				lv_params_2_0=ruleParams
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSingleServerRule());
					}
					set(
						$current,
						"params",
						lv_params_2_0,
						"com.sysma.goat.eclipse_plugin.GoatInfrastructure.Params");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleParams
entryRuleParams returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParamsRule()); }
	iv_ruleParams=ruleParams
	{ $current=$iv_ruleParams.current; }
	EOF;

// Rule Params
ruleParams returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=LeftCurlyBracket
		{
			newLeafNode(otherlv_0, grammarAccess.getParamsAccess().getLeftCurlyBracketKeyword_0());
		}
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getParamsAccess().getParamsAction_1(),
					$current);
			}
		)
		(
			(
				(
					(
						lv_keys_2_0=RULE_ID
						{
							newLeafNode(lv_keys_2_0, grammarAccess.getParamsAccess().getKeysIDTerminalRuleCall_2_0_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getParamsRule());
							}
							addWithLastConsumed(
								$current,
								"keys",
								lv_keys_2_0,
								"org.eclipse.xtext.common.Terminals.ID");
						}
					)
				)
				otherlv_3=Colon
				{
					newLeafNode(otherlv_3, grammarAccess.getParamsAccess().getColonKeyword_2_0_1());
				}
				(
					(
						lv_values_4_0=RULE_STRING
						{
							newLeafNode(lv_values_4_0, grammarAccess.getParamsAccess().getValuesSTRINGTerminalRuleCall_2_0_2_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getParamsRule());
							}
							addWithLastConsumed(
								$current,
								"values",
								lv_values_4_0,
								"org.eclipse.xtext.common.Terminals.STRING");
						}
					)
				)
				otherlv_5=Comma
				{
					newLeafNode(otherlv_5, grammarAccess.getParamsAccess().getCommaKeyword_2_0_3());
				}
			)*
			(
				(
					lv_keys_6_0=RULE_ID
					{
						newLeafNode(lv_keys_6_0, grammarAccess.getParamsAccess().getKeysIDTerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getParamsRule());
						}
						addWithLastConsumed(
							$current,
							"keys",
							lv_keys_6_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			otherlv_7=Colon
			{
				newLeafNode(otherlv_7, grammarAccess.getParamsAccess().getColonKeyword_2_2());
			}
			(
				(
					lv_values_8_0=RULE_STRING
					{
						newLeafNode(lv_values_8_0, grammarAccess.getParamsAccess().getValuesSTRINGTerminalRuleCall_2_3_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getParamsRule());
						}
						addWithLastConsumed(
							$current,
							"values",
							lv_values_8_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)?
		otherlv_9=RightCurlyBracket
		{
			newLeafNode(otherlv_9, grammarAccess.getParamsAccess().getRightCurlyBracketKeyword_3());
		}
	)
;
