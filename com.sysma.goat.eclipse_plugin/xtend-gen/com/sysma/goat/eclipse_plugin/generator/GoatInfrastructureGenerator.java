/**
 * generated by Xtext 2.12.0
 */
package com.sysma.goat.eclipse_plugin.generator;

import com.sysma.goat.eclipse_plugin.generator.CodeCluster;
import com.sysma.goat.eclipse_plugin.generator.CodeInfrastructure;
import com.sysma.goat.eclipse_plugin.generator.CodeRing;
import com.sysma.goat.eclipse_plugin.generator.CodeSingleServer;
import com.sysma.goat.eclipse_plugin.generator.CodeTree;
import com.sysma.goat.eclipse_plugin.goatInfrastructure.Cluster;
import com.sysma.goat.eclipse_plugin.goatInfrastructure.Ring;
import com.sysma.goat.eclipse_plugin.goatInfrastructure.SingleServer;
import com.sysma.goat.eclipse_plugin.goatInfrastructure.Tree;
import org.eclipse.core.runtime.Path;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class GoatInfrastructureGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(resource.getAllContents());
    for (final EObject infr : _iterable) {
      {
        CodeInfrastructure _switchResult = null;
        boolean _matched = false;
        if (infr instanceof SingleServer) {
          _matched=true;
          _switchResult = new CodeSingleServer(((SingleServer)infr));
        }
        if (!_matched) {
          if (infr instanceof Cluster) {
            _matched=true;
            _switchResult = new CodeCluster(((Cluster)infr));
          }
        }
        if (!_matched) {
          if (infr instanceof Ring) {
            _matched=true;
            _switchResult = new CodeRing(((Ring)infr));
          }
        }
        if (!_matched) {
          if (infr instanceof Tree) {
            _matched=true;
            _switchResult = new CodeTree(((Tree)infr));
          }
        }
        if (!_matched) {
          _switchResult = ((CodeInfrastructure) null);
        }
        final CodeInfrastructure code = _switchResult;
        String _platformString = resource.getURI().toPlatformString(true);
        final String goFileName = new Path("infrastructure").append(
          new Path(_platformString).removeFirstSegments(2).removeFileExtension().addFileExtension("go")).toString();
        fsa.generateFile(goFileName, code.getCode());
      }
    }
  }
}
