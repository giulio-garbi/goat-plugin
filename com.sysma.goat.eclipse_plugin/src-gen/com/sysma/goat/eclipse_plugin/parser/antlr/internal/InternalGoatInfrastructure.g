/*
 * generated by Xtext 2.12.0
 */
grammar InternalGoatInfrastructure;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package com.sysma.goat.eclipse_plugin.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package com.sysma.goat.eclipse_plugin.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.sysma.goat.eclipse_plugin.services.GoatInfrastructureGrammarAccess;

}

@parser::members {

 	private GoatInfrastructureGrammarAccess grammarAccess;

    public InternalGoatInfrastructureParser(TokenStream input, GoatInfrastructureGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Infrastructure";
   	}

   	@Override
   	protected GoatInfrastructureGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleInfrastructure
entryRuleInfrastructure returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInfrastructureRule()); }
	iv_ruleInfrastructure=ruleInfrastructure
	{ $current=$iv_ruleInfrastructure.current; }
	EOF;

// Rule Infrastructure
ruleInfrastructure returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getInfrastructureAccess().getSingleServerParserRuleCall());
	}
	this_SingleServer_0=ruleSingleServer
	{
		$current = $this_SingleServer_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleSingleServer
entryRuleSingleServer returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSingleServerRule()); }
	iv_ruleSingleServer=ruleSingleServer
	{ $current=$iv_ruleSingleServer.current; }
	EOF;

// Rule SingleServer
ruleSingleServer returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='singleserver'
		{
			newLeafNode(otherlv_0, grammarAccess.getSingleServerAccess().getSingleserverKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getSingleServerAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSingleServerRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getSingleServerRule());
			}
			newCompositeNode(grammarAccess.getSingleServerAccess().getParamsParserRuleCall_2());
		}
		this_Params_2=ruleParams[$current]
		{
			$current = $this_Params_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;


// Rule Params
ruleParams[EObject in_current]  returns [EObject current=in_current]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='{'
		{
			newLeafNode(otherlv_0, grammarAccess.getParamsAccess().getLeftCurlyBracketKeyword_0());
		}
		(
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getParamsAccess().getParamsParamParserRuleCall_1_0_0_0());
						}
						lv_params_1_0=ruleParam
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getParamsRule());
							}
							add(
								$current,
								"params",
								lv_params_1_0,
								"com.sysma.goat.eclipse_plugin.GoatInfrastructure.Param");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_2=','
				{
					newLeafNode(otherlv_2, grammarAccess.getParamsAccess().getCommaKeyword_1_0_1());
				}
			)*
			(
				(
					{
						newCompositeNode(grammarAccess.getParamsAccess().getParamsParamParserRuleCall_1_1_0());
					}
					lv_params_3_0=ruleParam
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getParamsRule());
						}
						add(
							$current,
							"params",
							lv_params_3_0,
							"com.sysma.goat.eclipse_plugin.GoatInfrastructure.Param");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getParamsAccess().getRightCurlyBracketKeyword_2());
		}
	)
;

// Entry rule entryRuleParam
entryRuleParam returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParamRule()); }
	iv_ruleParam=ruleParam
	{ $current=$iv_ruleParam.current; }
	EOF;

// Rule Param
ruleParam returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getParamAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getParamRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getParamAccess().getColonKeyword_1());
		}
		(
			(
				lv_value_2_0=RULE_STRING
				{
					newLeafNode(lv_value_2_0, grammarAccess.getParamAccess().getValueSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getParamRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
