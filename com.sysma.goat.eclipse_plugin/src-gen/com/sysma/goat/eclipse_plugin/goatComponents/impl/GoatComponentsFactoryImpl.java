/**
 * generated by Xtext 2.12.0
 */
package com.sysma.goat.eclipse_plugin.goatComponents.impl;

import com.sysma.goat.eclipse_plugin.goatComponents.And;
import com.sysma.goat.eclipse_plugin.goatComponents.Attribute;
import com.sysma.goat.eclipse_plugin.goatComponents.AttributeValue;
import com.sysma.goat.eclipse_plugin.goatComponents.Awareness;
import com.sysma.goat.eclipse_plugin.goatComponents.CallProcess;
import com.sysma.goat.eclipse_plugin.goatComponents.ComponentDefinition;
import com.sysma.goat.eclipse_plugin.goatComponents.Environment;
import com.sysma.goat.eclipse_plugin.goatComponents.EqualityTest;
import com.sysma.goat.eclipse_plugin.goatComponents.FuncAnd;
import com.sysma.goat.eclipse_plugin.goatComponents.FuncBlock;
import com.sysma.goat.eclipse_plugin.goatComponents.FuncDefinition;
import com.sysma.goat.eclipse_plugin.goatComponents.FuncEqualityTest;
import com.sysma.goat.eclipse_plugin.goatComponents.FuncIfElse;
import com.sysma.goat.eclipse_plugin.goatComponents.FuncImmediate;
import com.sysma.goat.eclipse_plugin.goatComponents.FuncMemoryRef;
import com.sysma.goat.eclipse_plugin.goatComponents.FuncNot;
import com.sysma.goat.eclipse_plugin.goatComponents.FuncParam;
import com.sysma.goat.eclipse_plugin.goatComponents.FuncPred;
import com.sysma.goat.eclipse_plugin.goatComponents.FuncPredicate;
import com.sysma.goat.eclipse_plugin.goatComponents.FuncReturn;
import com.sysma.goat.eclipse_plugin.goatComponents.FuncStatement;
import com.sysma.goat.eclipse_plugin.goatComponents.FuncString;
import com.sysma.goat.eclipse_plugin.goatComponents.FuncVal;
import com.sysma.goat.eclipse_plugin.goatComponents.FuncVarAssign;
import com.sysma.goat.eclipse_plugin.goatComponents.FuncVarDeclaration;
import com.sysma.goat.eclipse_plugin.goatComponents.FuncVarParam;
import com.sysma.goat.eclipse_plugin.goatComponents.GoStringFunction;
import com.sysma.goat.eclipse_plugin.goatComponents.GoatComponentsFactory;
import com.sysma.goat.eclipse_plugin.goatComponents.GoatComponentsPackage;
import com.sysma.goat.eclipse_plugin.goatComponents.IfBranchProcess;
import com.sysma.goat.eclipse_plugin.goatComponents.IfProcesses;
import com.sysma.goat.eclipse_plugin.goatComponents.Immediate;
import com.sysma.goat.eclipse_plugin.goatComponents.ImmediateValue;
import com.sysma.goat.eclipse_plugin.goatComponents.InputProcess;
import com.sysma.goat.eclipse_plugin.goatComponents.InputProcesses;
import com.sysma.goat.eclipse_plugin.goatComponents.InputProcessesPart;
import com.sysma.goat.eclipse_plugin.goatComponents.InterleavingProcess;
import com.sysma.goat.eclipse_plugin.goatComponents.Model;
import com.sysma.goat.eclipse_plugin.goatComponents.Not;
import com.sysma.goat.eclipse_plugin.goatComponents.OutputProcess;
import com.sysma.goat.eclipse_plugin.goatComponents.OutputProcessPart;
import com.sysma.goat.eclipse_plugin.goatComponents.Preconditions;
import com.sysma.goat.eclipse_plugin.goatComponents.Pred;
import com.sysma.goat.eclipse_plugin.goatComponents.Predicate;
import com.sysma.goat.eclipse_plugin.goatComponents.ProcessDefinition;
import com.sysma.goat.eclipse_plugin.goatComponents.RecAttribute;
import com.sysma.goat.eclipse_plugin.goatComponents.Update;
import com.sysma.goat.eclipse_plugin.goatComponents.Value;
import com.sysma.goat.eclipse_plugin.goatComponents.ZeroProcess;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class GoatComponentsFactoryImpl extends EFactoryImpl implements GoatComponentsFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static GoatComponentsFactory init()
  {
    try
    {
      GoatComponentsFactory theGoatComponentsFactory = (GoatComponentsFactory)EPackage.Registry.INSTANCE.getEFactory(GoatComponentsPackage.eNS_URI);
      if (theGoatComponentsFactory != null)
      {
        return theGoatComponentsFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new GoatComponentsFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GoatComponentsFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case GoatComponentsPackage.MODEL: return createModel();
      case GoatComponentsPackage.PROCESS: return createProcess();
      case GoatComponentsPackage.PRECONDITIONS: return createPreconditions();
      case GoatComponentsPackage.INPUT_PROCESSES_PART: return createInputProcessesPart();
      case GoatComponentsPackage.OUTPUT_PROCESS_PART: return createOutputProcessPart();
      case GoatComponentsPackage.UPDATE: return createUpdate();
      case GoatComponentsPackage.AWARENESS: return createAwareness();
      case GoatComponentsPackage.PROCESS_DEFINITION: return createProcessDefinition();
      case GoatComponentsPackage.ENVIRONMENT: return createEnvironment();
      case GoatComponentsPackage.COMPONENT_DEFINITION: return createComponentDefinition();
      case GoatComponentsPackage.ATTRIBUTE: return createAttribute();
      case GoatComponentsPackage.REC_ATTRIBUTE: return createRecAttribute();
      case GoatComponentsPackage.VALUE: return createValue();
      case GoatComponentsPackage.PRED: return createPred();
      case GoatComponentsPackage.FUNC_PARAM: return createFuncParam();
      case GoatComponentsPackage.FUNC_DEFINITION: return createFuncDefinition();
      case GoatComponentsPackage.FUNC_BLOCK: return createFuncBlock();
      case GoatComponentsPackage.FUNC_STATEMENT: return createFuncStatement();
      case GoatComponentsPackage.FUNC_VAR_DECLARATION: return createFuncVarDeclaration();
      case GoatComponentsPackage.FUNC_VAR_ASSIGN: return createFuncVarAssign();
      case GoatComponentsPackage.FUNC_VAR_PARAM: return createFuncVarParam();
      case GoatComponentsPackage.FUNC_VAL: return createFuncVal();
      case GoatComponentsPackage.FUNC_PRED: return createFuncPred();
      case GoatComponentsPackage.FUNC_IF_ELSE: return createFuncIfElse();
      case GoatComponentsPackage.FUNC_RETURN: return createFuncReturn();
      case GoatComponentsPackage.INTERLEAVING_PROCESS: return createInterleavingProcess();
      case GoatComponentsPackage.OUTPUT_PROCESS: return createOutputProcess();
      case GoatComponentsPackage.INPUT_PROCESSES: return createInputProcesses();
      case GoatComponentsPackage.INPUT_PROCESS: return createInputProcess();
      case GoatComponentsPackage.IF_PROCESSES: return createIfProcesses();
      case GoatComponentsPackage.IF_BRANCH_PROCESS: return createIfBranchProcess();
      case GoatComponentsPackage.CALL_PROCESS: return createCallProcess();
      case GoatComponentsPackage.ZERO_PROCESS: return createZeroProcess();
      case GoatComponentsPackage.ATTRIBUTE_VALUE: return createAttributeValue();
      case GoatComponentsPackage.IMMEDIATE_VALUE: return createImmediateValue();
      case GoatComponentsPackage.GO_STRING_FUNCTION: return createGoStringFunction();
      case GoatComponentsPackage.PREDICATE: return createPredicate();
      case GoatComponentsPackage.AND: return createAnd();
      case GoatComponentsPackage.NOT: return createNot();
      case GoatComponentsPackage.IMMEDIATE: return createImmediate();
      case GoatComponentsPackage.EQUALITY_TEST: return createEqualityTest();
      case GoatComponentsPackage.FUNC_STRING: return createFuncString();
      case GoatComponentsPackage.FUNC_MEMORY_REF: return createFuncMemoryRef();
      case GoatComponentsPackage.FUNC_PREDICATE: return createFuncPredicate();
      case GoatComponentsPackage.FUNC_AND: return createFuncAnd();
      case GoatComponentsPackage.FUNC_NOT: return createFuncNot();
      case GoatComponentsPackage.FUNC_IMMEDIATE: return createFuncImmediate();
      case GoatComponentsPackage.FUNC_EQUALITY_TEST: return createFuncEqualityTest();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public com.sysma.goat.eclipse_plugin.goatComponents.Process createProcess()
  {
    ProcessImpl process = new ProcessImpl();
    return process;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Preconditions createPreconditions()
  {
    PreconditionsImpl preconditions = new PreconditionsImpl();
    return preconditions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public InputProcessesPart createInputProcessesPart()
  {
    InputProcessesPartImpl inputProcessesPart = new InputProcessesPartImpl();
    return inputProcessesPart;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OutputProcessPart createOutputProcessPart()
  {
    OutputProcessPartImpl outputProcessPart = new OutputProcessPartImpl();
    return outputProcessPart;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Update createUpdate()
  {
    UpdateImpl update = new UpdateImpl();
    return update;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Awareness createAwareness()
  {
    AwarenessImpl awareness = new AwarenessImpl();
    return awareness;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ProcessDefinition createProcessDefinition()
  {
    ProcessDefinitionImpl processDefinition = new ProcessDefinitionImpl();
    return processDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Environment createEnvironment()
  {
    EnvironmentImpl environment = new EnvironmentImpl();
    return environment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ComponentDefinition createComponentDefinition()
  {
    ComponentDefinitionImpl componentDefinition = new ComponentDefinitionImpl();
    return componentDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Attribute createAttribute()
  {
    AttributeImpl attribute = new AttributeImpl();
    return attribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RecAttribute createRecAttribute()
  {
    RecAttributeImpl recAttribute = new RecAttributeImpl();
    return recAttribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Value createValue()
  {
    ValueImpl value = new ValueImpl();
    return value;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Pred createPred()
  {
    PredImpl pred = new PredImpl();
    return pred;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FuncParam createFuncParam()
  {
    FuncParamImpl funcParam = new FuncParamImpl();
    return funcParam;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FuncDefinition createFuncDefinition()
  {
    FuncDefinitionImpl funcDefinition = new FuncDefinitionImpl();
    return funcDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FuncBlock createFuncBlock()
  {
    FuncBlockImpl funcBlock = new FuncBlockImpl();
    return funcBlock;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FuncStatement createFuncStatement()
  {
    FuncStatementImpl funcStatement = new FuncStatementImpl();
    return funcStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FuncVarDeclaration createFuncVarDeclaration()
  {
    FuncVarDeclarationImpl funcVarDeclaration = new FuncVarDeclarationImpl();
    return funcVarDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FuncVarAssign createFuncVarAssign()
  {
    FuncVarAssignImpl funcVarAssign = new FuncVarAssignImpl();
    return funcVarAssign;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FuncVarParam createFuncVarParam()
  {
    FuncVarParamImpl funcVarParam = new FuncVarParamImpl();
    return funcVarParam;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FuncVal createFuncVal()
  {
    FuncValImpl funcVal = new FuncValImpl();
    return funcVal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FuncPred createFuncPred()
  {
    FuncPredImpl funcPred = new FuncPredImpl();
    return funcPred;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FuncIfElse createFuncIfElse()
  {
    FuncIfElseImpl funcIfElse = new FuncIfElseImpl();
    return funcIfElse;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FuncReturn createFuncReturn()
  {
    FuncReturnImpl funcReturn = new FuncReturnImpl();
    return funcReturn;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public InterleavingProcess createInterleavingProcess()
  {
    InterleavingProcessImpl interleavingProcess = new InterleavingProcessImpl();
    return interleavingProcess;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OutputProcess createOutputProcess()
  {
    OutputProcessImpl outputProcess = new OutputProcessImpl();
    return outputProcess;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public InputProcesses createInputProcesses()
  {
    InputProcessesImpl inputProcesses = new InputProcessesImpl();
    return inputProcesses;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public InputProcess createInputProcess()
  {
    InputProcessImpl inputProcess = new InputProcessImpl();
    return inputProcess;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IfProcesses createIfProcesses()
  {
    IfProcessesImpl ifProcesses = new IfProcessesImpl();
    return ifProcesses;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IfBranchProcess createIfBranchProcess()
  {
    IfBranchProcessImpl ifBranchProcess = new IfBranchProcessImpl();
    return ifBranchProcess;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CallProcess createCallProcess()
  {
    CallProcessImpl callProcess = new CallProcessImpl();
    return callProcess;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ZeroProcess createZeroProcess()
  {
    ZeroProcessImpl zeroProcess = new ZeroProcessImpl();
    return zeroProcess;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AttributeValue createAttributeValue()
  {
    AttributeValueImpl attributeValue = new AttributeValueImpl();
    return attributeValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ImmediateValue createImmediateValue()
  {
    ImmediateValueImpl immediateValue = new ImmediateValueImpl();
    return immediateValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GoStringFunction createGoStringFunction()
  {
    GoStringFunctionImpl goStringFunction = new GoStringFunctionImpl();
    return goStringFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Predicate createPredicate()
  {
    PredicateImpl predicate = new PredicateImpl();
    return predicate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public And createAnd()
  {
    AndImpl and = new AndImpl();
    return and;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Not createNot()
  {
    NotImpl not = new NotImpl();
    return not;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Immediate createImmediate()
  {
    ImmediateImpl immediate = new ImmediateImpl();
    return immediate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EqualityTest createEqualityTest()
  {
    EqualityTestImpl equalityTest = new EqualityTestImpl();
    return equalityTest;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FuncString createFuncString()
  {
    FuncStringImpl funcString = new FuncStringImpl();
    return funcString;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FuncMemoryRef createFuncMemoryRef()
  {
    FuncMemoryRefImpl funcMemoryRef = new FuncMemoryRefImpl();
    return funcMemoryRef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FuncPredicate createFuncPredicate()
  {
    FuncPredicateImpl funcPredicate = new FuncPredicateImpl();
    return funcPredicate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FuncAnd createFuncAnd()
  {
    FuncAndImpl funcAnd = new FuncAndImpl();
    return funcAnd;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FuncNot createFuncNot()
  {
    FuncNotImpl funcNot = new FuncNotImpl();
    return funcNot;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FuncImmediate createFuncImmediate()
  {
    FuncImmediateImpl funcImmediate = new FuncImmediateImpl();
    return funcImmediate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FuncEqualityTest createFuncEqualityTest()
  {
    FuncEqualityTestImpl funcEqualityTest = new FuncEqualityTestImpl();
    return funcEqualityTest;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GoatComponentsPackage getGoatComponentsPackage()
  {
    return (GoatComponentsPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static GoatComponentsPackage getPackage()
  {
    return GoatComponentsPackage.eINSTANCE;
  }

} //GoatComponentsFactoryImpl
