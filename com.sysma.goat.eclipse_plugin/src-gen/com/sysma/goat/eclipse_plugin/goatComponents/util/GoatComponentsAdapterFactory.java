/**
 * generated by Xtext 2.12.0
 */
package com.sysma.goat.eclipse_plugin.goatComponents.util;

import com.sysma.goat.eclipse_plugin.goatComponents.And;
import com.sysma.goat.eclipse_plugin.goatComponents.Attribute;
import com.sysma.goat.eclipse_plugin.goatComponents.AttributeValue;
import com.sysma.goat.eclipse_plugin.goatComponents.Awareness;
import com.sysma.goat.eclipse_plugin.goatComponents.CallProcess;
import com.sysma.goat.eclipse_plugin.goatComponents.ComponentDefinition;
import com.sysma.goat.eclipse_plugin.goatComponents.Environment;
import com.sysma.goat.eclipse_plugin.goatComponents.EqualityTest;
import com.sysma.goat.eclipse_plugin.goatComponents.FuncAnd;
import com.sysma.goat.eclipse_plugin.goatComponents.FuncBlock;
import com.sysma.goat.eclipse_plugin.goatComponents.FuncDefinition;
import com.sysma.goat.eclipse_plugin.goatComponents.FuncEqualityTest;
import com.sysma.goat.eclipse_plugin.goatComponents.FuncIfElse;
import com.sysma.goat.eclipse_plugin.goatComponents.FuncImmediate;
import com.sysma.goat.eclipse_plugin.goatComponents.FuncMemoryRef;
import com.sysma.goat.eclipse_plugin.goatComponents.FuncNot;
import com.sysma.goat.eclipse_plugin.goatComponents.FuncParam;
import com.sysma.goat.eclipse_plugin.goatComponents.FuncPred;
import com.sysma.goat.eclipse_plugin.goatComponents.FuncPredicate;
import com.sysma.goat.eclipse_plugin.goatComponents.FuncReturn;
import com.sysma.goat.eclipse_plugin.goatComponents.FuncStatement;
import com.sysma.goat.eclipse_plugin.goatComponents.FuncString;
import com.sysma.goat.eclipse_plugin.goatComponents.FuncVal;
import com.sysma.goat.eclipse_plugin.goatComponents.FuncVarAssign;
import com.sysma.goat.eclipse_plugin.goatComponents.FuncVarDeclaration;
import com.sysma.goat.eclipse_plugin.goatComponents.FuncVarParam;
import com.sysma.goat.eclipse_plugin.goatComponents.GoStringFunction;
import com.sysma.goat.eclipse_plugin.goatComponents.GoatComponentsPackage;
import com.sysma.goat.eclipse_plugin.goatComponents.IfBranchProcess;
import com.sysma.goat.eclipse_plugin.goatComponents.IfProcesses;
import com.sysma.goat.eclipse_plugin.goatComponents.Immediate;
import com.sysma.goat.eclipse_plugin.goatComponents.ImmediateValue;
import com.sysma.goat.eclipse_plugin.goatComponents.InputProcess;
import com.sysma.goat.eclipse_plugin.goatComponents.InputProcesses;
import com.sysma.goat.eclipse_plugin.goatComponents.InputProcessesPart;
import com.sysma.goat.eclipse_plugin.goatComponents.InterleavingProcess;
import com.sysma.goat.eclipse_plugin.goatComponents.Model;
import com.sysma.goat.eclipse_plugin.goatComponents.Not;
import com.sysma.goat.eclipse_plugin.goatComponents.OutputProcess;
import com.sysma.goat.eclipse_plugin.goatComponents.OutputProcessPart;
import com.sysma.goat.eclipse_plugin.goatComponents.Preconditions;
import com.sysma.goat.eclipse_plugin.goatComponents.Pred;
import com.sysma.goat.eclipse_plugin.goatComponents.Predicate;
import com.sysma.goat.eclipse_plugin.goatComponents.ProcessDefinition;
import com.sysma.goat.eclipse_plugin.goatComponents.RecAttribute;
import com.sysma.goat.eclipse_plugin.goatComponents.Update;
import com.sysma.goat.eclipse_plugin.goatComponents.Value;
import com.sysma.goat.eclipse_plugin.goatComponents.ZeroProcess;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see com.sysma.goat.eclipse_plugin.goatComponents.GoatComponentsPackage
 * @generated
 */
public class GoatComponentsAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static GoatComponentsPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GoatComponentsAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = GoatComponentsPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected GoatComponentsSwitch<Adapter> modelSwitch =
    new GoatComponentsSwitch<Adapter>()
    {
      @Override
      public Adapter caseModel(Model object)
      {
        return createModelAdapter();
      }
      @Override
      public Adapter caseProcess(com.sysma.goat.eclipse_plugin.goatComponents.Process object)
      {
        return createProcessAdapter();
      }
      @Override
      public Adapter casePreconditions(Preconditions object)
      {
        return createPreconditionsAdapter();
      }
      @Override
      public Adapter caseInputProcessesPart(InputProcessesPart object)
      {
        return createInputProcessesPartAdapter();
      }
      @Override
      public Adapter caseOutputProcessPart(OutputProcessPart object)
      {
        return createOutputProcessPartAdapter();
      }
      @Override
      public Adapter caseUpdate(Update object)
      {
        return createUpdateAdapter();
      }
      @Override
      public Adapter caseAwareness(Awareness object)
      {
        return createAwarenessAdapter();
      }
      @Override
      public Adapter caseProcessDefinition(ProcessDefinition object)
      {
        return createProcessDefinitionAdapter();
      }
      @Override
      public Adapter caseEnvironment(Environment object)
      {
        return createEnvironmentAdapter();
      }
      @Override
      public Adapter caseComponentDefinition(ComponentDefinition object)
      {
        return createComponentDefinitionAdapter();
      }
      @Override
      public Adapter caseAttribute(Attribute object)
      {
        return createAttributeAdapter();
      }
      @Override
      public Adapter caseRecAttribute(RecAttribute object)
      {
        return createRecAttributeAdapter();
      }
      @Override
      public Adapter caseValue(Value object)
      {
        return createValueAdapter();
      }
      @Override
      public Adapter casePred(Pred object)
      {
        return createPredAdapter();
      }
      @Override
      public Adapter caseFuncParam(FuncParam object)
      {
        return createFuncParamAdapter();
      }
      @Override
      public Adapter caseFuncDefinition(FuncDefinition object)
      {
        return createFuncDefinitionAdapter();
      }
      @Override
      public Adapter caseFuncBlock(FuncBlock object)
      {
        return createFuncBlockAdapter();
      }
      @Override
      public Adapter caseFuncStatement(FuncStatement object)
      {
        return createFuncStatementAdapter();
      }
      @Override
      public Adapter caseFuncVarDeclaration(FuncVarDeclaration object)
      {
        return createFuncVarDeclarationAdapter();
      }
      @Override
      public Adapter caseFuncVarAssign(FuncVarAssign object)
      {
        return createFuncVarAssignAdapter();
      }
      @Override
      public Adapter caseFuncVarParam(FuncVarParam object)
      {
        return createFuncVarParamAdapter();
      }
      @Override
      public Adapter caseFuncVal(FuncVal object)
      {
        return createFuncValAdapter();
      }
      @Override
      public Adapter caseFuncPred(FuncPred object)
      {
        return createFuncPredAdapter();
      }
      @Override
      public Adapter caseFuncIfElse(FuncIfElse object)
      {
        return createFuncIfElseAdapter();
      }
      @Override
      public Adapter caseFuncReturn(FuncReturn object)
      {
        return createFuncReturnAdapter();
      }
      @Override
      public Adapter caseInterleavingProcess(InterleavingProcess object)
      {
        return createInterleavingProcessAdapter();
      }
      @Override
      public Adapter caseOutputProcess(OutputProcess object)
      {
        return createOutputProcessAdapter();
      }
      @Override
      public Adapter caseInputProcesses(InputProcesses object)
      {
        return createInputProcessesAdapter();
      }
      @Override
      public Adapter caseInputProcess(InputProcess object)
      {
        return createInputProcessAdapter();
      }
      @Override
      public Adapter caseIfProcesses(IfProcesses object)
      {
        return createIfProcessesAdapter();
      }
      @Override
      public Adapter caseIfBranchProcess(IfBranchProcess object)
      {
        return createIfBranchProcessAdapter();
      }
      @Override
      public Adapter caseCallProcess(CallProcess object)
      {
        return createCallProcessAdapter();
      }
      @Override
      public Adapter caseZeroProcess(ZeroProcess object)
      {
        return createZeroProcessAdapter();
      }
      @Override
      public Adapter caseAttributeValue(AttributeValue object)
      {
        return createAttributeValueAdapter();
      }
      @Override
      public Adapter caseImmediateValue(ImmediateValue object)
      {
        return createImmediateValueAdapter();
      }
      @Override
      public Adapter caseGoStringFunction(GoStringFunction object)
      {
        return createGoStringFunctionAdapter();
      }
      @Override
      public Adapter casePredicate(Predicate object)
      {
        return createPredicateAdapter();
      }
      @Override
      public Adapter caseAnd(And object)
      {
        return createAndAdapter();
      }
      @Override
      public Adapter caseNot(Not object)
      {
        return createNotAdapter();
      }
      @Override
      public Adapter caseImmediate(Immediate object)
      {
        return createImmediateAdapter();
      }
      @Override
      public Adapter caseEqualityTest(EqualityTest object)
      {
        return createEqualityTestAdapter();
      }
      @Override
      public Adapter caseFuncString(FuncString object)
      {
        return createFuncStringAdapter();
      }
      @Override
      public Adapter caseFuncMemoryRef(FuncMemoryRef object)
      {
        return createFuncMemoryRefAdapter();
      }
      @Override
      public Adapter caseFuncPredicate(FuncPredicate object)
      {
        return createFuncPredicateAdapter();
      }
      @Override
      public Adapter caseFuncAnd(FuncAnd object)
      {
        return createFuncAndAdapter();
      }
      @Override
      public Adapter caseFuncNot(FuncNot object)
      {
        return createFuncNotAdapter();
      }
      @Override
      public Adapter caseFuncImmediate(FuncImmediate object)
      {
        return createFuncImmediateAdapter();
      }
      @Override
      public Adapter caseFuncEqualityTest(FuncEqualityTest object)
      {
        return createFuncEqualityTestAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link com.sysma.goat.eclipse_plugin.goatComponents.Model <em>Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.sysma.goat.eclipse_plugin.goatComponents.Model
   * @generated
   */
  public Adapter createModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.sysma.goat.eclipse_plugin.goatComponents.Process <em>Process</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.sysma.goat.eclipse_plugin.goatComponents.Process
   * @generated
   */
  public Adapter createProcessAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.sysma.goat.eclipse_plugin.goatComponents.Preconditions <em>Preconditions</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.sysma.goat.eclipse_plugin.goatComponents.Preconditions
   * @generated
   */
  public Adapter createPreconditionsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.sysma.goat.eclipse_plugin.goatComponents.InputProcessesPart <em>Input Processes Part</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.sysma.goat.eclipse_plugin.goatComponents.InputProcessesPart
   * @generated
   */
  public Adapter createInputProcessesPartAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.sysma.goat.eclipse_plugin.goatComponents.OutputProcessPart <em>Output Process Part</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.sysma.goat.eclipse_plugin.goatComponents.OutputProcessPart
   * @generated
   */
  public Adapter createOutputProcessPartAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.sysma.goat.eclipse_plugin.goatComponents.Update <em>Update</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.sysma.goat.eclipse_plugin.goatComponents.Update
   * @generated
   */
  public Adapter createUpdateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.sysma.goat.eclipse_plugin.goatComponents.Awareness <em>Awareness</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.sysma.goat.eclipse_plugin.goatComponents.Awareness
   * @generated
   */
  public Adapter createAwarenessAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.sysma.goat.eclipse_plugin.goatComponents.ProcessDefinition <em>Process Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.sysma.goat.eclipse_plugin.goatComponents.ProcessDefinition
   * @generated
   */
  public Adapter createProcessDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.sysma.goat.eclipse_plugin.goatComponents.Environment <em>Environment</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.sysma.goat.eclipse_plugin.goatComponents.Environment
   * @generated
   */
  public Adapter createEnvironmentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.sysma.goat.eclipse_plugin.goatComponents.ComponentDefinition <em>Component Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.sysma.goat.eclipse_plugin.goatComponents.ComponentDefinition
   * @generated
   */
  public Adapter createComponentDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.sysma.goat.eclipse_plugin.goatComponents.Attribute <em>Attribute</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.sysma.goat.eclipse_plugin.goatComponents.Attribute
   * @generated
   */
  public Adapter createAttributeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.sysma.goat.eclipse_plugin.goatComponents.RecAttribute <em>Rec Attribute</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.sysma.goat.eclipse_plugin.goatComponents.RecAttribute
   * @generated
   */
  public Adapter createRecAttributeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.sysma.goat.eclipse_plugin.goatComponents.Value <em>Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.sysma.goat.eclipse_plugin.goatComponents.Value
   * @generated
   */
  public Adapter createValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.sysma.goat.eclipse_plugin.goatComponents.Pred <em>Pred</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.sysma.goat.eclipse_plugin.goatComponents.Pred
   * @generated
   */
  public Adapter createPredAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.sysma.goat.eclipse_plugin.goatComponents.FuncParam <em>Func Param</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.sysma.goat.eclipse_plugin.goatComponents.FuncParam
   * @generated
   */
  public Adapter createFuncParamAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.sysma.goat.eclipse_plugin.goatComponents.FuncDefinition <em>Func Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.sysma.goat.eclipse_plugin.goatComponents.FuncDefinition
   * @generated
   */
  public Adapter createFuncDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.sysma.goat.eclipse_plugin.goatComponents.FuncBlock <em>Func Block</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.sysma.goat.eclipse_plugin.goatComponents.FuncBlock
   * @generated
   */
  public Adapter createFuncBlockAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.sysma.goat.eclipse_plugin.goatComponents.FuncStatement <em>Func Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.sysma.goat.eclipse_plugin.goatComponents.FuncStatement
   * @generated
   */
  public Adapter createFuncStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.sysma.goat.eclipse_plugin.goatComponents.FuncVarDeclaration <em>Func Var Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.sysma.goat.eclipse_plugin.goatComponents.FuncVarDeclaration
   * @generated
   */
  public Adapter createFuncVarDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.sysma.goat.eclipse_plugin.goatComponents.FuncVarAssign <em>Func Var Assign</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.sysma.goat.eclipse_plugin.goatComponents.FuncVarAssign
   * @generated
   */
  public Adapter createFuncVarAssignAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.sysma.goat.eclipse_plugin.goatComponents.FuncVarParam <em>Func Var Param</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.sysma.goat.eclipse_plugin.goatComponents.FuncVarParam
   * @generated
   */
  public Adapter createFuncVarParamAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.sysma.goat.eclipse_plugin.goatComponents.FuncVal <em>Func Val</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.sysma.goat.eclipse_plugin.goatComponents.FuncVal
   * @generated
   */
  public Adapter createFuncValAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.sysma.goat.eclipse_plugin.goatComponents.FuncPred <em>Func Pred</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.sysma.goat.eclipse_plugin.goatComponents.FuncPred
   * @generated
   */
  public Adapter createFuncPredAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.sysma.goat.eclipse_plugin.goatComponents.FuncIfElse <em>Func If Else</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.sysma.goat.eclipse_plugin.goatComponents.FuncIfElse
   * @generated
   */
  public Adapter createFuncIfElseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.sysma.goat.eclipse_plugin.goatComponents.FuncReturn <em>Func Return</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.sysma.goat.eclipse_plugin.goatComponents.FuncReturn
   * @generated
   */
  public Adapter createFuncReturnAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.sysma.goat.eclipse_plugin.goatComponents.InterleavingProcess <em>Interleaving Process</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.sysma.goat.eclipse_plugin.goatComponents.InterleavingProcess
   * @generated
   */
  public Adapter createInterleavingProcessAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.sysma.goat.eclipse_plugin.goatComponents.OutputProcess <em>Output Process</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.sysma.goat.eclipse_plugin.goatComponents.OutputProcess
   * @generated
   */
  public Adapter createOutputProcessAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.sysma.goat.eclipse_plugin.goatComponents.InputProcesses <em>Input Processes</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.sysma.goat.eclipse_plugin.goatComponents.InputProcesses
   * @generated
   */
  public Adapter createInputProcessesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.sysma.goat.eclipse_plugin.goatComponents.InputProcess <em>Input Process</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.sysma.goat.eclipse_plugin.goatComponents.InputProcess
   * @generated
   */
  public Adapter createInputProcessAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.sysma.goat.eclipse_plugin.goatComponents.IfProcesses <em>If Processes</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.sysma.goat.eclipse_plugin.goatComponents.IfProcesses
   * @generated
   */
  public Adapter createIfProcessesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.sysma.goat.eclipse_plugin.goatComponents.IfBranchProcess <em>If Branch Process</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.sysma.goat.eclipse_plugin.goatComponents.IfBranchProcess
   * @generated
   */
  public Adapter createIfBranchProcessAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.sysma.goat.eclipse_plugin.goatComponents.CallProcess <em>Call Process</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.sysma.goat.eclipse_plugin.goatComponents.CallProcess
   * @generated
   */
  public Adapter createCallProcessAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.sysma.goat.eclipse_plugin.goatComponents.ZeroProcess <em>Zero Process</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.sysma.goat.eclipse_plugin.goatComponents.ZeroProcess
   * @generated
   */
  public Adapter createZeroProcessAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.sysma.goat.eclipse_plugin.goatComponents.AttributeValue <em>Attribute Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.sysma.goat.eclipse_plugin.goatComponents.AttributeValue
   * @generated
   */
  public Adapter createAttributeValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.sysma.goat.eclipse_plugin.goatComponents.ImmediateValue <em>Immediate Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.sysma.goat.eclipse_plugin.goatComponents.ImmediateValue
   * @generated
   */
  public Adapter createImmediateValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.sysma.goat.eclipse_plugin.goatComponents.GoStringFunction <em>Go String Function</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.sysma.goat.eclipse_plugin.goatComponents.GoStringFunction
   * @generated
   */
  public Adapter createGoStringFunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.sysma.goat.eclipse_plugin.goatComponents.Predicate <em>Predicate</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.sysma.goat.eclipse_plugin.goatComponents.Predicate
   * @generated
   */
  public Adapter createPredicateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.sysma.goat.eclipse_plugin.goatComponents.And <em>And</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.sysma.goat.eclipse_plugin.goatComponents.And
   * @generated
   */
  public Adapter createAndAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.sysma.goat.eclipse_plugin.goatComponents.Not <em>Not</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.sysma.goat.eclipse_plugin.goatComponents.Not
   * @generated
   */
  public Adapter createNotAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.sysma.goat.eclipse_plugin.goatComponents.Immediate <em>Immediate</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.sysma.goat.eclipse_plugin.goatComponents.Immediate
   * @generated
   */
  public Adapter createImmediateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.sysma.goat.eclipse_plugin.goatComponents.EqualityTest <em>Equality Test</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.sysma.goat.eclipse_plugin.goatComponents.EqualityTest
   * @generated
   */
  public Adapter createEqualityTestAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.sysma.goat.eclipse_plugin.goatComponents.FuncString <em>Func String</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.sysma.goat.eclipse_plugin.goatComponents.FuncString
   * @generated
   */
  public Adapter createFuncStringAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.sysma.goat.eclipse_plugin.goatComponents.FuncMemoryRef <em>Func Memory Ref</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.sysma.goat.eclipse_plugin.goatComponents.FuncMemoryRef
   * @generated
   */
  public Adapter createFuncMemoryRefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.sysma.goat.eclipse_plugin.goatComponents.FuncPredicate <em>Func Predicate</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.sysma.goat.eclipse_plugin.goatComponents.FuncPredicate
   * @generated
   */
  public Adapter createFuncPredicateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.sysma.goat.eclipse_plugin.goatComponents.FuncAnd <em>Func And</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.sysma.goat.eclipse_plugin.goatComponents.FuncAnd
   * @generated
   */
  public Adapter createFuncAndAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.sysma.goat.eclipse_plugin.goatComponents.FuncNot <em>Func Not</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.sysma.goat.eclipse_plugin.goatComponents.FuncNot
   * @generated
   */
  public Adapter createFuncNotAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.sysma.goat.eclipse_plugin.goatComponents.FuncImmediate <em>Func Immediate</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.sysma.goat.eclipse_plugin.goatComponents.FuncImmediate
   * @generated
   */
  public Adapter createFuncImmediateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.sysma.goat.eclipse_plugin.goatComponents.FuncEqualityTest <em>Func Equality Test</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.sysma.goat.eclipse_plugin.goatComponents.FuncEqualityTest
   * @generated
   */
  public Adapter createFuncEqualityTestAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //GoatComponentsAdapterFactory
