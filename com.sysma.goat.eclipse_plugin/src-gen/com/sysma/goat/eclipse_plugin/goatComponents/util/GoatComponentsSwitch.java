/**
 * generated by Xtext 2.12.0
 */
package com.sysma.goat.eclipse_plugin.goatComponents.util;

import com.sysma.goat.eclipse_plugin.goatComponents.And;
import com.sysma.goat.eclipse_plugin.goatComponents.Attribute;
import com.sysma.goat.eclipse_plugin.goatComponents.AttributeValue;
import com.sysma.goat.eclipse_plugin.goatComponents.Awareness;
import com.sysma.goat.eclipse_plugin.goatComponents.CallProcess;
import com.sysma.goat.eclipse_plugin.goatComponents.ComponentDefinition;
import com.sysma.goat.eclipse_plugin.goatComponents.Environment;
import com.sysma.goat.eclipse_plugin.goatComponents.EqualityTest;
import com.sysma.goat.eclipse_plugin.goatComponents.FuncAnd;
import com.sysma.goat.eclipse_plugin.goatComponents.FuncBlock;
import com.sysma.goat.eclipse_plugin.goatComponents.FuncDefinition;
import com.sysma.goat.eclipse_plugin.goatComponents.FuncEqualityTest;
import com.sysma.goat.eclipse_plugin.goatComponents.FuncIfElse;
import com.sysma.goat.eclipse_plugin.goatComponents.FuncImmediate;
import com.sysma.goat.eclipse_plugin.goatComponents.FuncMemoryRef;
import com.sysma.goat.eclipse_plugin.goatComponents.FuncNot;
import com.sysma.goat.eclipse_plugin.goatComponents.FuncParam;
import com.sysma.goat.eclipse_plugin.goatComponents.FuncPred;
import com.sysma.goat.eclipse_plugin.goatComponents.FuncPredicate;
import com.sysma.goat.eclipse_plugin.goatComponents.FuncReturn;
import com.sysma.goat.eclipse_plugin.goatComponents.FuncStatement;
import com.sysma.goat.eclipse_plugin.goatComponents.FuncString;
import com.sysma.goat.eclipse_plugin.goatComponents.FuncVal;
import com.sysma.goat.eclipse_plugin.goatComponents.FuncVarAssign;
import com.sysma.goat.eclipse_plugin.goatComponents.FuncVarDeclaration;
import com.sysma.goat.eclipse_plugin.goatComponents.FuncVarParam;
import com.sysma.goat.eclipse_plugin.goatComponents.GoStringFunction;
import com.sysma.goat.eclipse_plugin.goatComponents.GoatComponentsPackage;
import com.sysma.goat.eclipse_plugin.goatComponents.IfBranchProcess;
import com.sysma.goat.eclipse_plugin.goatComponents.IfProcesses;
import com.sysma.goat.eclipse_plugin.goatComponents.Immediate;
import com.sysma.goat.eclipse_plugin.goatComponents.ImmediateValue;
import com.sysma.goat.eclipse_plugin.goatComponents.InputProcess;
import com.sysma.goat.eclipse_plugin.goatComponents.InputProcesses;
import com.sysma.goat.eclipse_plugin.goatComponents.InputProcessesPart;
import com.sysma.goat.eclipse_plugin.goatComponents.InterleavingProcess;
import com.sysma.goat.eclipse_plugin.goatComponents.Model;
import com.sysma.goat.eclipse_plugin.goatComponents.Not;
import com.sysma.goat.eclipse_plugin.goatComponents.OutputProcess;
import com.sysma.goat.eclipse_plugin.goatComponents.OutputProcessPart;
import com.sysma.goat.eclipse_plugin.goatComponents.Preconditions;
import com.sysma.goat.eclipse_plugin.goatComponents.Pred;
import com.sysma.goat.eclipse_plugin.goatComponents.Predicate;
import com.sysma.goat.eclipse_plugin.goatComponents.ProcessDefinition;
import com.sysma.goat.eclipse_plugin.goatComponents.RecAttribute;
import com.sysma.goat.eclipse_plugin.goatComponents.Update;
import com.sysma.goat.eclipse_plugin.goatComponents.Value;
import com.sysma.goat.eclipse_plugin.goatComponents.ZeroProcess;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see com.sysma.goat.eclipse_plugin.goatComponents.GoatComponentsPackage
 * @generated
 */
public class GoatComponentsSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static GoatComponentsPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GoatComponentsSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = GoatComponentsPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case GoatComponentsPackage.MODEL:
      {
        Model model = (Model)theEObject;
        T result = caseModel(model);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoatComponentsPackage.PROCESS:
      {
        com.sysma.goat.eclipse_plugin.goatComponents.Process process = (com.sysma.goat.eclipse_plugin.goatComponents.Process)theEObject;
        T result = caseProcess(process);
        if (result == null) result = caseOutputProcessPart(process);
        if (result == null) result = caseInputProcessesPart(process);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoatComponentsPackage.PRECONDITIONS:
      {
        Preconditions preconditions = (Preconditions)theEObject;
        T result = casePreconditions(preconditions);
        if (result == null) result = caseProcess(preconditions);
        if (result == null) result = caseOutputProcessPart(preconditions);
        if (result == null) result = caseInputProcessesPart(preconditions);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoatComponentsPackage.INPUT_PROCESSES_PART:
      {
        InputProcessesPart inputProcessesPart = (InputProcessesPart)theEObject;
        T result = caseInputProcessesPart(inputProcessesPart);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoatComponentsPackage.OUTPUT_PROCESS_PART:
      {
        OutputProcessPart outputProcessPart = (OutputProcessPart)theEObject;
        T result = caseOutputProcessPart(outputProcessPart);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoatComponentsPackage.UPDATE:
      {
        Update update = (Update)theEObject;
        T result = caseUpdate(update);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoatComponentsPackage.AWARENESS:
      {
        Awareness awareness = (Awareness)theEObject;
        T result = caseAwareness(awareness);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoatComponentsPackage.PROCESS_DEFINITION:
      {
        ProcessDefinition processDefinition = (ProcessDefinition)theEObject;
        T result = caseProcessDefinition(processDefinition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoatComponentsPackage.ENVIRONMENT:
      {
        Environment environment = (Environment)theEObject;
        T result = caseEnvironment(environment);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoatComponentsPackage.COMPONENT_DEFINITION:
      {
        ComponentDefinition componentDefinition = (ComponentDefinition)theEObject;
        T result = caseComponentDefinition(componentDefinition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoatComponentsPackage.ATTRIBUTE:
      {
        Attribute attribute = (Attribute)theEObject;
        T result = caseAttribute(attribute);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoatComponentsPackage.REC_ATTRIBUTE:
      {
        RecAttribute recAttribute = (RecAttribute)theEObject;
        T result = caseRecAttribute(recAttribute);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoatComponentsPackage.VALUE:
      {
        Value value = (Value)theEObject;
        T result = caseValue(value);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoatComponentsPackage.PRED:
      {
        Pred pred = (Pred)theEObject;
        T result = casePred(pred);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoatComponentsPackage.FUNC_PARAM:
      {
        FuncParam funcParam = (FuncParam)theEObject;
        T result = caseFuncParam(funcParam);
        if (result == null) result = caseFuncVarParam(funcParam);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoatComponentsPackage.FUNC_DEFINITION:
      {
        FuncDefinition funcDefinition = (FuncDefinition)theEObject;
        T result = caseFuncDefinition(funcDefinition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoatComponentsPackage.FUNC_BLOCK:
      {
        FuncBlock funcBlock = (FuncBlock)theEObject;
        T result = caseFuncBlock(funcBlock);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoatComponentsPackage.FUNC_STATEMENT:
      {
        FuncStatement funcStatement = (FuncStatement)theEObject;
        T result = caseFuncStatement(funcStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoatComponentsPackage.FUNC_VAR_DECLARATION:
      {
        FuncVarDeclaration funcVarDeclaration = (FuncVarDeclaration)theEObject;
        T result = caseFuncVarDeclaration(funcVarDeclaration);
        if (result == null) result = caseFuncStatement(funcVarDeclaration);
        if (result == null) result = caseFuncVarParam(funcVarDeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoatComponentsPackage.FUNC_VAR_ASSIGN:
      {
        FuncVarAssign funcVarAssign = (FuncVarAssign)theEObject;
        T result = caseFuncVarAssign(funcVarAssign);
        if (result == null) result = caseFuncStatement(funcVarAssign);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoatComponentsPackage.FUNC_VAR_PARAM:
      {
        FuncVarParam funcVarParam = (FuncVarParam)theEObject;
        T result = caseFuncVarParam(funcVarParam);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoatComponentsPackage.FUNC_VAL:
      {
        FuncVal funcVal = (FuncVal)theEObject;
        T result = caseFuncVal(funcVal);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoatComponentsPackage.FUNC_PRED:
      {
        FuncPred funcPred = (FuncPred)theEObject;
        T result = caseFuncPred(funcPred);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoatComponentsPackage.FUNC_IF_ELSE:
      {
        FuncIfElse funcIfElse = (FuncIfElse)theEObject;
        T result = caseFuncIfElse(funcIfElse);
        if (result == null) result = caseFuncStatement(funcIfElse);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoatComponentsPackage.FUNC_RETURN:
      {
        FuncReturn funcReturn = (FuncReturn)theEObject;
        T result = caseFuncReturn(funcReturn);
        if (result == null) result = caseFuncStatement(funcReturn);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoatComponentsPackage.INTERLEAVING_PROCESS:
      {
        InterleavingProcess interleavingProcess = (InterleavingProcess)theEObject;
        T result = caseInterleavingProcess(interleavingProcess);
        if (result == null) result = caseProcess(interleavingProcess);
        if (result == null) result = caseOutputProcessPart(interleavingProcess);
        if (result == null) result = caseInputProcessesPart(interleavingProcess);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoatComponentsPackage.OUTPUT_PROCESS:
      {
        OutputProcess outputProcess = (OutputProcess)theEObject;
        T result = caseOutputProcess(outputProcess);
        if (result == null) result = caseProcess(outputProcess);
        if (result == null) result = caseOutputProcessPart(outputProcess);
        if (result == null) result = caseInputProcessesPart(outputProcess);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoatComponentsPackage.INPUT_PROCESSES:
      {
        InputProcesses inputProcesses = (InputProcesses)theEObject;
        T result = caseInputProcesses(inputProcesses);
        if (result == null) result = caseProcess(inputProcesses);
        if (result == null) result = caseOutputProcessPart(inputProcesses);
        if (result == null) result = caseInputProcessesPart(inputProcesses);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoatComponentsPackage.INPUT_PROCESS:
      {
        InputProcess inputProcess = (InputProcess)theEObject;
        T result = caseInputProcess(inputProcess);
        if (result == null) result = caseProcess(inputProcess);
        if (result == null) result = caseOutputProcessPart(inputProcess);
        if (result == null) result = caseInputProcessesPart(inputProcess);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoatComponentsPackage.IF_PROCESSES:
      {
        IfProcesses ifProcesses = (IfProcesses)theEObject;
        T result = caseIfProcesses(ifProcesses);
        if (result == null) result = caseProcess(ifProcesses);
        if (result == null) result = caseOutputProcessPart(ifProcesses);
        if (result == null) result = caseInputProcessesPart(ifProcesses);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoatComponentsPackage.IF_BRANCH_PROCESS:
      {
        IfBranchProcess ifBranchProcess = (IfBranchProcess)theEObject;
        T result = caseIfBranchProcess(ifBranchProcess);
        if (result == null) result = caseProcess(ifBranchProcess);
        if (result == null) result = caseOutputProcessPart(ifBranchProcess);
        if (result == null) result = caseInputProcessesPart(ifBranchProcess);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoatComponentsPackage.CALL_PROCESS:
      {
        CallProcess callProcess = (CallProcess)theEObject;
        T result = caseCallProcess(callProcess);
        if (result == null) result = caseProcess(callProcess);
        if (result == null) result = caseOutputProcessPart(callProcess);
        if (result == null) result = caseInputProcessesPart(callProcess);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoatComponentsPackage.ZERO_PROCESS:
      {
        ZeroProcess zeroProcess = (ZeroProcess)theEObject;
        T result = caseZeroProcess(zeroProcess);
        if (result == null) result = caseProcess(zeroProcess);
        if (result == null) result = caseOutputProcessPart(zeroProcess);
        if (result == null) result = caseInputProcessesPart(zeroProcess);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoatComponentsPackage.ATTRIBUTE_VALUE:
      {
        AttributeValue attributeValue = (AttributeValue)theEObject;
        T result = caseAttributeValue(attributeValue);
        if (result == null) result = caseValue(attributeValue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoatComponentsPackage.IMMEDIATE_VALUE:
      {
        ImmediateValue immediateValue = (ImmediateValue)theEObject;
        T result = caseImmediateValue(immediateValue);
        if (result == null) result = caseValue(immediateValue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoatComponentsPackage.GO_STRING_FUNCTION:
      {
        GoStringFunction goStringFunction = (GoStringFunction)theEObject;
        T result = caseGoStringFunction(goStringFunction);
        if (result == null) result = caseValue(goStringFunction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoatComponentsPackage.PREDICATE:
      {
        Predicate predicate = (Predicate)theEObject;
        T result = casePredicate(predicate);
        if (result == null) result = casePred(predicate);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoatComponentsPackage.AND:
      {
        And and = (And)theEObject;
        T result = caseAnd(and);
        if (result == null) result = casePred(and);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoatComponentsPackage.NOT:
      {
        Not not = (Not)theEObject;
        T result = caseNot(not);
        if (result == null) result = casePred(not);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoatComponentsPackage.IMMEDIATE:
      {
        Immediate immediate = (Immediate)theEObject;
        T result = caseImmediate(immediate);
        if (result == null) result = casePred(immediate);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoatComponentsPackage.EQUALITY_TEST:
      {
        EqualityTest equalityTest = (EqualityTest)theEObject;
        T result = caseEqualityTest(equalityTest);
        if (result == null) result = casePred(equalityTest);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoatComponentsPackage.FUNC_STRING:
      {
        FuncString funcString = (FuncString)theEObject;
        T result = caseFuncString(funcString);
        if (result == null) result = caseFuncVal(funcString);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoatComponentsPackage.FUNC_MEMORY_REF:
      {
        FuncMemoryRef funcMemoryRef = (FuncMemoryRef)theEObject;
        T result = caseFuncMemoryRef(funcMemoryRef);
        if (result == null) result = caseFuncVal(funcMemoryRef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoatComponentsPackage.FUNC_PREDICATE:
      {
        FuncPredicate funcPredicate = (FuncPredicate)theEObject;
        T result = caseFuncPredicate(funcPredicate);
        if (result == null) result = caseFuncPred(funcPredicate);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoatComponentsPackage.FUNC_AND:
      {
        FuncAnd funcAnd = (FuncAnd)theEObject;
        T result = caseFuncAnd(funcAnd);
        if (result == null) result = caseFuncPred(funcAnd);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoatComponentsPackage.FUNC_NOT:
      {
        FuncNot funcNot = (FuncNot)theEObject;
        T result = caseFuncNot(funcNot);
        if (result == null) result = caseFuncPred(funcNot);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoatComponentsPackage.FUNC_IMMEDIATE:
      {
        FuncImmediate funcImmediate = (FuncImmediate)theEObject;
        T result = caseFuncImmediate(funcImmediate);
        if (result == null) result = caseFuncPred(funcImmediate);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoatComponentsPackage.FUNC_EQUALITY_TEST:
      {
        FuncEqualityTest funcEqualityTest = (FuncEqualityTest)theEObject;
        T result = caseFuncEqualityTest(funcEqualityTest);
        if (result == null) result = caseFuncPred(funcEqualityTest);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Model</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Model</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModel(Model object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Process</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Process</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseProcess(com.sysma.goat.eclipse_plugin.goatComponents.Process object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Preconditions</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Preconditions</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePreconditions(Preconditions object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Input Processes Part</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Input Processes Part</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInputProcessesPart(InputProcessesPart object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Output Process Part</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Output Process Part</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOutputProcessPart(OutputProcessPart object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Update</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Update</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUpdate(Update object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Awareness</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Awareness</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAwareness(Awareness object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Process Definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Process Definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseProcessDefinition(ProcessDefinition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Environment</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Environment</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEnvironment(Environment object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Component Definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Component Definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseComponentDefinition(ComponentDefinition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Attribute</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Attribute</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAttribute(Attribute object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Rec Attribute</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Rec Attribute</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRecAttribute(RecAttribute object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseValue(Value object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Pred</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Pred</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePred(Pred object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Func Param</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Func Param</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFuncParam(FuncParam object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Func Definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Func Definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFuncDefinition(FuncDefinition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Func Block</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Func Block</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFuncBlock(FuncBlock object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Func Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Func Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFuncStatement(FuncStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Func Var Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Func Var Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFuncVarDeclaration(FuncVarDeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Func Var Assign</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Func Var Assign</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFuncVarAssign(FuncVarAssign object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Func Var Param</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Func Var Param</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFuncVarParam(FuncVarParam object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Func Val</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Func Val</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFuncVal(FuncVal object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Func Pred</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Func Pred</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFuncPred(FuncPred object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Func If Else</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Func If Else</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFuncIfElse(FuncIfElse object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Func Return</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Func Return</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFuncReturn(FuncReturn object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Interleaving Process</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Interleaving Process</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInterleavingProcess(InterleavingProcess object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Output Process</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Output Process</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOutputProcess(OutputProcess object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Input Processes</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Input Processes</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInputProcesses(InputProcesses object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Input Process</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Input Process</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInputProcess(InputProcess object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>If Processes</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>If Processes</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIfProcesses(IfProcesses object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>If Branch Process</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>If Branch Process</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIfBranchProcess(IfBranchProcess object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Call Process</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Call Process</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCallProcess(CallProcess object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Zero Process</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Zero Process</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseZeroProcess(ZeroProcess object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Attribute Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Attribute Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAttributeValue(AttributeValue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Immediate Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Immediate Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseImmediateValue(ImmediateValue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Go String Function</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Go String Function</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseGoStringFunction(GoStringFunction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Predicate</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Predicate</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePredicate(Predicate object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>And</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>And</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAnd(And object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Not</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Not</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNot(Not object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Immediate</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Immediate</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseImmediate(Immediate object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Equality Test</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Equality Test</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEqualityTest(EqualityTest object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Func String</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Func String</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFuncString(FuncString object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Func Memory Ref</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Func Memory Ref</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFuncMemoryRef(FuncMemoryRef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Func Predicate</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Func Predicate</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFuncPredicate(FuncPredicate object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Func And</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Func And</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFuncAnd(FuncAnd object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Func Not</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Func Not</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFuncNot(FuncNot object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Func Immediate</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Func Immediate</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFuncImmediate(FuncImmediate object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Func Equality Test</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Func Equality Test</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFuncEqualityTest(FuncEqualityTest object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //GoatComponentsSwitch
