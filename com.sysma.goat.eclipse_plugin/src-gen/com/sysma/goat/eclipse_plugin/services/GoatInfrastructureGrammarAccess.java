/*
 * generated by Xtext 2.12.0
 */
package com.sysma.goat.eclipse_plugin.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class GoatInfrastructureGrammarAccess extends AbstractGrammarElementFinder {
	
	public class InfrastructureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatInfrastructure.Infrastructure");
		private final RuleCall cSingleServerParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Infrastructure:
		//	SingleServer //|Cluster|Ring|Tree
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//SingleServer
		public RuleCall getSingleServerParserRuleCall() { return cSingleServerParserRuleCall; }
	}
	public class SingleServerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatInfrastructure.SingleServer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSingleserverKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cParamsParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//SingleServer:
		//	'singleserver' name=ID Params;
		@Override public ParserRule getRule() { return rule; }
		
		//'singleserver' name=ID Params
		public Group getGroup() { return cGroup; }
		
		//'singleserver'
		public Keyword getSingleserverKeyword_0() { return cSingleserverKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//Params
		public RuleCall getParamsParserRuleCall_2() { return cParamsParserRuleCall_2; }
	}
	public class ClusterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatInfrastructure.Cluster");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClusterKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cParamsParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Cluster:
		//	'cluster' name=ID Params;
		@Override public ParserRule getRule() { return rule; }
		
		//'cluster' name=ID Params
		public Group getGroup() { return cGroup; }
		
		//'cluster'
		public Keyword getClusterKeyword_0() { return cClusterKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//Params
		public RuleCall getParamsParserRuleCall_2() { return cParamsParserRuleCall_2; }
	}
	public class RingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatInfrastructure.Ring");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cParamsParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Ring:
		//	'ring' name=ID Params;
		@Override public ParserRule getRule() { return rule; }
		
		//'ring' name=ID Params
		public Group getGroup() { return cGroup; }
		
		//'ring'
		public Keyword getRingKeyword_0() { return cRingKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//Params
		public RuleCall getParamsParserRuleCall_2() { return cParamsParserRuleCall_2; }
	}
	public class TreeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatInfrastructure.Tree");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTreeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cParamsParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Tree:
		//	'tree' name=ID Params;
		@Override public ParserRule getRule() { return rule; }
		
		//'tree' name=ID Params
		public Group getGroup() { return cGroup; }
		
		//'tree'
		public Keyword getTreeKeyword_0() { return cTreeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//Params
		public RuleCall getParamsParserRuleCall_2() { return cParamsParserRuleCall_2; }
	}
	public class ParamsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatInfrastructure.Params");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Assignment cParamsAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cParamsParamParserRuleCall_1_0_0_0 = (RuleCall)cParamsAssignment_1_0_0.eContents().get(0);
		private final Keyword cCommaKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cParamsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParamsParamParserRuleCall_1_1_0 = (RuleCall)cParamsAssignment_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//fragment Params:
		//	'{' ((params+=Param ',')*
		//	params+=Param)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' ((params+=Param ',')* params+=Param)? '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//((params+=Param ',')* params+=Param)?
		public Group getGroup_1() { return cGroup_1; }
		
		//(params+=Param ',')*
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//params+=Param
		public Assignment getParamsAssignment_1_0_0() { return cParamsAssignment_1_0_0; }
		
		//Param
		public RuleCall getParamsParamParserRuleCall_1_0_0_0() { return cParamsParamParserRuleCall_1_0_0_0; }
		
		//','
		public Keyword getCommaKeyword_1_0_1() { return cCommaKeyword_1_0_1; }
		
		//params+=Param
		public Assignment getParamsAssignment_1_1() { return cParamsAssignment_1_1; }
		
		//Param
		public RuleCall getParamsParamParserRuleCall_1_1_0() { return cParamsParamParserRuleCall_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}
	public class ParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatInfrastructure.Param");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Param:
		//	name=ID ":" value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ":" value=STRING
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=STRING
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }
	}
	
	
	private final InfrastructureElements pInfrastructure;
	private final SingleServerElements pSingleServer;
	private final ClusterElements pCluster;
	private final RingElements pRing;
	private final TreeElements pTree;
	private final ParamsElements pParams;
	private final ParamElements pParam;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public GoatInfrastructureGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pInfrastructure = new InfrastructureElements();
		this.pSingleServer = new SingleServerElements();
		this.pCluster = new ClusterElements();
		this.pRing = new RingElements();
		this.pTree = new TreeElements();
		this.pParams = new ParamsElements();
		this.pParam = new ParamElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.sysma.goat.eclipse_plugin.GoatInfrastructure".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Infrastructure:
	//	SingleServer //|Cluster|Ring|Tree
	//;
	public InfrastructureElements getInfrastructureAccess() {
		return pInfrastructure;
	}
	
	public ParserRule getInfrastructureRule() {
		return getInfrastructureAccess().getRule();
	}
	
	//SingleServer:
	//	'singleserver' name=ID Params;
	public SingleServerElements getSingleServerAccess() {
		return pSingleServer;
	}
	
	public ParserRule getSingleServerRule() {
		return getSingleServerAccess().getRule();
	}
	
	//Cluster:
	//	'cluster' name=ID Params;
	public ClusterElements getClusterAccess() {
		return pCluster;
	}
	
	public ParserRule getClusterRule() {
		return getClusterAccess().getRule();
	}
	
	//Ring:
	//	'ring' name=ID Params;
	public RingElements getRingAccess() {
		return pRing;
	}
	
	public ParserRule getRingRule() {
		return getRingAccess().getRule();
	}
	
	//Tree:
	//	'tree' name=ID Params;
	public TreeElements getTreeAccess() {
		return pTree;
	}
	
	public ParserRule getTreeRule() {
		return getTreeAccess().getRule();
	}
	
	//fragment Params:
	//	'{' ((params+=Param ',')*
	//	params+=Param)?
	//	'}';
	public ParamsElements getParamsAccess() {
		return pParams;
	}
	
	public ParserRule getParamsRule() {
		return getParamsAccess().getRule();
	}
	
	//Param:
	//	name=ID ":" value=STRING;
	public ParamElements getParamAccess() {
		return pParam;
	}
	
	public ParserRule getParamRule() {
		return getParamAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
