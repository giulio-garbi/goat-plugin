/*
 * generated by Xtext 2.12.0
 */
package com.sysma.goat.eclipse_plugin.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class GoatComponentsGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.Model");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cProcessesAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cProcessesProcessDefinitionParserRuleCall_0_0 = (RuleCall)cProcessesAssignment_0.eContents().get(0);
		private final Assignment cComponentsAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cComponentsComponentDefinitionParserRuleCall_1_0 = (RuleCall)cComponentsAssignment_1.eContents().get(0);
		private final Assignment cFunctionsAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cFunctionsFuncDefinitionParserRuleCall_2_0 = (RuleCall)cFunctionsAssignment_2.eContents().get(0);
		
		//Model:
		//	(processes+=ProcessDefinition | components+=ComponentDefinition | functions+=FuncDefinition)*;
		@Override public ParserRule getRule() { return rule; }
		
		//(processes+=ProcessDefinition | components+=ComponentDefinition | functions+=FuncDefinition)*
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//processes+=ProcessDefinition
		public Assignment getProcessesAssignment_0() { return cProcessesAssignment_0; }
		
		//ProcessDefinition
		public RuleCall getProcessesProcessDefinitionParserRuleCall_0_0() { return cProcessesProcessDefinitionParserRuleCall_0_0; }
		
		//components+=ComponentDefinition
		public Assignment getComponentsAssignment_1() { return cComponentsAssignment_1; }
		
		//ComponentDefinition
		public RuleCall getComponentsComponentDefinitionParserRuleCall_1_0() { return cComponentsComponentDefinitionParserRuleCall_1_0; }
		
		//functions+=FuncDefinition
		public Assignment getFunctionsAssignment_2() { return cFunctionsAssignment_2; }
		
		//FuncDefinition
		public RuleCall getFunctionsFuncDefinitionParserRuleCall_2_0() { return cFunctionsFuncDefinitionParserRuleCall_2_0; }
	}
	public class ProcElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.Proc");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInterleavingProcessParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNonDeterminismProcessParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// Process
		//Proc Process:
		//	InterleavingProcess | NonDeterminismProcess;
		@Override public ParserRule getRule() { return rule; }
		
		//InterleavingProcess | NonDeterminismProcess
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//InterleavingProcess
		public RuleCall getInterleavingProcessParserRuleCall_0() { return cInterleavingProcessParserRuleCall_0; }
		
		//NonDeterminismProcess
		public RuleCall getNonDeterminismProcessParserRuleCall_1() { return cNonDeterminismProcessParserRuleCall_1; }
	}
	public class InterleavingProcessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.InterleavingProcess");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCallProcessParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Action cInterleavingProcessSubProcsAction_1 = (Action)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cVerticalLineKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSubProcsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSubProcsCallProcessParserRuleCall_2_1_0 = (RuleCall)cSubProcsAssignment_2_1.eContents().get(0);
		
		//InterleavingProcess Process:
		//	CallProcess {InterleavingProcess.subProcs+=current} ("|" subProcs+=CallProcess)*;
		@Override public ParserRule getRule() { return rule; }
		
		//CallProcess {InterleavingProcess.subProcs+=current} ("|" subProcs+=CallProcess)*
		public Group getGroup() { return cGroup; }
		
		//CallProcess
		public RuleCall getCallProcessParserRuleCall_0() { return cCallProcessParserRuleCall_0; }
		
		//{InterleavingProcess.subProcs+=current}
		public Action getInterleavingProcessSubProcsAction_1() { return cInterleavingProcessSubProcsAction_1; }
		
		//("|" subProcs+=CallProcess)*
		public Group getGroup_2() { return cGroup_2; }
		
		//"|"
		public Keyword getVerticalLineKeyword_2_0() { return cVerticalLineKeyword_2_0; }
		
		//subProcs+=CallProcess
		public Assignment getSubProcsAssignment_2_1() { return cSubProcsAssignment_2_1; }
		
		//CallProcess
		public RuleCall getSubProcsCallProcessParserRuleCall_2_1_0() { return cSubProcsCallProcessParserRuleCall_2_1_0; }
	}
	public class NonDeterminismProcessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.NonDeterminismProcess");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPredOutputProcessOrInputProcessesParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIfProcessesParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNProcessParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//NonDeterminismProcess Process:
		//	PredOutputProcessOrInputProcesses | IfProcesses | NProcess;
		@Override public ParserRule getRule() { return rule; }
		
		////(PreconditionProcess ({NonDeterminismProcess.procLeft=current} "+" procRight=NonDeterminismProcess)?) |
		//PredOutputProcessOrInputProcesses | IfProcesses | NProcess
		public Alternatives getAlternatives() { return cAlternatives; }
		
		////(PreconditionProcess ({NonDeterminismProcess.procLeft=current} "+" procRight=NonDeterminismProcess)?) |
		//PredOutputProcessOrInputProcesses
		public RuleCall getPredOutputProcessOrInputProcessesParserRuleCall_0() { return cPredOutputProcessOrInputProcessesParserRuleCall_0; }
		
		//IfProcesses
		public RuleCall getIfProcessesParserRuleCall_1() { return cIfProcessesParserRuleCall_1; }
		
		//NProcess
		public RuleCall getNProcessParserRuleCall_2() { return cNProcessParserRuleCall_2; }
	}
	public class PreconditionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.Preconditions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPreconditionsAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cPrecondAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cPrecondAlternatives_1_0 = (Alternatives)cPrecondAssignment_1.eContents().get(0);
		private final RuleCall cPrecondUpdateParserRuleCall_1_0_0 = (RuleCall)cPrecondAlternatives_1_0.eContents().get(0);
		private final RuleCall cPrecondAwarenessParserRuleCall_1_0_1 = (RuleCall)cPrecondAlternatives_1_0.eContents().get(1);
		
		//Preconditions:
		//	{Preconditions} precond+=(Update | Awareness)*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Preconditions} precond+=(Update | Awareness)*
		public Group getGroup() { return cGroup; }
		
		//{Preconditions}
		public Action getPreconditionsAction_0() { return cPreconditionsAction_0; }
		
		//precond+=(Update | Awareness)*
		public Assignment getPrecondAssignment_1() { return cPrecondAssignment_1; }
		
		//(Update | Awareness)
		public Alternatives getPrecondAlternatives_1_0() { return cPrecondAlternatives_1_0; }
		
		//Update
		public RuleCall getPrecondUpdateParserRuleCall_1_0_0() { return cPrecondUpdateParserRuleCall_1_0_0; }
		
		//Awareness
		public RuleCall getPrecondAwarenessParserRuleCall_1_0_1() { return cPrecondAwarenessParserRuleCall_1_0_1; }
	}
	public class PredOutputProcessOrInputProcessesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.PredOutputProcessOrInputProcesses");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPreconditionsParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cOutputProcessPrecondAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final RuleCall cOutputProcessPartParserRuleCall_1_0_1 = (RuleCall)cGroup_1_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cInputProcessesPrecondsAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final RuleCall cInputProcessesPartParserRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		
		//PredOutputProcessOrInputProcesses Process:
		//	Preconditions ({OutputProcess.precond=current} OutputProcessPart | {InputProcesses.preconds+=current}
		//	InputProcessesPart);
		@Override public ParserRule getRule() { return rule; }
		
		//Preconditions ({OutputProcess.precond=current} OutputProcessPart | {InputProcesses.preconds+=current}
		//InputProcessesPart)
		public Group getGroup() { return cGroup; }
		
		//Preconditions
		public RuleCall getPreconditionsParserRuleCall_0() { return cPreconditionsParserRuleCall_0; }
		
		//{OutputProcess.precond=current} OutputProcessPart | {InputProcesses.preconds+=current} InputProcessesPart
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//{OutputProcess.precond=current} OutputProcessPart
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{OutputProcess.precond=current}
		public Action getOutputProcessPrecondAction_1_0_0() { return cOutputProcessPrecondAction_1_0_0; }
		
		//OutputProcessPart
		public RuleCall getOutputProcessPartParserRuleCall_1_0_1() { return cOutputProcessPartParserRuleCall_1_0_1; }
		
		//{InputProcesses.preconds+=current} InputProcessesPart
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//{InputProcesses.preconds+=current}
		public Action getInputProcessesPrecondsAction_1_1_0() { return cInputProcessesPrecondsAction_1_1_0; }
		
		//InputProcessesPart
		public RuleCall getInputProcessesPartParserRuleCall_1_1_1() { return cInputProcessesPartParserRuleCall_1_1_1; }
	}
	public class PredOutputProcessOrInputProcessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.PredOutputProcessOrInputProcess");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPreconditionsParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cOutputProcessPrecondAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final RuleCall cOutputProcessPartParserRuleCall_1_0_1 = (RuleCall)cGroup_1_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cInputProcessesPrecondsAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Assignment cInputsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cInputsInputProcessParserRuleCall_1_1_1_0 = (RuleCall)cInputsAssignment_1_1_1.eContents().get(0);
		
		//PredOutputProcessOrInputProcess Process:
		//	Preconditions ({OutputProcess.precond=current} OutputProcessPart | {InputProcesses.preconds+=current}
		//	inputs+=InputProcess);
		@Override public ParserRule getRule() { return rule; }
		
		//Preconditions ({OutputProcess.precond=current} OutputProcessPart | {InputProcesses.preconds+=current}
		//inputs+=InputProcess)
		public Group getGroup() { return cGroup; }
		
		//Preconditions
		public RuleCall getPreconditionsParserRuleCall_0() { return cPreconditionsParserRuleCall_0; }
		
		//{OutputProcess.precond=current} OutputProcessPart | {InputProcesses.preconds+=current} inputs+=InputProcess
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//{OutputProcess.precond=current} OutputProcessPart
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{OutputProcess.precond=current}
		public Action getOutputProcessPrecondAction_1_0_0() { return cOutputProcessPrecondAction_1_0_0; }
		
		//OutputProcessPart
		public RuleCall getOutputProcessPartParserRuleCall_1_0_1() { return cOutputProcessPartParserRuleCall_1_0_1; }
		
		//{InputProcesses.preconds+=current} inputs+=InputProcess
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//{InputProcesses.preconds+=current}
		public Action getInputProcessesPrecondsAction_1_1_0() { return cInputProcessesPrecondsAction_1_1_0; }
		
		//inputs+=InputProcess
		public Assignment getInputsAssignment_1_1_1() { return cInputsAssignment_1_1_1; }
		
		//InputProcess
		public RuleCall getInputsInputProcessParserRuleCall_1_1_1_0() { return cInputsInputProcessParserRuleCall_1_1_1_0; }
	}
	public class InputProcessesPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.InputProcessesPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInputsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cInputsInputProcessParserRuleCall_0_0 = (RuleCall)cInputsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cPlusSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cPrecondsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPrecondsPreconditionsParserRuleCall_1_1_0 = (RuleCall)cPrecondsAssignment_1_1.eContents().get(0);
		private final Assignment cInputsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cInputsInputProcessParserRuleCall_1_2_0 = (RuleCall)cInputsAssignment_1_2.eContents().get(0);
		
		//fragment InputProcessesPart:
		//	inputs+=InputProcess ('+' preconds+=Preconditions inputs+=InputProcess)*;
		@Override public ParserRule getRule() { return rule; }
		
		//inputs+=InputProcess ('+' preconds+=Preconditions inputs+=InputProcess)*
		public Group getGroup() { return cGroup; }
		
		//inputs+=InputProcess
		public Assignment getInputsAssignment_0() { return cInputsAssignment_0; }
		
		//InputProcess
		public RuleCall getInputsInputProcessParserRuleCall_0_0() { return cInputsInputProcessParserRuleCall_0_0; }
		
		//('+' preconds+=Preconditions inputs+=InputProcess)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_0() { return cPlusSignKeyword_1_0; }
		
		//preconds+=Preconditions
		public Assignment getPrecondsAssignment_1_1() { return cPrecondsAssignment_1_1; }
		
		//Preconditions
		public RuleCall getPrecondsPreconditionsParserRuleCall_1_1_0() { return cPrecondsPreconditionsParserRuleCall_1_1_0; }
		
		//inputs+=InputProcess
		public Assignment getInputsAssignment_1_2() { return cInputsAssignment_1_2; }
		
		//InputProcess
		public RuleCall getInputsInputProcessParserRuleCall_1_2_0() { return cInputsInputProcessParserRuleCall_1_2_0; }
	}
	public class InputProcessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.InputProcess");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInputProcessAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRec_predAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRec_predPredicateParserRuleCall_2_0 = (RuleCall)cRec_predAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cMsgInPartsAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cMsgInPartsAttributeParserRuleCall_5_0_0 = (RuleCall)cMsgInPartsAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cMsgInPartsAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cMsgInPartsAttributeParserRuleCall_5_1_1_0 = (RuleCall)cMsgInPartsAssignment_5_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cOutputAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cOutputSTRINGTerminalRuleCall_7_0 = (RuleCall)cOutputAssignment_7.eContents().get(0);
		private final Keyword cFullStopKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cNextAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cNextNZCProcessParserRuleCall_9_0 = (RuleCall)cNextAssignment_9.eContents().get(0);
		
		//InputProcess Process:
		//	{InputProcess} "{" rec_pred=Predicate "}" "(" (msgInParts+=Attribute ("," msgInParts+=Attribute)*)? ")" output=STRING?
		//	"." next=NZCProcess;
		@Override public ParserRule getRule() { return rule; }
		
		//{InputProcess} "{" rec_pred=Predicate "}" "(" (msgInParts+=Attribute ("," msgInParts+=Attribute)*)? ")" output=STRING?
		//"." next=NZCProcess
		public Group getGroup() { return cGroup; }
		
		//{InputProcess}
		public Action getInputProcessAction_0() { return cInputProcessAction_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//rec_pred=Predicate
		public Assignment getRec_predAssignment_2() { return cRec_predAssignment_2; }
		
		//Predicate
		public RuleCall getRec_predPredicateParserRuleCall_2_0() { return cRec_predPredicateParserRuleCall_2_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }
		
		//(msgInParts+=Attribute ("," msgInParts+=Attribute)*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//msgInParts+=Attribute
		public Assignment getMsgInPartsAssignment_5_0() { return cMsgInPartsAssignment_5_0; }
		
		//Attribute
		public RuleCall getMsgInPartsAttributeParserRuleCall_5_0_0() { return cMsgInPartsAttributeParserRuleCall_5_0_0; }
		
		//("," msgInParts+=Attribute)*
		public Group getGroup_5_1() { return cGroup_5_1; }
		
		//","
		public Keyword getCommaKeyword_5_1_0() { return cCommaKeyword_5_1_0; }
		
		//msgInParts+=Attribute
		public Assignment getMsgInPartsAssignment_5_1_1() { return cMsgInPartsAssignment_5_1_1; }
		
		//Attribute
		public RuleCall getMsgInPartsAttributeParserRuleCall_5_1_1_0() { return cMsgInPartsAttributeParserRuleCall_5_1_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
		
		//output=STRING?
		public Assignment getOutputAssignment_7() { return cOutputAssignment_7; }
		
		//STRING
		public RuleCall getOutputSTRINGTerminalRuleCall_7_0() { return cOutputSTRINGTerminalRuleCall_7_0; }
		
		//"."
		public Keyword getFullStopKeyword_8() { return cFullStopKeyword_8; }
		
		//next=NZCProcess
		public Assignment getNextAssignment_9() { return cNextAssignment_9; }
		
		//NZCProcess
		public RuleCall getNextNZCProcessParserRuleCall_9_0() { return cNextNZCProcessParserRuleCall_9_0; }
	}
	public class OutputProcessPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.OutputProcessPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cMsgOutPartsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cMsgOutPartsValueParserRuleCall_1_0_0 = (RuleCall)cMsgOutPartsAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cMsgOutPartsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cMsgOutPartsValueParserRuleCall_1_1_1_0 = (RuleCall)cMsgOutPartsAssignment_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cCommercialAtKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSend_predAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSend_predPredicateParserRuleCall_4_0 = (RuleCall)cSend_predAssignment_4.eContents().get(0);
		private final Assignment cOutputAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cOutputSTRINGTerminalRuleCall_5_0 = (RuleCall)cOutputAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cSleepKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cMsecAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cMsecINTTerminalRuleCall_6_2_0 = (RuleCall)cMsecAssignment_6_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		private final Keyword cFullStopKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cNextAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cNextNZCProcessParserRuleCall_8_0 = (RuleCall)cNextAssignment_8.eContents().get(0);
		
		//fragment OutputProcessPart:
		//	"(" (msgOutParts+=Value ("," msgOutParts+=Value)*)? ")" "@" send_pred=Predicate output=STRING? ("sleep" "(" msec=INT
		//	")")? "." next=NZCProcess;
		@Override public ParserRule getRule() { return rule; }
		
		//"(" (msgOutParts+=Value ("," msgOutParts+=Value)*)? ")" "@" send_pred=Predicate output=STRING? ("sleep" "(" msec=INT
		//")")? "." next=NZCProcess
		public Group getGroup() { return cGroup; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//(msgOutParts+=Value ("," msgOutParts+=Value)*)?
		public Group getGroup_1() { return cGroup_1; }
		
		//msgOutParts+=Value
		public Assignment getMsgOutPartsAssignment_1_0() { return cMsgOutPartsAssignment_1_0; }
		
		//Value
		public RuleCall getMsgOutPartsValueParserRuleCall_1_0_0() { return cMsgOutPartsValueParserRuleCall_1_0_0; }
		
		//("," msgOutParts+=Value)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//","
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }
		
		//msgOutParts+=Value
		public Assignment getMsgOutPartsAssignment_1_1_1() { return cMsgOutPartsAssignment_1_1_1; }
		
		//Value
		public RuleCall getMsgOutPartsValueParserRuleCall_1_1_1_0() { return cMsgOutPartsValueParserRuleCall_1_1_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
		
		//"@"
		public Keyword getCommercialAtKeyword_3() { return cCommercialAtKeyword_3; }
		
		//send_pred=Predicate
		public Assignment getSend_predAssignment_4() { return cSend_predAssignment_4; }
		
		//Predicate
		public RuleCall getSend_predPredicateParserRuleCall_4_0() { return cSend_predPredicateParserRuleCall_4_0; }
		
		//output=STRING?
		public Assignment getOutputAssignment_5() { return cOutputAssignment_5; }
		
		//STRING
		public RuleCall getOutputSTRINGTerminalRuleCall_5_0() { return cOutputSTRINGTerminalRuleCall_5_0; }
		
		//("sleep" "(" msec=INT ")")?
		public Group getGroup_6() { return cGroup_6; }
		
		//"sleep"
		public Keyword getSleepKeyword_6_0() { return cSleepKeyword_6_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_6_1() { return cLeftParenthesisKeyword_6_1; }
		
		//msec=INT
		public Assignment getMsecAssignment_6_2() { return cMsecAssignment_6_2; }
		
		//INT
		public RuleCall getMsecINTTerminalRuleCall_6_2_0() { return cMsecINTTerminalRuleCall_6_2_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_6_3() { return cRightParenthesisKeyword_6_3; }
		
		//"."
		public Keyword getFullStopKeyword_7() { return cFullStopKeyword_7; }
		
		//next=NZCProcess
		public Assignment getNextAssignment_8() { return cNextAssignment_8; }
		
		//NZCProcess
		public RuleCall getNextNZCProcessParserRuleCall_8_0() { return cNextNZCProcessParserRuleCall_8_0; }
	}
	public class IfProcessesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.IfProcesses");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIfProcessesAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cBranchesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBranchesIfBranchProcessParserRuleCall_1_0 = (RuleCall)cBranchesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cElseKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cBranchesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cBranchesIfBranchProcessParserRuleCall_2_1_0 = (RuleCall)cBranchesAssignment_2_1.eContents().get(0);
		
		//IfProcesses Process:
		//	{IfProcesses} branches+=IfBranchProcess ("else" branches+=IfBranchProcess)*;
		@Override public ParserRule getRule() { return rule; }
		
		//{IfProcesses} branches+=IfBranchProcess ("else" branches+=IfBranchProcess)*
		public Group getGroup() { return cGroup; }
		
		//{IfProcesses}
		public Action getIfProcessesAction_0() { return cIfProcessesAction_0; }
		
		//branches+=IfBranchProcess
		public Assignment getBranchesAssignment_1() { return cBranchesAssignment_1; }
		
		//IfBranchProcess
		public RuleCall getBranchesIfBranchProcessParserRuleCall_1_0() { return cBranchesIfBranchProcessParserRuleCall_1_0; }
		
		//("else" branches+=IfBranchProcess)*
		public Group getGroup_2() { return cGroup_2; }
		
		//"else"
		public Keyword getElseKeyword_2_0() { return cElseKeyword_2_0; }
		
		//branches+=IfBranchProcess
		public Assignment getBranchesAssignment_2_1() { return cBranchesAssignment_2_1; }
		
		//IfBranchProcess
		public RuleCall getBranchesIfBranchProcessParserRuleCall_2_1_0() { return cBranchesIfBranchProcessParserRuleCall_2_1_0; }
	}
	public class IfBranchProcessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.IfBranchProcess");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIfBranchProcessAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCondAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCondPreconditionsParserRuleCall_2_0 = (RuleCall)cCondAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cThenAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cThenPredOutputProcessOrInputProcessParserRuleCall_4_0 = (RuleCall)cThenAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//IfBranchProcess Process:
		//	{IfBranchProcess} "if" cond=Preconditions '{' then=PredOutputProcessOrInputProcess '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{IfBranchProcess} "if" cond=Preconditions '{' then=PredOutputProcessOrInputProcess '}'
		public Group getGroup() { return cGroup; }
		
		//{IfBranchProcess}
		public Action getIfBranchProcessAction_0() { return cIfBranchProcessAction_0; }
		
		//"if"
		public Keyword getIfKeyword_1() { return cIfKeyword_1; }
		
		//cond=Preconditions
		public Assignment getCondAssignment_2() { return cCondAssignment_2; }
		
		//Preconditions
		public RuleCall getCondPreconditionsParserRuleCall_2_0() { return cCondPreconditionsParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//then=PredOutputProcessOrInputProcess
		public Assignment getThenAssignment_4() { return cThenAssignment_4; }
		
		//PredOutputProcessOrInputProcess
		public RuleCall getThenPredOutputProcessOrInputProcessParserRuleCall_4_0() { return cThenPredOutputProcessOrInputProcessParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class UpdateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.Update");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVarsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarsAttributeParserRuleCall_1_0 = (RuleCall)cVarsAssignment_1.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValsValueParserRuleCall_3_0 = (RuleCall)cValsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cVarsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cVarsAttributeParserRuleCall_4_1_0 = (RuleCall)cVarsAssignment_4_1.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cValsAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cValsValueParserRuleCall_4_3_0 = (RuleCall)cValsAssignment_4_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Update:
		//	"[" vars+=Attribute ":=" vals+=Value ("," vars+=Attribute ":=" vals+=Value)* "]";
		@Override public ParserRule getRule() { return rule; }
		
		//"[" vars+=Attribute ":=" vals+=Value ("," vars+=Attribute ":=" vals+=Value)* "]"
		public Group getGroup() { return cGroup; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//vars+=Attribute
		public Assignment getVarsAssignment_1() { return cVarsAssignment_1; }
		
		//Attribute
		public RuleCall getVarsAttributeParserRuleCall_1_0() { return cVarsAttributeParserRuleCall_1_0; }
		
		//":="
		public Keyword getColonEqualsSignKeyword_2() { return cColonEqualsSignKeyword_2; }
		
		//vals+=Value
		public Assignment getValsAssignment_3() { return cValsAssignment_3; }
		
		//Value
		public RuleCall getValsValueParserRuleCall_3_0() { return cValsValueParserRuleCall_3_0; }
		
		//("," vars+=Attribute ":=" vals+=Value)*
		public Group getGroup_4() { return cGroup_4; }
		
		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//vars+=Attribute
		public Assignment getVarsAssignment_4_1() { return cVarsAssignment_4_1; }
		
		//Attribute
		public RuleCall getVarsAttributeParserRuleCall_4_1_0() { return cVarsAttributeParserRuleCall_4_1_0; }
		
		//":="
		public Keyword getColonEqualsSignKeyword_4_2() { return cColonEqualsSignKeyword_4_2; }
		
		//vals+=Value
		public Assignment getValsAssignment_4_3() { return cValsAssignment_4_3; }
		
		//Value
		public RuleCall getValsValueParserRuleCall_4_3_0() { return cValsValueParserRuleCall_4_3_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }
	}
	public class AwarenessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.Awareness");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPredAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPredPredicateParserRuleCall_1_0 = (RuleCall)cPredAssignment_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Awareness:
		//	"<" pred=Predicate ">";
		@Override public ParserRule getRule() { return rule; }
		
		//"<" pred=Predicate ">"
		public Group getGroup() { return cGroup; }
		
		//"<"
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }
		
		//pred=Predicate
		public Assignment getPredAssignment_1() { return cPredAssignment_1; }
		
		//Predicate
		public RuleCall getPredPredicateParserRuleCall_1_0() { return cPredPredicateParserRuleCall_1_0; }
		
		//">"
		public Keyword getGreaterThanSignKeyword_2() { return cGreaterThanSignKeyword_2; }
	}
	public class NZCProcessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.NZCProcess");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cProcParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final RuleCall cZeroProcessParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCallProcessParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//NZCProcess Process:
		//	"(" Proc ")" | ZeroProcess | CallProcess;
		@Override public ParserRule getRule() { return rule; }
		
		//"(" Proc ")" | ZeroProcess | CallProcess
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"(" Proc ")"
		public Group getGroup_0() { return cGroup_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//Proc
		public RuleCall getProcParserRuleCall_0_1() { return cProcParserRuleCall_0_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }
		
		//ZeroProcess
		public RuleCall getZeroProcessParserRuleCall_1() { return cZeroProcessParserRuleCall_1; }
		
		//CallProcess
		public RuleCall getCallProcessParserRuleCall_2() { return cCallProcessParserRuleCall_2; }
	}
	public class NProcessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.NProcess");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cProcParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final RuleCall cZeroProcessParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//NProcess Process:
		//	"(" Proc ")" | ZeroProcess //| CallProcess
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"(" Proc ")" | ZeroProcess
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"(" Proc ")"
		public Group getGroup_0() { return cGroup_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//Proc
		public RuleCall getProcParserRuleCall_0_1() { return cProcParserRuleCall_0_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }
		
		//ZeroProcess
		public RuleCall getZeroProcessParserRuleCall_1() { return cZeroProcessParserRuleCall_1; }
	}
	public class CallProcessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.CallProcess");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCallProcessAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cProcnameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cProcnameProcessDefinitionCrossReference_1_0 = (CrossReference)cProcnameAssignment_1.eContents().get(0);
		private final RuleCall cProcnameProcessDefinitionIDTerminalRuleCall_1_0_1 = (RuleCall)cProcnameProcessDefinitionCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParamsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParamsValueParserRuleCall_2_1_0 = (RuleCall)cParamsAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cParamsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cParamsValueParserRuleCall_2_2_1_0 = (RuleCall)cParamsAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//CallProcess Process:
		//	{CallProcess} procname=[ProcessDefinition] ("[" params+=Value ("," params+=Value)* "]")?;
		@Override public ParserRule getRule() { return rule; }
		
		//{CallProcess} procname=[ProcessDefinition] ("[" params+=Value ("," params+=Value)* "]")?
		public Group getGroup() { return cGroup; }
		
		//{CallProcess}
		public Action getCallProcessAction_0() { return cCallProcessAction_0; }
		
		//procname=[ProcessDefinition]
		public Assignment getProcnameAssignment_1() { return cProcnameAssignment_1; }
		
		//[ProcessDefinition]
		public CrossReference getProcnameProcessDefinitionCrossReference_1_0() { return cProcnameProcessDefinitionCrossReference_1_0; }
		
		//ID
		public RuleCall getProcnameProcessDefinitionIDTerminalRuleCall_1_0_1() { return cProcnameProcessDefinitionIDTerminalRuleCall_1_0_1; }
		
		//("[" params+=Value ("," params+=Value)* "]")?
		public Group getGroup_2() { return cGroup_2; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }
		
		//params+=Value
		public Assignment getParamsAssignment_2_1() { return cParamsAssignment_2_1; }
		
		//Value
		public RuleCall getParamsValueParserRuleCall_2_1_0() { return cParamsValueParserRuleCall_2_1_0; }
		
		//("," params+=Value)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//params+=Value
		public Assignment getParamsAssignment_2_2_1() { return cParamsAssignment_2_2_1; }
		
		//Value
		public RuleCall getParamsValueParserRuleCall_2_2_1_0() { return cParamsValueParserRuleCall_2_2_1_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_2_3() { return cRightSquareBracketKeyword_2_3; }
	}
	public class ZeroProcessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.ZeroProcess");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cZeroProcessAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDigitZeroKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ZeroProcess Process:
		//	{ZeroProcess} "0";
		@Override public ParserRule getRule() { return rule; }
		
		//{ZeroProcess} "0"
		public Group getGroup() { return cGroup; }
		
		//{ZeroProcess}
		public Action getZeroProcessAction_0() { return cZeroProcessAction_0; }
		
		//"0"
		public Keyword getDigitZeroKeyword_1() { return cDigitZeroKeyword_1; }
	}
	public class ProcessDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.ProcessDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProcKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParamsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParamsIDTerminalRuleCall_2_1_0 = (RuleCall)cParamsAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cParamsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cParamsIDTerminalRuleCall_2_2_1_0 = (RuleCall)cParamsAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cProcAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cProcProcParserRuleCall_4_0 = (RuleCall)cProcAssignment_4.eContents().get(0);
		
		//ProcessDefinition:
		//	'proc' name=ID ("[" params+=ID ("," params+=ID)* "]")? '=' proc=Proc;
		@Override public ParserRule getRule() { return rule; }
		
		//'proc' name=ID ("[" params+=ID ("," params+=ID)* "]")? '=' proc=Proc
		public Group getGroup() { return cGroup; }
		
		//'proc'
		public Keyword getProcKeyword_0() { return cProcKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//("[" params+=ID ("," params+=ID)* "]")?
		public Group getGroup_2() { return cGroup_2; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }
		
		//params+=ID
		public Assignment getParamsAssignment_2_1() { return cParamsAssignment_2_1; }
		
		//ID
		public RuleCall getParamsIDTerminalRuleCall_2_1_0() { return cParamsIDTerminalRuleCall_2_1_0; }
		
		//("," params+=ID)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//params+=ID
		public Assignment getParamsAssignment_2_2_1() { return cParamsAssignment_2_2_1; }
		
		//ID
		public RuleCall getParamsIDTerminalRuleCall_2_2_1_0() { return cParamsIDTerminalRuleCall_2_2_1_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_2_3() { return cRightSquareBracketKeyword_2_3; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//proc=Proc
		public Assignment getProcAssignment_4() { return cProcAssignment_4; }
		
		//Proc
		public RuleCall getProcProcParserRuleCall_4_0() { return cProcProcParserRuleCall_4_0; }
	}
	public class EnvironmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.Environment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEnvironmentAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cAttrsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cAttrsIDTerminalRuleCall_2_0_0 = (RuleCall)cAttrsAssignment_2_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cValsAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cValsSTRINGTerminalRuleCall_2_2_0 = (RuleCall)cValsAssignment_2_2.eContents().get(0);
		private final Group cGroup_2_3 = (Group)cGroup_2.eContents().get(3);
		private final Keyword cCommaKeyword_2_3_0 = (Keyword)cGroup_2_3.eContents().get(0);
		private final Assignment cAttrsAssignment_2_3_1 = (Assignment)cGroup_2_3.eContents().get(1);
		private final RuleCall cAttrsIDTerminalRuleCall_2_3_1_0 = (RuleCall)cAttrsAssignment_2_3_1.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_2_3_2 = (Keyword)cGroup_2_3.eContents().get(2);
		private final Assignment cValsAssignment_2_3_3 = (Assignment)cGroup_2_3.eContents().get(3);
		private final RuleCall cValsSTRINGTerminalRuleCall_2_3_3_0 = (RuleCall)cValsAssignment_2_3_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//// Component
		//Environment:
		//	{Environment} "{" (attrs+=ID ':=' vals+=STRING ("," attrs+=ID ':=' vals+=STRING)*)? "}";
		@Override public ParserRule getRule() { return rule; }
		
		//{Environment} "{" (attrs+=ID ':=' vals+=STRING ("," attrs+=ID ':=' vals+=STRING)*)? "}"
		public Group getGroup() { return cGroup; }
		
		//{Environment}
		public Action getEnvironmentAction_0() { return cEnvironmentAction_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(attrs+=ID ':=' vals+=STRING ("," attrs+=ID ':=' vals+=STRING)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//attrs+=ID
		public Assignment getAttrsAssignment_2_0() { return cAttrsAssignment_2_0; }
		
		//ID
		public RuleCall getAttrsIDTerminalRuleCall_2_0_0() { return cAttrsIDTerminalRuleCall_2_0_0; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_2_1() { return cColonEqualsSignKeyword_2_1; }
		
		//vals+=STRING
		public Assignment getValsAssignment_2_2() { return cValsAssignment_2_2; }
		
		//STRING
		public RuleCall getValsSTRINGTerminalRuleCall_2_2_0() { return cValsSTRINGTerminalRuleCall_2_2_0; }
		
		//("," attrs+=ID ':=' vals+=STRING)*
		public Group getGroup_2_3() { return cGroup_2_3; }
		
		//","
		public Keyword getCommaKeyword_2_3_0() { return cCommaKeyword_2_3_0; }
		
		//attrs+=ID
		public Assignment getAttrsAssignment_2_3_1() { return cAttrsAssignment_2_3_1; }
		
		//ID
		public RuleCall getAttrsIDTerminalRuleCall_2_3_1_0() { return cAttrsIDTerminalRuleCall_2_3_1_0; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_2_3_2() { return cColonEqualsSignKeyword_2_3_2; }
		
		//vals+=STRING
		public Assignment getValsAssignment_2_3_3() { return cValsAssignment_2_3_3; }
		
		//STRING
		public RuleCall getValsSTRINGTerminalRuleCall_2_3_3_0() { return cValsSTRINGTerminalRuleCall_2_3_3_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class ComponentDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.ComponentDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cComponentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEnvAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEnvEnvironmentParserRuleCall_1_0 = (RuleCall)cEnvAssignment_1.eContents().get(0);
		private final Assignment cProcAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cProcProcessDefinitionCrossReference_2_0 = (CrossReference)cProcAssignment_2.eContents().get(0);
		private final RuleCall cProcProcessDefinitionIDTerminalRuleCall_2_0_1 = (RuleCall)cProcProcessDefinitionCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cParamsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cParamsSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cParamsAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cParamsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cParamsSTRINGTerminalRuleCall_3_2_1_0 = (RuleCall)cParamsAssignment_3_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Keyword cAtKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cAddressAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cAddressSTRINGTerminalRuleCall_5_0 = (RuleCall)cAddressAssignment_5.eContents().get(0);
		
		//ComponentDefinition:
		//	"component" env=Environment proc=[ProcessDefinition] ("[" params+=STRING ("," params+=STRING)* "]")? 'at'
		//	address=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//"component" env=Environment proc=[ProcessDefinition] ("[" params+=STRING ("," params+=STRING)* "]")? 'at' address=STRING
		public Group getGroup() { return cGroup; }
		
		//"component"
		public Keyword getComponentKeyword_0() { return cComponentKeyword_0; }
		
		//env=Environment
		public Assignment getEnvAssignment_1() { return cEnvAssignment_1; }
		
		//Environment
		public RuleCall getEnvEnvironmentParserRuleCall_1_0() { return cEnvEnvironmentParserRuleCall_1_0; }
		
		//proc=[ProcessDefinition]
		public Assignment getProcAssignment_2() { return cProcAssignment_2; }
		
		//[ProcessDefinition]
		public CrossReference getProcProcessDefinitionCrossReference_2_0() { return cProcProcessDefinitionCrossReference_2_0; }
		
		//ID
		public RuleCall getProcProcessDefinitionIDTerminalRuleCall_2_0_1() { return cProcProcessDefinitionIDTerminalRuleCall_2_0_1; }
		
		//("[" params+=STRING ("," params+=STRING)* "]")?
		public Group getGroup_3() { return cGroup_3; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_3_0() { return cLeftSquareBracketKeyword_3_0; }
		
		//params+=STRING
		public Assignment getParamsAssignment_3_1() { return cParamsAssignment_3_1; }
		
		//STRING
		public RuleCall getParamsSTRINGTerminalRuleCall_3_1_0() { return cParamsSTRINGTerminalRuleCall_3_1_0; }
		
		//("," params+=STRING)*
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//","
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }
		
		//params+=STRING
		public Assignment getParamsAssignment_3_2_1() { return cParamsAssignment_3_2_1; }
		
		//STRING
		public RuleCall getParamsSTRINGTerminalRuleCall_3_2_1_0() { return cParamsSTRINGTerminalRuleCall_3_2_1_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_3_3() { return cRightSquareBracketKeyword_3_3; }
		
		//'at'
		public Keyword getAtKeyword_4() { return cAtKeyword_4; }
		
		//address=STRING
		public Assignment getAddressAssignment_5() { return cAddressAssignment_5; }
		
		//STRING
		public RuleCall getAddressSTRINGTerminalRuleCall_5_0() { return cAddressSTRINGTerminalRuleCall_5_0; }
	}
	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cCompAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cCompThisKeyword_0_0_0 = (Keyword)cCompAssignment_0_0.eContents().get(0);
		private final Keyword cFullStopKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cIdentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdentIDTerminalRuleCall_1_0 = (RuleCall)cIdentAssignment_1.eContents().get(0);
		
		//// Attributes
		//Attribute:
		//	(comp?="this" ".")? ident=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//(comp?="this" ".")? ident=ID
		public Group getGroup() { return cGroup; }
		
		//(comp?="this" ".")?
		public Group getGroup_0() { return cGroup_0; }
		
		//comp?="this"
		public Assignment getCompAssignment_0_0() { return cCompAssignment_0_0; }
		
		//"this"
		public Keyword getCompThisKeyword_0_0_0() { return cCompThisKeyword_0_0_0; }
		
		//"."
		public Keyword getFullStopKeyword_0_1() { return cFullStopKeyword_0_1; }
		
		//ident=ID
		public Assignment getIdentAssignment_1() { return cIdentAssignment_1; }
		
		//ID
		public RuleCall getIdentIDTerminalRuleCall_1_0() { return cIdentIDTerminalRuleCall_1_0; }
	}
	public class RecAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.RecAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReceiverKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIdentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIdentIDTerminalRuleCall_2_0 = (RuleCall)cIdentAssignment_2.eContents().get(0);
		
		//RecAttribute:
		//	"receiver" "." ident=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//"receiver" "." ident=ID
		public Group getGroup() { return cGroup; }
		
		//"receiver"
		public Keyword getReceiverKeyword_0() { return cReceiverKeyword_0; }
		
		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//ident=ID
		public Assignment getIdentAssignment_2() { return cIdentAssignment_2; }
		
		//ID
		public RuleCall getIdentIDTerminalRuleCall_2_0() { return cIdentIDTerminalRuleCall_2_0; }
	}
	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAttributeValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cImmediateValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cGoStringFunctionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//// Value
		//Value:
		//	AttributeValue | ImmediateValue | GoStringFunction;
		@Override public ParserRule getRule() { return rule; }
		
		////((hd?="head"|tl?="tail") "("list = Attribute")") | 
		////"join""("hd_el = Attribute "," tl_el = Attribute ")" | 
		////(empty_list ?= "[]") |
		//AttributeValue | ImmediateValue | GoStringFunction
		public Alternatives getAlternatives() { return cAlternatives; }
		
		////((hd?="head"|tl?="tail") "("list = Attribute")") | 
		////"join""("hd_el = Attribute "," tl_el = Attribute ")" | 
		////(empty_list ?= "[]") |
		//AttributeValue
		public RuleCall getAttributeValueParserRuleCall_0() { return cAttributeValueParserRuleCall_0; }
		
		//ImmediateValue
		public RuleCall getImmediateValueParserRuleCall_1() { return cImmediateValueParserRuleCall_1; }
		
		//GoStringFunction
		public RuleCall getGoStringFunctionParserRuleCall_2() { return cGoStringFunctionParserRuleCall_2; }
	}
	public class AttributeValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.AttributeValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAttributeValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAttrAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAttrAttributeParserRuleCall_1_0 = (RuleCall)cAttrAssignment_1.eContents().get(0);
		
		//AttributeValue Value:
		//	{AttributeValue} attr=Attribute;
		@Override public ParserRule getRule() { return rule; }
		
		//{AttributeValue} attr=Attribute
		public Group getGroup() { return cGroup; }
		
		//{AttributeValue}
		public Action getAttributeValueAction_0() { return cAttributeValueAction_0; }
		
		//attr=Attribute
		public Assignment getAttrAssignment_1() { return cAttrAssignment_1; }
		
		//Attribute
		public RuleCall getAttrAttributeParserRuleCall_1_0() { return cAttrAttributeParserRuleCall_1_0; }
	}
	public class ImmediateValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.ImmediateValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cImmediateValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cImmAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImmSTRINGTerminalRuleCall_1_0 = (RuleCall)cImmAssignment_1.eContents().get(0);
		
		//ImmediateValue Value:
		//	{ImmediateValue} imm=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//{ImmediateValue} imm=STRING
		public Group getGroup() { return cGroup; }
		
		//{ImmediateValue}
		public Action getImmediateValueAction_0() { return cImmediateValueAction_0; }
		
		//imm=STRING
		public Assignment getImmAssignment_1() { return cImmAssignment_1; }
		
		//STRING
		public RuleCall getImmSTRINGTerminalRuleCall_1_0() { return cImmSTRINGTerminalRuleCall_1_0; }
	}
	public class GoStringFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.GoStringFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGoStringFunctionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cFuncnameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cFuncnameFuncDefinitionCrossReference_1_0 = (CrossReference)cFuncnameAssignment_1.eContents().get(0);
		private final RuleCall cFuncnameFuncDefinitionIDTerminalRuleCall_1_0_1 = (RuleCall)cFuncnameFuncDefinitionCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParamsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParamsValueParserRuleCall_3_0_0 = (RuleCall)cParamsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParamsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParamsValueParserRuleCall_3_1_1_0 = (RuleCall)cParamsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//GoStringFunction Value:
		//	{GoStringFunction} funcname=[FuncDefinition] "(" (params+=Value ("," params+=Value)*)? ")";
		@Override public ParserRule getRule() { return rule; }
		
		//{GoStringFunction} funcname=[FuncDefinition] "(" (params+=Value ("," params+=Value)*)? ")"
		public Group getGroup() { return cGroup; }
		
		//{GoStringFunction}
		public Action getGoStringFunctionAction_0() { return cGoStringFunctionAction_0; }
		
		//funcname=[FuncDefinition]
		public Assignment getFuncnameAssignment_1() { return cFuncnameAssignment_1; }
		
		//[FuncDefinition]
		public CrossReference getFuncnameFuncDefinitionCrossReference_1_0() { return cFuncnameFuncDefinitionCrossReference_1_0; }
		
		//ID
		public RuleCall getFuncnameFuncDefinitionIDTerminalRuleCall_1_0_1() { return cFuncnameFuncDefinitionIDTerminalRuleCall_1_0_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(params+=Value ("," params+=Value)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//params+=Value
		public Assignment getParamsAssignment_3_0() { return cParamsAssignment_3_0; }
		
		//Value
		public RuleCall getParamsValueParserRuleCall_3_0_0() { return cParamsValueParserRuleCall_3_0_0; }
		
		//("," params+=Value)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//params+=Value
		public Assignment getParamsAssignment_3_1_1() { return cParamsAssignment_3_1_1; }
		
		//Value
		public RuleCall getParamsValueParserRuleCall_3_1_1_0() { return cParamsValueParserRuleCall_3_1_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class PredicateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.Predicate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cPredicateOrAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cVerticalLineVerticalLineKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cOrAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOrAndParserRuleCall_1_2_0 = (RuleCall)cOrAssignment_1_2.eContents().get(0);
		
		//// Predicate
		//Predicate Pred:
		//	And ({Predicate.or+=current} "||" or+=And)*;
		@Override public ParserRule getRule() { return rule; }
		
		//And ({Predicate.or+=current} "||" or+=And)*
		public Group getGroup() { return cGroup; }
		
		//And
		public RuleCall getAndParserRuleCall_0() { return cAndParserRuleCall_0; }
		
		//({Predicate.or+=current} "||" or+=And)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Predicate.or+=current}
		public Action getPredicateOrAction_1_0() { return cPredicateOrAction_1_0; }
		
		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_1_1() { return cVerticalLineVerticalLineKeyword_1_1; }
		
		//or+=And
		public Assignment getOrAssignment_1_2() { return cOrAssignment_1_2; }
		
		//And
		public RuleCall getOrAndParserRuleCall_1_2_0() { return cOrAndParserRuleCall_1_2_0; }
	}
	public class AndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.And");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNotParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndAndAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAmpersandAmpersandKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cAndAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cAndNotParserRuleCall_1_2_0 = (RuleCall)cAndAssignment_1_2.eContents().get(0);
		
		//And Pred:
		//	Not ({And.and+=current} "&&" and+=Not)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Not ({And.and+=current} "&&" and+=Not)*
		public Group getGroup() { return cGroup; }
		
		//Not
		public RuleCall getNotParserRuleCall_0() { return cNotParserRuleCall_0; }
		
		//({And.and+=current} "&&" and+=Not)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{And.and+=current}
		public Action getAndAndAction_1_0() { return cAndAndAction_1_0; }
		
		//"&&"
		public Keyword getAmpersandAmpersandKeyword_1_1() { return cAmpersandAmpersandKeyword_1_1; }
		
		//and+=Not
		public Assignment getAndAssignment_1_2() { return cAndAssignment_1_2; }
		
		//Not
		public RuleCall getAndNotParserRuleCall_1_2_0() { return cAndNotParserRuleCall_1_2_0; }
	}
	public class NotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.Not");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTermParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cNotAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cNegAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cNegExclamationMarkKeyword_1_1_0 = (Keyword)cNegAssignment_1_1.eContents().get(0);
		private final Assignment cTermAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cTermTermParserRuleCall_1_2_0 = (RuleCall)cTermAssignment_1_2.eContents().get(0);
		
		//Not Pred:
		//	Term | {Not} neg?="!" term=Term;
		@Override public ParserRule getRule() { return rule; }
		
		//Term | {Not} neg?="!" term=Term
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Term
		public RuleCall getTermParserRuleCall_0() { return cTermParserRuleCall_0; }
		
		//{Not} neg?="!" term=Term
		public Group getGroup_1() { return cGroup_1; }
		
		//{Not}
		public Action getNotAction_1_0() { return cNotAction_1_0; }
		
		//neg?="!"
		public Assignment getNegAssignment_1_1() { return cNegAssignment_1_1; }
		
		//"!"
		public Keyword getNegExclamationMarkKeyword_1_1_0() { return cNegExclamationMarkKeyword_1_1_0; }
		
		//term=Term
		public Assignment getTermAssignment_1_2() { return cTermAssignment_1_2; }
		
		//Term
		public RuleCall getTermTermParserRuleCall_1_2_0() { return cTermTermParserRuleCall_1_2_0; }
	}
	public class TermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.Term");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cImmediateParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEqualityTestParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cPredicateParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//Term Pred:
		//	Immediate | EqualityTest | "(" Predicate ")";
		@Override public ParserRule getRule() { return rule; }
		
		//Immediate | EqualityTest | "(" Predicate ")"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Immediate
		public RuleCall getImmediateParserRuleCall_0() { return cImmediateParserRuleCall_0; }
		
		//EqualityTest
		public RuleCall getEqualityTestParserRuleCall_1() { return cEqualityTestParserRuleCall_1; }
		
		//"(" Predicate ")"
		public Group getGroup_2() { return cGroup_2; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//Predicate
		public RuleCall getPredicateParserRuleCall_2_1() { return cPredicateParserRuleCall_2_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}
	public class ImmediateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.Immediate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cImmediateAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cIsTrueAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cIsTrueTrueKeyword_1_0_0 = (Keyword)cIsTrueAssignment_1_0.eContents().get(0);
		private final Keyword cFalseKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//Immediate Pred:
		//	{Immediate} (isTrue?="true" | "false");
		@Override public ParserRule getRule() { return rule; }
		
		//{Immediate} (isTrue?="true" | "false")
		public Group getGroup() { return cGroup; }
		
		//{Immediate}
		public Action getImmediateAction_0() { return cImmediateAction_0; }
		
		//isTrue?="true" | "false"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//isTrue?="true"
		public Assignment getIsTrueAssignment_1_0() { return cIsTrueAssignment_1_0; }
		
		//"true"
		public Keyword getIsTrueTrueKeyword_1_0_0() { return cIsTrueTrueKeyword_1_0_0; }
		
		//"false"
		public Keyword getFalseKeyword_1_1() { return cFalseKeyword_1_1; }
	}
	public class EqualityTestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.EqualityTest");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEqualityTestAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cOp1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cOp1Alternatives_1_0 = (Alternatives)cOp1Assignment_1.eContents().get(0);
		private final RuleCall cOp1ValueParserRuleCall_1_0_0 = (RuleCall)cOp1Alternatives_1_0.eContents().get(0);
		private final RuleCall cOp1RecAttributeParserRuleCall_1_0_1 = (RuleCall)cOp1Alternatives_1_0.eContents().get(1);
		private final Assignment cOperandAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cOperandAlternatives_2_0 = (Alternatives)cOperandAssignment_2.eContents().get(0);
		private final Keyword cOperandLessThanSignKeyword_2_0_0 = (Keyword)cOperandAlternatives_2_0.eContents().get(0);
		private final Keyword cOperandGreaterThanSignKeyword_2_0_1 = (Keyword)cOperandAlternatives_2_0.eContents().get(1);
		private final Keyword cOperandLessThanSignEqualsSignKeyword_2_0_2 = (Keyword)cOperandAlternatives_2_0.eContents().get(2);
		private final Keyword cOperandGreaterThanSignEqualsSignKeyword_2_0_3 = (Keyword)cOperandAlternatives_2_0.eContents().get(3);
		private final Keyword cOperandEqualsSignKeyword_2_0_4 = (Keyword)cOperandAlternatives_2_0.eContents().get(4);
		private final Keyword cOperandExclamationMarkEqualsSignKeyword_2_0_5 = (Keyword)cOperandAlternatives_2_0.eContents().get(5);
		private final Assignment cOp2Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOp2ValueParserRuleCall_3_0 = (RuleCall)cOp2Assignment_3.eContents().get(0);
		
		//EqualityTest Pred:
		//	{EqualityTest} op1=(Value | RecAttribute) operand=("<" | ">" | "<=" | ">=" | "=" | "!=") op2=Value;
		@Override public ParserRule getRule() { return rule; }
		
		//{EqualityTest} op1=(Value | RecAttribute) operand=("<" | ">" | "<=" | ">=" | "=" | "!=") op2=Value
		public Group getGroup() { return cGroup; }
		
		//{EqualityTest}
		public Action getEqualityTestAction_0() { return cEqualityTestAction_0; }
		
		//op1=(Value | RecAttribute)
		public Assignment getOp1Assignment_1() { return cOp1Assignment_1; }
		
		//(Value | RecAttribute)
		public Alternatives getOp1Alternatives_1_0() { return cOp1Alternatives_1_0; }
		
		//Value
		public RuleCall getOp1ValueParserRuleCall_1_0_0() { return cOp1ValueParserRuleCall_1_0_0; }
		
		//RecAttribute
		public RuleCall getOp1RecAttributeParserRuleCall_1_0_1() { return cOp1RecAttributeParserRuleCall_1_0_1; }
		
		//operand=("<" | ">" | "<=" | ">=" | "=" | "!=")
		public Assignment getOperandAssignment_2() { return cOperandAssignment_2; }
		
		//("<" | ">" | "<=" | ">=" | "=" | "!=")
		public Alternatives getOperandAlternatives_2_0() { return cOperandAlternatives_2_0; }
		
		//"<"
		public Keyword getOperandLessThanSignKeyword_2_0_0() { return cOperandLessThanSignKeyword_2_0_0; }
		
		//">"
		public Keyword getOperandGreaterThanSignKeyword_2_0_1() { return cOperandGreaterThanSignKeyword_2_0_1; }
		
		//"<="
		public Keyword getOperandLessThanSignEqualsSignKeyword_2_0_2() { return cOperandLessThanSignEqualsSignKeyword_2_0_2; }
		
		//">="
		public Keyword getOperandGreaterThanSignEqualsSignKeyword_2_0_3() { return cOperandGreaterThanSignEqualsSignKeyword_2_0_3; }
		
		//"="
		public Keyword getOperandEqualsSignKeyword_2_0_4() { return cOperandEqualsSignKeyword_2_0_4; }
		
		//"!="
		public Keyword getOperandExclamationMarkEqualsSignKeyword_2_0_5() { return cOperandExclamationMarkEqualsSignKeyword_2_0_5; }
		
		//op2=Value
		public Assignment getOp2Assignment_3() { return cOp2Assignment_3; }
		
		//Value
		public RuleCall getOp2ValueParserRuleCall_3_0() { return cOp2ValueParserRuleCall_3_0; }
	}
	public class FuncParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.FuncParam");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//// Functions
		//FuncParam:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class FuncDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.FuncDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParamsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParamsFuncParamParserRuleCall_3_0_0 = (RuleCall)cParamsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParamsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParamsFuncParamParserRuleCall_3_1_1_0 = (RuleCall)cParamsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cBlkAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBlkFuncBlockParserRuleCall_5_0 = (RuleCall)cBlkAssignment_5.eContents().get(0);
		
		//FuncDefinition:
		//	'function' name=ID '(' (params+=FuncParam (',' params+=FuncParam)*)? ')' blk=FuncBlock;
		@Override public ParserRule getRule() { return rule; }
		
		//'function' name=ID '(' (params+=FuncParam (',' params+=FuncParam)*)? ')' blk=FuncBlock
		public Group getGroup() { return cGroup; }
		
		//'function'
		public Keyword getFunctionKeyword_0() { return cFunctionKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(params+=FuncParam (',' params+=FuncParam)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//params+=FuncParam
		public Assignment getParamsAssignment_3_0() { return cParamsAssignment_3_0; }
		
		//FuncParam
		public RuleCall getParamsFuncParamParserRuleCall_3_0_0() { return cParamsFuncParamParserRuleCall_3_0_0; }
		
		//(',' params+=FuncParam)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//params+=FuncParam
		public Assignment getParamsAssignment_3_1_1() { return cParamsAssignment_3_1_1; }
		
		//FuncParam
		public RuleCall getParamsFuncParamParserRuleCall_3_1_1_0() { return cParamsFuncParamParserRuleCall_3_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//blk=FuncBlock
		public Assignment getBlkAssignment_5() { return cBlkAssignment_5; }
		
		//FuncBlock
		public RuleCall getBlkFuncBlockParserRuleCall_5_0() { return cBlkFuncBlockParserRuleCall_5_0; }
	}
	public class FuncBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.FuncBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cFuncBlockAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cStatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementsFuncStatementParserRuleCall_2_0 = (RuleCall)cStatementsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//FuncBlock:
		//	'{' {FuncBlock} statements+=FuncStatement* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' {FuncBlock} statements+=FuncStatement* '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//{FuncBlock}
		public Action getFuncBlockAction_1() { return cFuncBlockAction_1; }
		
		//statements+=FuncStatement*
		public Assignment getStatementsAssignment_2() { return cStatementsAssignment_2; }
		
		//FuncStatement
		public RuleCall getStatementsFuncStatementParserRuleCall_2_0() { return cStatementsFuncStatementParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class FuncStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.FuncStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFuncVarAssignParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFuncIfElseParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFuncReturnParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cFuncVarDeclarationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//FuncStatement:
		//	FuncVarAssign | FuncIfElse | FuncReturn | FuncVarDeclaration;
		@Override public ParserRule getRule() { return rule; }
		
		//FuncVarAssign | FuncIfElse | FuncReturn | FuncVarDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FuncVarAssign
		public RuleCall getFuncVarAssignParserRuleCall_0() { return cFuncVarAssignParserRuleCall_0; }
		
		//FuncIfElse
		public RuleCall getFuncIfElseParserRuleCall_1() { return cFuncIfElseParserRuleCall_1; }
		
		//FuncReturn
		public RuleCall getFuncReturnParserRuleCall_2() { return cFuncReturnParserRuleCall_2; }
		
		//FuncVarDeclaration
		public RuleCall getFuncVarDeclarationParserRuleCall_3() { return cFuncVarDeclarationParserRuleCall_3; }
	}
	public class FuncVarDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.FuncVarDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValFuncValParserRuleCall_3_0 = (RuleCall)cValAssignment_3.eContents().get(0);
		
		//FuncVarDeclaration:
		//	'var' name=ID '=' val=FuncVal;
		@Override public ParserRule getRule() { return rule; }
		
		//'var' name=ID '=' val=FuncVal
		public Group getGroup() { return cGroup; }
		
		//'var'
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//val=FuncVal
		public Assignment getValAssignment_3() { return cValAssignment_3; }
		
		//FuncVal
		public RuleCall getValFuncValParserRuleCall_3_0() { return cValFuncValParserRuleCall_3_0; }
	}
	public class FuncVarAssignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.FuncVarAssign");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cVarFuncVarDeclarationCrossReference_0_0 = (CrossReference)cVarAssignment_0.eContents().get(0);
		private final RuleCall cVarFuncVarDeclarationIDTerminalRuleCall_0_0_1 = (RuleCall)cVarFuncVarDeclarationCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValFuncValParserRuleCall_2_0 = (RuleCall)cValAssignment_2.eContents().get(0);
		
		//FuncVarAssign:
		//	var=[FuncVarDeclaration] '=' val=FuncVal;
		@Override public ParserRule getRule() { return rule; }
		
		//var=[FuncVarDeclaration] '=' val=FuncVal
		public Group getGroup() { return cGroup; }
		
		//var=[FuncVarDeclaration]
		public Assignment getVarAssignment_0() { return cVarAssignment_0; }
		
		//[FuncVarDeclaration]
		public CrossReference getVarFuncVarDeclarationCrossReference_0_0() { return cVarFuncVarDeclarationCrossReference_0_0; }
		
		//ID
		public RuleCall getVarFuncVarDeclarationIDTerminalRuleCall_0_0_1() { return cVarFuncVarDeclarationIDTerminalRuleCall_0_0_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//val=FuncVal
		public Assignment getValAssignment_2() { return cValAssignment_2; }
		
		//FuncVal
		public RuleCall getValFuncValParserRuleCall_2_0() { return cValFuncValParserRuleCall_2_0; }
	}
	public class FuncVarParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.FuncVarParam");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFuncParamParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFuncVarDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//FuncVarParam:
		//	FuncParam | FuncVarDeclaration;
		@Override public ParserRule getRule() { return rule; }
		
		//FuncParam | FuncVarDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FuncParam
		public RuleCall getFuncParamParserRuleCall_0() { return cFuncParamParserRuleCall_0; }
		
		//FuncVarDeclaration
		public RuleCall getFuncVarDeclarationParserRuleCall_1() { return cFuncVarDeclarationParserRuleCall_1; }
	}
	public class FuncValElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.FuncVal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cFuncStringAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cImmAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cImmSTRINGTerminalRuleCall_0_1_0 = (RuleCall)cImmAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cFuncMemoryRefAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cRefAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cRefFuncVarParamCrossReference_1_1_0 = (CrossReference)cRefAssignment_1_1.eContents().get(0);
		private final RuleCall cRefFuncVarParamIDTerminalRuleCall_1_1_0_1 = (RuleCall)cRefFuncVarParamCrossReference_1_1_0.eContents().get(1);
		
		//FuncVal:
		//	{FuncString} imm=STRING | {FuncMemoryRef} ref=[FuncVarParam];
		@Override public ParserRule getRule() { return rule; }
		
		//{FuncString} imm=STRING | {FuncMemoryRef} ref=[FuncVarParam]
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{FuncString} imm=STRING
		public Group getGroup_0() { return cGroup_0; }
		
		//{FuncString}
		public Action getFuncStringAction_0_0() { return cFuncStringAction_0_0; }
		
		//imm=STRING
		public Assignment getImmAssignment_0_1() { return cImmAssignment_0_1; }
		
		//STRING
		public RuleCall getImmSTRINGTerminalRuleCall_0_1_0() { return cImmSTRINGTerminalRuleCall_0_1_0; }
		
		//{FuncMemoryRef} ref=[FuncVarParam]
		public Group getGroup_1() { return cGroup_1; }
		
		//{FuncMemoryRef}
		public Action getFuncMemoryRefAction_1_0() { return cFuncMemoryRefAction_1_0; }
		
		//ref=[FuncVarParam]
		public Assignment getRefAssignment_1_1() { return cRefAssignment_1_1; }
		
		//[FuncVarParam]
		public CrossReference getRefFuncVarParamCrossReference_1_1_0() { return cRefFuncVarParamCrossReference_1_1_0; }
		
		//ID
		public RuleCall getRefFuncVarParamIDTerminalRuleCall_1_1_0_1() { return cRefFuncVarParamIDTerminalRuleCall_1_1_0_1; }
	}
	public class FuncPredicateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.FuncPredicate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFuncAndParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cFuncPredicateOrAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cVerticalLineVerticalLineKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cOrAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOrFuncAndParserRuleCall_1_2_0 = (RuleCall)cOrAssignment_1_2.eContents().get(0);
		
		//FuncPredicate FuncPred:
		//	FuncAnd ({FuncPredicate.or+=current} "||" or+=FuncAnd)*;
		@Override public ParserRule getRule() { return rule; }
		
		//FuncAnd ({FuncPredicate.or+=current} "||" or+=FuncAnd)*
		public Group getGroup() { return cGroup; }
		
		//FuncAnd
		public RuleCall getFuncAndParserRuleCall_0() { return cFuncAndParserRuleCall_0; }
		
		//({FuncPredicate.or+=current} "||" or+=FuncAnd)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{FuncPredicate.or+=current}
		public Action getFuncPredicateOrAction_1_0() { return cFuncPredicateOrAction_1_0; }
		
		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_1_1() { return cVerticalLineVerticalLineKeyword_1_1; }
		
		//or+=FuncAnd
		public Assignment getOrAssignment_1_2() { return cOrAssignment_1_2; }
		
		//FuncAnd
		public RuleCall getOrFuncAndParserRuleCall_1_2_0() { return cOrFuncAndParserRuleCall_1_2_0; }
	}
	public class FuncAndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.FuncAnd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFuncNotParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cFuncAndAndAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAmpersandAmpersandKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cAndAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cAndFuncNotParserRuleCall_1_2_0 = (RuleCall)cAndAssignment_1_2.eContents().get(0);
		
		//FuncAnd FuncPred:
		//	FuncNot ({FuncAnd.and+=current} "&&" and+=FuncNot)*;
		@Override public ParserRule getRule() { return rule; }
		
		//FuncNot ({FuncAnd.and+=current} "&&" and+=FuncNot)*
		public Group getGroup() { return cGroup; }
		
		//FuncNot
		public RuleCall getFuncNotParserRuleCall_0() { return cFuncNotParserRuleCall_0; }
		
		//({FuncAnd.and+=current} "&&" and+=FuncNot)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{FuncAnd.and+=current}
		public Action getFuncAndAndAction_1_0() { return cFuncAndAndAction_1_0; }
		
		//"&&"
		public Keyword getAmpersandAmpersandKeyword_1_1() { return cAmpersandAmpersandKeyword_1_1; }
		
		//and+=FuncNot
		public Assignment getAndAssignment_1_2() { return cAndAssignment_1_2; }
		
		//FuncNot
		public RuleCall getAndFuncNotParserRuleCall_1_2_0() { return cAndFuncNotParserRuleCall_1_2_0; }
	}
	public class FuncNotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.FuncNot");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFuncTermParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cFuncNotAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cNegAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cNegExclamationMarkKeyword_1_1_0 = (Keyword)cNegAssignment_1_1.eContents().get(0);
		private final Assignment cTermAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cTermFuncTermParserRuleCall_1_2_0 = (RuleCall)cTermAssignment_1_2.eContents().get(0);
		
		//FuncNot FuncPred:
		//	FuncTerm | {FuncNot} neg?="!" term=FuncTerm;
		@Override public ParserRule getRule() { return rule; }
		
		//FuncTerm | {FuncNot} neg?="!" term=FuncTerm
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FuncTerm
		public RuleCall getFuncTermParserRuleCall_0() { return cFuncTermParserRuleCall_0; }
		
		//{FuncNot} neg?="!" term=FuncTerm
		public Group getGroup_1() { return cGroup_1; }
		
		//{FuncNot}
		public Action getFuncNotAction_1_0() { return cFuncNotAction_1_0; }
		
		//neg?="!"
		public Assignment getNegAssignment_1_1() { return cNegAssignment_1_1; }
		
		//"!"
		public Keyword getNegExclamationMarkKeyword_1_1_0() { return cNegExclamationMarkKeyword_1_1_0; }
		
		//term=FuncTerm
		public Assignment getTermAssignment_1_2() { return cTermAssignment_1_2; }
		
		//FuncTerm
		public RuleCall getTermFuncTermParserRuleCall_1_2_0() { return cTermFuncTermParserRuleCall_1_2_0; }
	}
	public class FuncTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.FuncTerm");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFuncImmediateParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFuncEqualityTestParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cFuncPredicateParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//FuncTerm FuncPred:
		//	FuncImmediate | FuncEqualityTest | "(" FuncPredicate ")";
		@Override public ParserRule getRule() { return rule; }
		
		//FuncImmediate | FuncEqualityTest | "(" FuncPredicate ")"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FuncImmediate
		public RuleCall getFuncImmediateParserRuleCall_0() { return cFuncImmediateParserRuleCall_0; }
		
		//FuncEqualityTest
		public RuleCall getFuncEqualityTestParserRuleCall_1() { return cFuncEqualityTestParserRuleCall_1; }
		
		//"(" FuncPredicate ")"
		public Group getGroup_2() { return cGroup_2; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//FuncPredicate
		public RuleCall getFuncPredicateParserRuleCall_2_1() { return cFuncPredicateParserRuleCall_2_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}
	public class FuncImmediateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.FuncImmediate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFuncImmediateAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cIsTrueAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cIsTrueTrueKeyword_1_0_0 = (Keyword)cIsTrueAssignment_1_0.eContents().get(0);
		private final Keyword cFalseKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//FuncImmediate FuncPred:
		//	{FuncImmediate} (isTrue?="true" | "false");
		@Override public ParserRule getRule() { return rule; }
		
		//{FuncImmediate} (isTrue?="true" | "false")
		public Group getGroup() { return cGroup; }
		
		//{FuncImmediate}
		public Action getFuncImmediateAction_0() { return cFuncImmediateAction_0; }
		
		//isTrue?="true" | "false"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//isTrue?="true"
		public Assignment getIsTrueAssignment_1_0() { return cIsTrueAssignment_1_0; }
		
		//"true"
		public Keyword getIsTrueTrueKeyword_1_0_0() { return cIsTrueTrueKeyword_1_0_0; }
		
		//"false"
		public Keyword getFalseKeyword_1_1() { return cFalseKeyword_1_1; }
	}
	public class FuncEqualityTestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.FuncEqualityTest");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFuncEqualityTestAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cOp1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOp1FuncValParserRuleCall_1_0 = (RuleCall)cOp1Assignment_1.eContents().get(0);
		private final Assignment cOperandAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cOperandAlternatives_2_0 = (Alternatives)cOperandAssignment_2.eContents().get(0);
		private final Keyword cOperandLessThanSignKeyword_2_0_0 = (Keyword)cOperandAlternatives_2_0.eContents().get(0);
		private final Keyword cOperandGreaterThanSignKeyword_2_0_1 = (Keyword)cOperandAlternatives_2_0.eContents().get(1);
		private final Keyword cOperandLessThanSignEqualsSignKeyword_2_0_2 = (Keyword)cOperandAlternatives_2_0.eContents().get(2);
		private final Keyword cOperandGreaterThanSignEqualsSignKeyword_2_0_3 = (Keyword)cOperandAlternatives_2_0.eContents().get(3);
		private final Keyword cOperandEqualsSignKeyword_2_0_4 = (Keyword)cOperandAlternatives_2_0.eContents().get(4);
		private final Keyword cOperandExclamationMarkEqualsSignKeyword_2_0_5 = (Keyword)cOperandAlternatives_2_0.eContents().get(5);
		private final Assignment cOp2Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOp2FuncValParserRuleCall_3_0 = (RuleCall)cOp2Assignment_3.eContents().get(0);
		
		//FuncEqualityTest FuncPred:
		//	{FuncEqualityTest} op1=FuncVal operand=("<" | ">" | "<=" | ">=" | "=" | "!=") op2=FuncVal;
		@Override public ParserRule getRule() { return rule; }
		
		//{FuncEqualityTest} op1=FuncVal operand=("<" | ">" | "<=" | ">=" | "=" | "!=") op2=FuncVal
		public Group getGroup() { return cGroup; }
		
		//{FuncEqualityTest}
		public Action getFuncEqualityTestAction_0() { return cFuncEqualityTestAction_0; }
		
		//op1=FuncVal
		public Assignment getOp1Assignment_1() { return cOp1Assignment_1; }
		
		//FuncVal
		public RuleCall getOp1FuncValParserRuleCall_1_0() { return cOp1FuncValParserRuleCall_1_0; }
		
		//operand=("<" | ">" | "<=" | ">=" | "=" | "!=")
		public Assignment getOperandAssignment_2() { return cOperandAssignment_2; }
		
		//("<" | ">" | "<=" | ">=" | "=" | "!=")
		public Alternatives getOperandAlternatives_2_0() { return cOperandAlternatives_2_0; }
		
		//"<"
		public Keyword getOperandLessThanSignKeyword_2_0_0() { return cOperandLessThanSignKeyword_2_0_0; }
		
		//">"
		public Keyword getOperandGreaterThanSignKeyword_2_0_1() { return cOperandGreaterThanSignKeyword_2_0_1; }
		
		//"<="
		public Keyword getOperandLessThanSignEqualsSignKeyword_2_0_2() { return cOperandLessThanSignEqualsSignKeyword_2_0_2; }
		
		//">="
		public Keyword getOperandGreaterThanSignEqualsSignKeyword_2_0_3() { return cOperandGreaterThanSignEqualsSignKeyword_2_0_3; }
		
		//"="
		public Keyword getOperandEqualsSignKeyword_2_0_4() { return cOperandEqualsSignKeyword_2_0_4; }
		
		//"!="
		public Keyword getOperandExclamationMarkEqualsSignKeyword_2_0_5() { return cOperandExclamationMarkEqualsSignKeyword_2_0_5; }
		
		//op2=FuncVal
		public Assignment getOp2Assignment_3() { return cOp2Assignment_3; }
		
		//FuncVal
		public RuleCall getOp2FuncValParserRuleCall_3_0() { return cOp2FuncValParserRuleCall_3_0; }
	}
	public class FuncIfElseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.FuncIfElse");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTestAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTestFuncPredicateParserRuleCall_2_0 = (RuleCall)cTestAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cThenAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cThenFuncBlockParserRuleCall_4_0 = (RuleCall)cThenAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cElifKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cTestAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cTestFuncPredicateParserRuleCall_5_2_0 = (RuleCall)cTestAssignment_5_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		private final Assignment cThenAssignment_5_4 = (Assignment)cGroup_5.eContents().get(4);
		private final RuleCall cThenFuncBlockParserRuleCall_5_4_0 = (RuleCall)cThenAssignment_5_4.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cElseKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cElseBranchAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cElseBranchFuncBlockParserRuleCall_6_1_0 = (RuleCall)cElseBranchAssignment_6_1.eContents().get(0);
		
		//FuncIfElse:
		//	'if' '(' test+=FuncPredicate ')' then+=FuncBlock ('elif' '(' test+=FuncPredicate ')' then+=FuncBlock)* ('else'
		//	elseBranch=FuncBlock)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'if' '(' test+=FuncPredicate ')' then+=FuncBlock ('elif' '(' test+=FuncPredicate ')' then+=FuncBlock)* ('else'
		//elseBranch=FuncBlock)?
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//test+=FuncPredicate
		public Assignment getTestAssignment_2() { return cTestAssignment_2; }
		
		//FuncPredicate
		public RuleCall getTestFuncPredicateParserRuleCall_2_0() { return cTestFuncPredicateParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//then+=FuncBlock
		public Assignment getThenAssignment_4() { return cThenAssignment_4; }
		
		//FuncBlock
		public RuleCall getThenFuncBlockParserRuleCall_4_0() { return cThenFuncBlockParserRuleCall_4_0; }
		
		//('elif' '(' test+=FuncPredicate ')' then+=FuncBlock)*
		public Group getGroup_5() { return cGroup_5; }
		
		//'elif'
		public Keyword getElifKeyword_5_0() { return cElifKeyword_5_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5_1() { return cLeftParenthesisKeyword_5_1; }
		
		//test+=FuncPredicate
		public Assignment getTestAssignment_5_2() { return cTestAssignment_5_2; }
		
		//FuncPredicate
		public RuleCall getTestFuncPredicateParserRuleCall_5_2_0() { return cTestFuncPredicateParserRuleCall_5_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5_3() { return cRightParenthesisKeyword_5_3; }
		
		//then+=FuncBlock
		public Assignment getThenAssignment_5_4() { return cThenAssignment_5_4; }
		
		//FuncBlock
		public RuleCall getThenFuncBlockParserRuleCall_5_4_0() { return cThenFuncBlockParserRuleCall_5_4_0; }
		
		//('else' elseBranch=FuncBlock)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'else'
		public Keyword getElseKeyword_6_0() { return cElseKeyword_6_0; }
		
		//elseBranch=FuncBlock
		public Assignment getElseBranchAssignment_6_1() { return cElseBranchAssignment_6_1; }
		
		//FuncBlock
		public RuleCall getElseBranchFuncBlockParserRuleCall_6_1_0() { return cElseBranchFuncBlockParserRuleCall_6_1_0; }
	}
	public class FuncReturnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.FuncReturn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReturnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValFuncValParserRuleCall_1_0 = (RuleCall)cValAssignment_1.eContents().get(0);
		
		//FuncReturn:
		//	'return' val=FuncVal;
		@Override public ParserRule getRule() { return rule; }
		
		//'return' val=FuncVal
		public Group getGroup() { return cGroup; }
		
		//'return'
		public Keyword getReturnKeyword_0() { return cReturnKeyword_0; }
		
		//val=FuncVal
		public Assignment getValAssignment_1() { return cValAssignment_1; }
		
		//FuncVal
		public RuleCall getValFuncValParserRuleCall_1_0() { return cValFuncValParserRuleCall_1_0; }
	}
	
	
	private final ModelElements pModel;
	private final ProcElements pProc;
	private final InterleavingProcessElements pInterleavingProcess;
	private final NonDeterminismProcessElements pNonDeterminismProcess;
	private final PreconditionsElements pPreconditions;
	private final PredOutputProcessOrInputProcessesElements pPredOutputProcessOrInputProcesses;
	private final PredOutputProcessOrInputProcessElements pPredOutputProcessOrInputProcess;
	private final InputProcessesPartElements pInputProcessesPart;
	private final InputProcessElements pInputProcess;
	private final OutputProcessPartElements pOutputProcessPart;
	private final IfProcessesElements pIfProcesses;
	private final IfBranchProcessElements pIfBranchProcess;
	private final UpdateElements pUpdate;
	private final AwarenessElements pAwareness;
	private final NZCProcessElements pNZCProcess;
	private final NProcessElements pNProcess;
	private final CallProcessElements pCallProcess;
	private final ZeroProcessElements pZeroProcess;
	private final ProcessDefinitionElements pProcessDefinition;
	private final EnvironmentElements pEnvironment;
	private final ComponentDefinitionElements pComponentDefinition;
	private final AttributeElements pAttribute;
	private final RecAttributeElements pRecAttribute;
	private final ValueElements pValue;
	private final AttributeValueElements pAttributeValue;
	private final ImmediateValueElements pImmediateValue;
	private final GoStringFunctionElements pGoStringFunction;
	private final PredicateElements pPredicate;
	private final AndElements pAnd;
	private final NotElements pNot;
	private final TermElements pTerm;
	private final ImmediateElements pImmediate;
	private final EqualityTestElements pEqualityTest;
	private final FuncParamElements pFuncParam;
	private final FuncDefinitionElements pFuncDefinition;
	private final FuncBlockElements pFuncBlock;
	private final FuncStatementElements pFuncStatement;
	private final FuncVarDeclarationElements pFuncVarDeclaration;
	private final FuncVarAssignElements pFuncVarAssign;
	private final FuncVarParamElements pFuncVarParam;
	private final FuncValElements pFuncVal;
	private final FuncPredicateElements pFuncPredicate;
	private final FuncAndElements pFuncAnd;
	private final FuncNotElements pFuncNot;
	private final FuncTermElements pFuncTerm;
	private final FuncImmediateElements pFuncImmediate;
	private final FuncEqualityTestElements pFuncEqualityTest;
	private final FuncIfElseElements pFuncIfElse;
	private final FuncReturnElements pFuncReturn;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public GoatComponentsGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pProc = new ProcElements();
		this.pInterleavingProcess = new InterleavingProcessElements();
		this.pNonDeterminismProcess = new NonDeterminismProcessElements();
		this.pPreconditions = new PreconditionsElements();
		this.pPredOutputProcessOrInputProcesses = new PredOutputProcessOrInputProcessesElements();
		this.pPredOutputProcessOrInputProcess = new PredOutputProcessOrInputProcessElements();
		this.pInputProcessesPart = new InputProcessesPartElements();
		this.pInputProcess = new InputProcessElements();
		this.pOutputProcessPart = new OutputProcessPartElements();
		this.pIfProcesses = new IfProcessesElements();
		this.pIfBranchProcess = new IfBranchProcessElements();
		this.pUpdate = new UpdateElements();
		this.pAwareness = new AwarenessElements();
		this.pNZCProcess = new NZCProcessElements();
		this.pNProcess = new NProcessElements();
		this.pCallProcess = new CallProcessElements();
		this.pZeroProcess = new ZeroProcessElements();
		this.pProcessDefinition = new ProcessDefinitionElements();
		this.pEnvironment = new EnvironmentElements();
		this.pComponentDefinition = new ComponentDefinitionElements();
		this.pAttribute = new AttributeElements();
		this.pRecAttribute = new RecAttributeElements();
		this.pValue = new ValueElements();
		this.pAttributeValue = new AttributeValueElements();
		this.pImmediateValue = new ImmediateValueElements();
		this.pGoStringFunction = new GoStringFunctionElements();
		this.pPredicate = new PredicateElements();
		this.pAnd = new AndElements();
		this.pNot = new NotElements();
		this.pTerm = new TermElements();
		this.pImmediate = new ImmediateElements();
		this.pEqualityTest = new EqualityTestElements();
		this.pFuncParam = new FuncParamElements();
		this.pFuncDefinition = new FuncDefinitionElements();
		this.pFuncBlock = new FuncBlockElements();
		this.pFuncStatement = new FuncStatementElements();
		this.pFuncVarDeclaration = new FuncVarDeclarationElements();
		this.pFuncVarAssign = new FuncVarAssignElements();
		this.pFuncVarParam = new FuncVarParamElements();
		this.pFuncVal = new FuncValElements();
		this.pFuncPredicate = new FuncPredicateElements();
		this.pFuncAnd = new FuncAndElements();
		this.pFuncNot = new FuncNotElements();
		this.pFuncTerm = new FuncTermElements();
		this.pFuncImmediate = new FuncImmediateElements();
		this.pFuncEqualityTest = new FuncEqualityTestElements();
		this.pFuncIfElse = new FuncIfElseElements();
		this.pFuncReturn = new FuncReturnElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.sysma.goat.eclipse_plugin.GoatComponents".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	(processes+=ProcessDefinition | components+=ComponentDefinition | functions+=FuncDefinition)*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//// Process
	//Proc Process:
	//	InterleavingProcess | NonDeterminismProcess;
	public ProcElements getProcAccess() {
		return pProc;
	}
	
	public ParserRule getProcRule() {
		return getProcAccess().getRule();
	}
	
	//InterleavingProcess Process:
	//	CallProcess {InterleavingProcess.subProcs+=current} ("|" subProcs+=CallProcess)*;
	public InterleavingProcessElements getInterleavingProcessAccess() {
		return pInterleavingProcess;
	}
	
	public ParserRule getInterleavingProcessRule() {
		return getInterleavingProcessAccess().getRule();
	}
	
	//NonDeterminismProcess Process:
	//	PredOutputProcessOrInputProcesses | IfProcesses | NProcess;
	public NonDeterminismProcessElements getNonDeterminismProcessAccess() {
		return pNonDeterminismProcess;
	}
	
	public ParserRule getNonDeterminismProcessRule() {
		return getNonDeterminismProcessAccess().getRule();
	}
	
	//Preconditions:
	//	{Preconditions} precond+=(Update | Awareness)*;
	public PreconditionsElements getPreconditionsAccess() {
		return pPreconditions;
	}
	
	public ParserRule getPreconditionsRule() {
		return getPreconditionsAccess().getRule();
	}
	
	//PredOutputProcessOrInputProcesses Process:
	//	Preconditions ({OutputProcess.precond=current} OutputProcessPart | {InputProcesses.preconds+=current}
	//	InputProcessesPart);
	public PredOutputProcessOrInputProcessesElements getPredOutputProcessOrInputProcessesAccess() {
		return pPredOutputProcessOrInputProcesses;
	}
	
	public ParserRule getPredOutputProcessOrInputProcessesRule() {
		return getPredOutputProcessOrInputProcessesAccess().getRule();
	}
	
	//PredOutputProcessOrInputProcess Process:
	//	Preconditions ({OutputProcess.precond=current} OutputProcessPart | {InputProcesses.preconds+=current}
	//	inputs+=InputProcess);
	public PredOutputProcessOrInputProcessElements getPredOutputProcessOrInputProcessAccess() {
		return pPredOutputProcessOrInputProcess;
	}
	
	public ParserRule getPredOutputProcessOrInputProcessRule() {
		return getPredOutputProcessOrInputProcessAccess().getRule();
	}
	
	//fragment InputProcessesPart:
	//	inputs+=InputProcess ('+' preconds+=Preconditions inputs+=InputProcess)*;
	public InputProcessesPartElements getInputProcessesPartAccess() {
		return pInputProcessesPart;
	}
	
	public ParserRule getInputProcessesPartRule() {
		return getInputProcessesPartAccess().getRule();
	}
	
	//InputProcess Process:
	//	{InputProcess} "{" rec_pred=Predicate "}" "(" (msgInParts+=Attribute ("," msgInParts+=Attribute)*)? ")" output=STRING?
	//	"." next=NZCProcess;
	public InputProcessElements getInputProcessAccess() {
		return pInputProcess;
	}
	
	public ParserRule getInputProcessRule() {
		return getInputProcessAccess().getRule();
	}
	
	//fragment OutputProcessPart:
	//	"(" (msgOutParts+=Value ("," msgOutParts+=Value)*)? ")" "@" send_pred=Predicate output=STRING? ("sleep" "(" msec=INT
	//	")")? "." next=NZCProcess;
	public OutputProcessPartElements getOutputProcessPartAccess() {
		return pOutputProcessPart;
	}
	
	public ParserRule getOutputProcessPartRule() {
		return getOutputProcessPartAccess().getRule();
	}
	
	//IfProcesses Process:
	//	{IfProcesses} branches+=IfBranchProcess ("else" branches+=IfBranchProcess)*;
	public IfProcessesElements getIfProcessesAccess() {
		return pIfProcesses;
	}
	
	public ParserRule getIfProcessesRule() {
		return getIfProcessesAccess().getRule();
	}
	
	//IfBranchProcess Process:
	//	{IfBranchProcess} "if" cond=Preconditions '{' then=PredOutputProcessOrInputProcess '}';
	public IfBranchProcessElements getIfBranchProcessAccess() {
		return pIfBranchProcess;
	}
	
	public ParserRule getIfBranchProcessRule() {
		return getIfBranchProcessAccess().getRule();
	}
	
	//Update:
	//	"[" vars+=Attribute ":=" vals+=Value ("," vars+=Attribute ":=" vals+=Value)* "]";
	public UpdateElements getUpdateAccess() {
		return pUpdate;
	}
	
	public ParserRule getUpdateRule() {
		return getUpdateAccess().getRule();
	}
	
	//Awareness:
	//	"<" pred=Predicate ">";
	public AwarenessElements getAwarenessAccess() {
		return pAwareness;
	}
	
	public ParserRule getAwarenessRule() {
		return getAwarenessAccess().getRule();
	}
	
	//NZCProcess Process:
	//	"(" Proc ")" | ZeroProcess | CallProcess;
	public NZCProcessElements getNZCProcessAccess() {
		return pNZCProcess;
	}
	
	public ParserRule getNZCProcessRule() {
		return getNZCProcessAccess().getRule();
	}
	
	//NProcess Process:
	//	"(" Proc ")" | ZeroProcess //| CallProcess
	//;
	public NProcessElements getNProcessAccess() {
		return pNProcess;
	}
	
	public ParserRule getNProcessRule() {
		return getNProcessAccess().getRule();
	}
	
	//CallProcess Process:
	//	{CallProcess} procname=[ProcessDefinition] ("[" params+=Value ("," params+=Value)* "]")?;
	public CallProcessElements getCallProcessAccess() {
		return pCallProcess;
	}
	
	public ParserRule getCallProcessRule() {
		return getCallProcessAccess().getRule();
	}
	
	//ZeroProcess Process:
	//	{ZeroProcess} "0";
	public ZeroProcessElements getZeroProcessAccess() {
		return pZeroProcess;
	}
	
	public ParserRule getZeroProcessRule() {
		return getZeroProcessAccess().getRule();
	}
	
	//ProcessDefinition:
	//	'proc' name=ID ("[" params+=ID ("," params+=ID)* "]")? '=' proc=Proc;
	public ProcessDefinitionElements getProcessDefinitionAccess() {
		return pProcessDefinition;
	}
	
	public ParserRule getProcessDefinitionRule() {
		return getProcessDefinitionAccess().getRule();
	}
	
	//// Component
	//Environment:
	//	{Environment} "{" (attrs+=ID ':=' vals+=STRING ("," attrs+=ID ':=' vals+=STRING)*)? "}";
	public EnvironmentElements getEnvironmentAccess() {
		return pEnvironment;
	}
	
	public ParserRule getEnvironmentRule() {
		return getEnvironmentAccess().getRule();
	}
	
	//ComponentDefinition:
	//	"component" env=Environment proc=[ProcessDefinition] ("[" params+=STRING ("," params+=STRING)* "]")? 'at'
	//	address=STRING;
	public ComponentDefinitionElements getComponentDefinitionAccess() {
		return pComponentDefinition;
	}
	
	public ParserRule getComponentDefinitionRule() {
		return getComponentDefinitionAccess().getRule();
	}
	
	//// Attributes
	//Attribute:
	//	(comp?="this" ".")? ident=ID;
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}
	
	//RecAttribute:
	//	"receiver" "." ident=ID;
	public RecAttributeElements getRecAttributeAccess() {
		return pRecAttribute;
	}
	
	public ParserRule getRecAttributeRule() {
		return getRecAttributeAccess().getRule();
	}
	
	//// Value
	//Value:
	//	AttributeValue | ImmediateValue | GoStringFunction;
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}
	
	//AttributeValue Value:
	//	{AttributeValue} attr=Attribute;
	public AttributeValueElements getAttributeValueAccess() {
		return pAttributeValue;
	}
	
	public ParserRule getAttributeValueRule() {
		return getAttributeValueAccess().getRule();
	}
	
	//ImmediateValue Value:
	//	{ImmediateValue} imm=STRING;
	public ImmediateValueElements getImmediateValueAccess() {
		return pImmediateValue;
	}
	
	public ParserRule getImmediateValueRule() {
		return getImmediateValueAccess().getRule();
	}
	
	//GoStringFunction Value:
	//	{GoStringFunction} funcname=[FuncDefinition] "(" (params+=Value ("," params+=Value)*)? ")";
	public GoStringFunctionElements getGoStringFunctionAccess() {
		return pGoStringFunction;
	}
	
	public ParserRule getGoStringFunctionRule() {
		return getGoStringFunctionAccess().getRule();
	}
	
	//// Predicate
	//Predicate Pred:
	//	And ({Predicate.or+=current} "||" or+=And)*;
	public PredicateElements getPredicateAccess() {
		return pPredicate;
	}
	
	public ParserRule getPredicateRule() {
		return getPredicateAccess().getRule();
	}
	
	//And Pred:
	//	Not ({And.and+=current} "&&" and+=Not)*;
	public AndElements getAndAccess() {
		return pAnd;
	}
	
	public ParserRule getAndRule() {
		return getAndAccess().getRule();
	}
	
	//Not Pred:
	//	Term | {Not} neg?="!" term=Term;
	public NotElements getNotAccess() {
		return pNot;
	}
	
	public ParserRule getNotRule() {
		return getNotAccess().getRule();
	}
	
	//Term Pred:
	//	Immediate | EqualityTest | "(" Predicate ")";
	public TermElements getTermAccess() {
		return pTerm;
	}
	
	public ParserRule getTermRule() {
		return getTermAccess().getRule();
	}
	
	//Immediate Pred:
	//	{Immediate} (isTrue?="true" | "false");
	public ImmediateElements getImmediateAccess() {
		return pImmediate;
	}
	
	public ParserRule getImmediateRule() {
		return getImmediateAccess().getRule();
	}
	
	//EqualityTest Pred:
	//	{EqualityTest} op1=(Value | RecAttribute) operand=("<" | ">" | "<=" | ">=" | "=" | "!=") op2=Value;
	public EqualityTestElements getEqualityTestAccess() {
		return pEqualityTest;
	}
	
	public ParserRule getEqualityTestRule() {
		return getEqualityTestAccess().getRule();
	}
	
	//// Functions
	//FuncParam:
	//	name=ID;
	public FuncParamElements getFuncParamAccess() {
		return pFuncParam;
	}
	
	public ParserRule getFuncParamRule() {
		return getFuncParamAccess().getRule();
	}
	
	//FuncDefinition:
	//	'function' name=ID '(' (params+=FuncParam (',' params+=FuncParam)*)? ')' blk=FuncBlock;
	public FuncDefinitionElements getFuncDefinitionAccess() {
		return pFuncDefinition;
	}
	
	public ParserRule getFuncDefinitionRule() {
		return getFuncDefinitionAccess().getRule();
	}
	
	//FuncBlock:
	//	'{' {FuncBlock} statements+=FuncStatement* '}';
	public FuncBlockElements getFuncBlockAccess() {
		return pFuncBlock;
	}
	
	public ParserRule getFuncBlockRule() {
		return getFuncBlockAccess().getRule();
	}
	
	//FuncStatement:
	//	FuncVarAssign | FuncIfElse | FuncReturn | FuncVarDeclaration;
	public FuncStatementElements getFuncStatementAccess() {
		return pFuncStatement;
	}
	
	public ParserRule getFuncStatementRule() {
		return getFuncStatementAccess().getRule();
	}
	
	//FuncVarDeclaration:
	//	'var' name=ID '=' val=FuncVal;
	public FuncVarDeclarationElements getFuncVarDeclarationAccess() {
		return pFuncVarDeclaration;
	}
	
	public ParserRule getFuncVarDeclarationRule() {
		return getFuncVarDeclarationAccess().getRule();
	}
	
	//FuncVarAssign:
	//	var=[FuncVarDeclaration] '=' val=FuncVal;
	public FuncVarAssignElements getFuncVarAssignAccess() {
		return pFuncVarAssign;
	}
	
	public ParserRule getFuncVarAssignRule() {
		return getFuncVarAssignAccess().getRule();
	}
	
	//FuncVarParam:
	//	FuncParam | FuncVarDeclaration;
	public FuncVarParamElements getFuncVarParamAccess() {
		return pFuncVarParam;
	}
	
	public ParserRule getFuncVarParamRule() {
		return getFuncVarParamAccess().getRule();
	}
	
	//FuncVal:
	//	{FuncString} imm=STRING | {FuncMemoryRef} ref=[FuncVarParam];
	public FuncValElements getFuncValAccess() {
		return pFuncVal;
	}
	
	public ParserRule getFuncValRule() {
		return getFuncValAccess().getRule();
	}
	
	//FuncPredicate FuncPred:
	//	FuncAnd ({FuncPredicate.or+=current} "||" or+=FuncAnd)*;
	public FuncPredicateElements getFuncPredicateAccess() {
		return pFuncPredicate;
	}
	
	public ParserRule getFuncPredicateRule() {
		return getFuncPredicateAccess().getRule();
	}
	
	//FuncAnd FuncPred:
	//	FuncNot ({FuncAnd.and+=current} "&&" and+=FuncNot)*;
	public FuncAndElements getFuncAndAccess() {
		return pFuncAnd;
	}
	
	public ParserRule getFuncAndRule() {
		return getFuncAndAccess().getRule();
	}
	
	//FuncNot FuncPred:
	//	FuncTerm | {FuncNot} neg?="!" term=FuncTerm;
	public FuncNotElements getFuncNotAccess() {
		return pFuncNot;
	}
	
	public ParserRule getFuncNotRule() {
		return getFuncNotAccess().getRule();
	}
	
	//FuncTerm FuncPred:
	//	FuncImmediate | FuncEqualityTest | "(" FuncPredicate ")";
	public FuncTermElements getFuncTermAccess() {
		return pFuncTerm;
	}
	
	public ParserRule getFuncTermRule() {
		return getFuncTermAccess().getRule();
	}
	
	//FuncImmediate FuncPred:
	//	{FuncImmediate} (isTrue?="true" | "false");
	public FuncImmediateElements getFuncImmediateAccess() {
		return pFuncImmediate;
	}
	
	public ParserRule getFuncImmediateRule() {
		return getFuncImmediateAccess().getRule();
	}
	
	//FuncEqualityTest FuncPred:
	//	{FuncEqualityTest} op1=FuncVal operand=("<" | ">" | "<=" | ">=" | "=" | "!=") op2=FuncVal;
	public FuncEqualityTestElements getFuncEqualityTestAccess() {
		return pFuncEqualityTest;
	}
	
	public ParserRule getFuncEqualityTestRule() {
		return getFuncEqualityTestAccess().getRule();
	}
	
	//FuncIfElse:
	//	'if' '(' test+=FuncPredicate ')' then+=FuncBlock ('elif' '(' test+=FuncPredicate ')' then+=FuncBlock)* ('else'
	//	elseBranch=FuncBlock)?;
	public FuncIfElseElements getFuncIfElseAccess() {
		return pFuncIfElse;
	}
	
	public ParserRule getFuncIfElseRule() {
		return getFuncIfElseAccess().getRule();
	}
	
	//FuncReturn:
	//	'return' val=FuncVal;
	public FuncReturnElements getFuncReturnAccess() {
		return pFuncReturn;
	}
	
	public ParserRule getFuncReturnRule() {
		return getFuncReturnAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
