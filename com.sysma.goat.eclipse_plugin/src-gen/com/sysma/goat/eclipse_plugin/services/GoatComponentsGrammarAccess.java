/*
 * generated by Xtext 2.12.0
 */
package com.sysma.goat.eclipse_plugin.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class GoatComponentsGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cModelAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cProcessesAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cProcessesProcessDefinitionParserRuleCall_1_0_0 = (RuleCall)cProcessesAssignment_1_0.eContents().get(0);
		private final Assignment cComponentsAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cComponentsComponentDefinitionParserRuleCall_1_1_0 = (RuleCall)cComponentsAssignment_1_1.eContents().get(0);
		private final Assignment cFunctionsAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final RuleCall cFunctionsFuncDefinitionParserRuleCall_1_2_0 = (RuleCall)cFunctionsAssignment_1_2.eContents().get(0);
		
		//Model:
		//	{Model} (processes+=ProcessDefinition | components+=ComponentDefinition | functions+=FuncDefinition)*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Model} (processes+=ProcessDefinition | components+=ComponentDefinition | functions+=FuncDefinition)*
		public Group getGroup() { return cGroup; }
		
		//{Model}
		public Action getModelAction_0() { return cModelAction_0; }
		
		//(processes+=ProcessDefinition | components+=ComponentDefinition | functions+=FuncDefinition)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//processes+=ProcessDefinition
		public Assignment getProcessesAssignment_1_0() { return cProcessesAssignment_1_0; }
		
		//ProcessDefinition
		public RuleCall getProcessesProcessDefinitionParserRuleCall_1_0_0() { return cProcessesProcessDefinitionParserRuleCall_1_0_0; }
		
		//components+=ComponentDefinition
		public Assignment getComponentsAssignment_1_1() { return cComponentsAssignment_1_1; }
		
		//ComponentDefinition
		public RuleCall getComponentsComponentDefinitionParserRuleCall_1_1_0() { return cComponentsComponentDefinitionParserRuleCall_1_1_0; }
		
		//functions+=FuncDefinition
		public Assignment getFunctionsAssignment_1_2() { return cFunctionsAssignment_1_2; }
		
		//FuncDefinition
		public RuleCall getFunctionsFuncDefinitionParserRuleCall_1_2_0() { return cFunctionsFuncDefinitionParserRuleCall_1_2_0; }
	}
	public class ProcElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.Proc");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInterleavingProcessParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNonDeterminismProcessParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// Process
		//Proc Process:
		//	InterleavingProcess | NonDeterminismProcess;
		@Override public ParserRule getRule() { return rule; }
		
		//InterleavingProcess | NonDeterminismProcess
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//InterleavingProcess
		public RuleCall getInterleavingProcessParserRuleCall_0() { return cInterleavingProcessParserRuleCall_0; }
		
		//NonDeterminismProcess
		public RuleCall getNonDeterminismProcessParserRuleCall_1() { return cNonDeterminismProcessParserRuleCall_1; }
	}
	public class InterleavingProcessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.InterleavingProcess");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCallProcessParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Action cInterleavingProcessSubProcsAction_1 = (Action)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cVerticalLineKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSubProcsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSubProcsCallProcessParserRuleCall_2_1_0 = (RuleCall)cSubProcsAssignment_2_1.eContents().get(0);
		
		//InterleavingProcess Process:
		//	CallProcess {InterleavingProcess.subProcs+=current} ("|" subProcs+=CallProcess)*;
		@Override public ParserRule getRule() { return rule; }
		
		//CallProcess {InterleavingProcess.subProcs+=current} ("|" subProcs+=CallProcess)*
		public Group getGroup() { return cGroup; }
		
		//CallProcess
		public RuleCall getCallProcessParserRuleCall_0() { return cCallProcessParserRuleCall_0; }
		
		//{InterleavingProcess.subProcs+=current}
		public Action getInterleavingProcessSubProcsAction_1() { return cInterleavingProcessSubProcsAction_1; }
		
		//("|" subProcs+=CallProcess)*
		public Group getGroup_2() { return cGroup_2; }
		
		//"|"
		public Keyword getVerticalLineKeyword_2_0() { return cVerticalLineKeyword_2_0; }
		
		//subProcs+=CallProcess
		public Assignment getSubProcsAssignment_2_1() { return cSubProcsAssignment_2_1; }
		
		//CallProcess
		public RuleCall getSubProcsCallProcessParserRuleCall_2_1_0() { return cSubProcsCallProcessParserRuleCall_2_1_0; }
	}
	public class NonDeterminismProcessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.NonDeterminismProcess");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPredOutputProcessOrInputProcessesParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIfProcessesParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNProcessParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//NonDeterminismProcess Process:
		//	PredOutputProcessOrInputProcesses | IfProcesses | NProcess;
		@Override public ParserRule getRule() { return rule; }
		
		////(PreconditionProcess ({NonDeterminismProcess.procLeft=current} "+" procRight=NonDeterminismProcess)?) |
		//PredOutputProcessOrInputProcesses | IfProcesses | NProcess
		public Alternatives getAlternatives() { return cAlternatives; }
		
		////(PreconditionProcess ({NonDeterminismProcess.procLeft=current} "+" procRight=NonDeterminismProcess)?) |
		//PredOutputProcessOrInputProcesses
		public RuleCall getPredOutputProcessOrInputProcessesParserRuleCall_0() { return cPredOutputProcessOrInputProcessesParserRuleCall_0; }
		
		//IfProcesses
		public RuleCall getIfProcessesParserRuleCall_1() { return cIfProcessesParserRuleCall_1; }
		
		//NProcess
		public RuleCall getNProcessParserRuleCall_2() { return cNProcessParserRuleCall_2; }
	}
	public class PreconditionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.Preconditions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPreconditionsAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cPrecondAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cPrecondAlternatives_1_0 = (Alternatives)cPrecondAssignment_1.eContents().get(0);
		private final RuleCall cPrecondUpdateParserRuleCall_1_0_0 = (RuleCall)cPrecondAlternatives_1_0.eContents().get(0);
		private final RuleCall cPrecondAwarenessParserRuleCall_1_0_1 = (RuleCall)cPrecondAlternatives_1_0.eContents().get(1);
		
		//Preconditions:
		//	{Preconditions} precond+=(Update | Awareness)*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Preconditions} precond+=(Update | Awareness)*
		public Group getGroup() { return cGroup; }
		
		//{Preconditions}
		public Action getPreconditionsAction_0() { return cPreconditionsAction_0; }
		
		//precond+=(Update | Awareness)*
		public Assignment getPrecondAssignment_1() { return cPrecondAssignment_1; }
		
		//(Update | Awareness)
		public Alternatives getPrecondAlternatives_1_0() { return cPrecondAlternatives_1_0; }
		
		//Update
		public RuleCall getPrecondUpdateParserRuleCall_1_0_0() { return cPrecondUpdateParserRuleCall_1_0_0; }
		
		//Awareness
		public RuleCall getPrecondAwarenessParserRuleCall_1_0_1() { return cPrecondAwarenessParserRuleCall_1_0_1; }
	}
	public class PredOutputProcessOrInputProcessesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.PredOutputProcessOrInputProcesses");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPreconditionsParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cOutputProcessPrecondAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final RuleCall cOutputProcessPartParserRuleCall_1_0_1 = (RuleCall)cGroup_1_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cInputProcessesPrecondsAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final RuleCall cInputProcessesPartParserRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		
		//PredOutputProcessOrInputProcesses Process:
		//	Preconditions ({OutputProcess.precond=current} OutputProcessPart | {InputProcesses.preconds+=current}
		//	InputProcessesPart);
		@Override public ParserRule getRule() { return rule; }
		
		//Preconditions ({OutputProcess.precond=current} OutputProcessPart | {InputProcesses.preconds+=current}
		//InputProcessesPart)
		public Group getGroup() { return cGroup; }
		
		//Preconditions
		public RuleCall getPreconditionsParserRuleCall_0() { return cPreconditionsParserRuleCall_0; }
		
		//{OutputProcess.precond=current} OutputProcessPart | {InputProcesses.preconds+=current} InputProcessesPart
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//{OutputProcess.precond=current} OutputProcessPart
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{OutputProcess.precond=current}
		public Action getOutputProcessPrecondAction_1_0_0() { return cOutputProcessPrecondAction_1_0_0; }
		
		//OutputProcessPart
		public RuleCall getOutputProcessPartParserRuleCall_1_0_1() { return cOutputProcessPartParserRuleCall_1_0_1; }
		
		//{InputProcesses.preconds+=current} InputProcessesPart
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//{InputProcesses.preconds+=current}
		public Action getInputProcessesPrecondsAction_1_1_0() { return cInputProcessesPrecondsAction_1_1_0; }
		
		//InputProcessesPart
		public RuleCall getInputProcessesPartParserRuleCall_1_1_1() { return cInputProcessesPartParserRuleCall_1_1_1; }
	}
	public class PredOutputProcessOrInputProcessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.PredOutputProcessOrInputProcess");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPreconditionsParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cOutputProcessPrecondAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final RuleCall cOutputProcessPartParserRuleCall_1_0_1 = (RuleCall)cGroup_1_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cInputProcessesPrecondsAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Assignment cInputsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cInputsInputProcessParserRuleCall_1_1_1_0 = (RuleCall)cInputsAssignment_1_1_1.eContents().get(0);
		
		//PredOutputProcessOrInputProcess Process:
		//	Preconditions ({OutputProcess.precond=current} OutputProcessPart | {InputProcesses.preconds+=current}
		//	inputs+=InputProcess);
		@Override public ParserRule getRule() { return rule; }
		
		//Preconditions ({OutputProcess.precond=current} OutputProcessPart | {InputProcesses.preconds+=current}
		//inputs+=InputProcess)
		public Group getGroup() { return cGroup; }
		
		//Preconditions
		public RuleCall getPreconditionsParserRuleCall_0() { return cPreconditionsParserRuleCall_0; }
		
		//{OutputProcess.precond=current} OutputProcessPart | {InputProcesses.preconds+=current} inputs+=InputProcess
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//{OutputProcess.precond=current} OutputProcessPart
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{OutputProcess.precond=current}
		public Action getOutputProcessPrecondAction_1_0_0() { return cOutputProcessPrecondAction_1_0_0; }
		
		//OutputProcessPart
		public RuleCall getOutputProcessPartParserRuleCall_1_0_1() { return cOutputProcessPartParserRuleCall_1_0_1; }
		
		//{InputProcesses.preconds+=current} inputs+=InputProcess
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//{InputProcesses.preconds+=current}
		public Action getInputProcessesPrecondsAction_1_1_0() { return cInputProcessesPrecondsAction_1_1_0; }
		
		//inputs+=InputProcess
		public Assignment getInputsAssignment_1_1_1() { return cInputsAssignment_1_1_1; }
		
		//InputProcess
		public RuleCall getInputsInputProcessParserRuleCall_1_1_1_0() { return cInputsInputProcessParserRuleCall_1_1_1_0; }
	}
	public class InputProcessesPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.InputProcessesPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInputsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cInputsInputProcessParserRuleCall_0_0 = (RuleCall)cInputsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cPlusSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cPrecondsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPrecondsPreconditionsParserRuleCall_1_1_0 = (RuleCall)cPrecondsAssignment_1_1.eContents().get(0);
		private final Assignment cInputsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cInputsInputProcessParserRuleCall_1_2_0 = (RuleCall)cInputsAssignment_1_2.eContents().get(0);
		
		//fragment InputProcessesPart:
		//	inputs+=InputProcess ('+' preconds+=Preconditions inputs+=InputProcess)*;
		@Override public ParserRule getRule() { return rule; }
		
		//inputs+=InputProcess ('+' preconds+=Preconditions inputs+=InputProcess)*
		public Group getGroup() { return cGroup; }
		
		//inputs+=InputProcess
		public Assignment getInputsAssignment_0() { return cInputsAssignment_0; }
		
		//InputProcess
		public RuleCall getInputsInputProcessParserRuleCall_0_0() { return cInputsInputProcessParserRuleCall_0_0; }
		
		//('+' preconds+=Preconditions inputs+=InputProcess)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_0() { return cPlusSignKeyword_1_0; }
		
		//preconds+=Preconditions
		public Assignment getPrecondsAssignment_1_1() { return cPrecondsAssignment_1_1; }
		
		//Preconditions
		public RuleCall getPrecondsPreconditionsParserRuleCall_1_1_0() { return cPrecondsPreconditionsParserRuleCall_1_1_0; }
		
		//inputs+=InputProcess
		public Assignment getInputsAssignment_1_2() { return cInputsAssignment_1_2; }
		
		//InputProcess
		public RuleCall getInputsInputProcessParserRuleCall_1_2_0() { return cInputsInputProcessParserRuleCall_1_2_0; }
	}
	public class InputProcessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.InputProcess");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInputProcessAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cReceiveKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRec_predAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRec_predExpressionParserRuleCall_3_0 = (RuleCall)cRec_predAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cMsgInPartsAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cMsgInPartsAttributeToSetParserRuleCall_6_0_0 = (RuleCall)cMsgInPartsAssignment_6_0.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final Keyword cCommaKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Assignment cMsgInPartsAssignment_6_1_1 = (Assignment)cGroup_6_1.eContents().get(1);
		private final RuleCall cMsgInPartsAttributeToSetParserRuleCall_6_1_1_0 = (RuleCall)cMsgInPartsAssignment_6_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cPrintKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Assignment cOutputAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cOutputSTRINGTerminalRuleCall_8_2_0 = (RuleCall)cOutputAssignment_8_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8_3 = (Keyword)cGroup_8.eContents().get(3);
		private final Keyword cFullStopKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cNextAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cNextNZCProcessParserRuleCall_10_0 = (RuleCall)cNextAssignment_10.eContents().get(0);
		
		//InputProcess Process:
		//	{InputProcess} "receive" "(" rec_pred=Expression ")" "{" (msgInParts+=AttributeToSet (","
		//	msgInParts+=AttributeToSet)*)? "}" ("print" "(" output=STRING ")")?
		//	"." next=NZCProcess;
		@Override public ParserRule getRule() { return rule; }
		
		//{InputProcess} "receive" "(" rec_pred=Expression ")" "{" (msgInParts+=AttributeToSet ("," msgInParts+=AttributeToSet)*)?
		//"}" ("print" "(" output=STRING ")")? "." next=NZCProcess
		public Group getGroup() { return cGroup; }
		
		//{InputProcess}
		public Action getInputProcessAction_0() { return cInputProcessAction_0; }
		
		//"receive"
		public Keyword getReceiveKeyword_1() { return cReceiveKeyword_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//rec_pred=Expression
		public Assignment getRec_predAssignment_3() { return cRec_predAssignment_3; }
		
		//Expression
		public RuleCall getRec_predExpressionParserRuleCall_3_0() { return cRec_predExpressionParserRuleCall_3_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//(msgInParts+=AttributeToSet ("," msgInParts+=AttributeToSet)*)?
		public Group getGroup_6() { return cGroup_6; }
		
		//msgInParts+=AttributeToSet
		public Assignment getMsgInPartsAssignment_6_0() { return cMsgInPartsAssignment_6_0; }
		
		//AttributeToSet
		public RuleCall getMsgInPartsAttributeToSetParserRuleCall_6_0_0() { return cMsgInPartsAttributeToSetParserRuleCall_6_0_0; }
		
		//("," msgInParts+=AttributeToSet)*
		public Group getGroup_6_1() { return cGroup_6_1; }
		
		//","
		public Keyword getCommaKeyword_6_1_0() { return cCommaKeyword_6_1_0; }
		
		//msgInParts+=AttributeToSet
		public Assignment getMsgInPartsAssignment_6_1_1() { return cMsgInPartsAssignment_6_1_1; }
		
		//AttributeToSet
		public RuleCall getMsgInPartsAttributeToSetParserRuleCall_6_1_1_0() { return cMsgInPartsAttributeToSetParserRuleCall_6_1_1_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
		
		//("print" "(" output=STRING ")")?
		public Group getGroup_8() { return cGroup_8; }
		
		//"print"
		public Keyword getPrintKeyword_8_0() { return cPrintKeyword_8_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_8_1() { return cLeftParenthesisKeyword_8_1; }
		
		//output=STRING
		public Assignment getOutputAssignment_8_2() { return cOutputAssignment_8_2; }
		
		//STRING
		public RuleCall getOutputSTRINGTerminalRuleCall_8_2_0() { return cOutputSTRINGTerminalRuleCall_8_2_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_8_3() { return cRightParenthesisKeyword_8_3; }
		
		//"."
		public Keyword getFullStopKeyword_9() { return cFullStopKeyword_9; }
		
		//next=NZCProcess
		public Assignment getNextAssignment_10() { return cNextAssignment_10; }
		
		//NZCProcess
		public RuleCall getNextNZCProcessParserRuleCall_10_0() { return cNextNZCProcessParserRuleCall_10_0; }
	}
	public class OutputProcessPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.OutputProcessPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSendKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cMsgOutPartsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cMsgOutPartsExpressionParserRuleCall_2_0_0 = (RuleCall)cMsgOutPartsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cMsgOutPartsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cMsgOutPartsExpressionParserRuleCall_2_1_1_0 = (RuleCall)cMsgOutPartsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cCommercialAtKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cSend_predAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cSend_predExpressionParserRuleCall_6_0 = (RuleCall)cSend_predAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cPrintKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Assignment cOutputAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cOutputSTRINGTerminalRuleCall_8_2_0 = (RuleCall)cOutputAssignment_8_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8_3 = (Keyword)cGroup_8.eContents().get(3);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cSleepKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Assignment cMsecAssignment_9_2 = (Assignment)cGroup_9.eContents().get(2);
		private final RuleCall cMsecINTTerminalRuleCall_9_2_0 = (RuleCall)cMsecAssignment_9_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_9_3 = (Keyword)cGroup_9.eContents().get(3);
		private final Keyword cFullStopKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cNextAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cNextProcParserRuleCall_11_0 = (RuleCall)cNextAssignment_11.eContents().get(0);
		
		//fragment OutputProcessPart:
		//	"send" "{" (msgOutParts+=Expression ("," msgOutParts+=Expression)*)? "}" "@" "(" send_pred=Expression ")" ("print" "("
		//	output=STRING ")")? ("sleep" "(" msec=INT ")")? "." next=Proc;
		@Override public ParserRule getRule() { return rule; }
		
		//"send" "{" (msgOutParts+=Expression ("," msgOutParts+=Expression)*)? "}" "@" "(" send_pred=Expression ")" ("print" "("
		//output=STRING ")")? ("sleep" "(" msec=INT ")")? "." next=Proc
		public Group getGroup() { return cGroup; }
		
		//"send"
		public Keyword getSendKeyword_0() { return cSendKeyword_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(msgOutParts+=Expression ("," msgOutParts+=Expression)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//msgOutParts+=Expression
		public Assignment getMsgOutPartsAssignment_2_0() { return cMsgOutPartsAssignment_2_0; }
		
		//Expression
		public RuleCall getMsgOutPartsExpressionParserRuleCall_2_0_0() { return cMsgOutPartsExpressionParserRuleCall_2_0_0; }
		
		//("," msgOutParts+=Expression)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//msgOutParts+=Expression
		public Assignment getMsgOutPartsAssignment_2_1_1() { return cMsgOutPartsAssignment_2_1_1; }
		
		//Expression
		public RuleCall getMsgOutPartsExpressionParserRuleCall_2_1_1_0() { return cMsgOutPartsExpressionParserRuleCall_2_1_1_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
		
		//"@"
		public Keyword getCommercialAtKeyword_4() { return cCommercialAtKeyword_4; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_5() { return cLeftParenthesisKeyword_5; }
		
		//send_pred=Expression
		public Assignment getSend_predAssignment_6() { return cSend_predAssignment_6; }
		
		//Expression
		public RuleCall getSend_predExpressionParserRuleCall_6_0() { return cSend_predExpressionParserRuleCall_6_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
		
		//("print" "(" output=STRING ")")?
		public Group getGroup_8() { return cGroup_8; }
		
		//"print"
		public Keyword getPrintKeyword_8_0() { return cPrintKeyword_8_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_8_1() { return cLeftParenthesisKeyword_8_1; }
		
		//output=STRING
		public Assignment getOutputAssignment_8_2() { return cOutputAssignment_8_2; }
		
		//STRING
		public RuleCall getOutputSTRINGTerminalRuleCall_8_2_0() { return cOutputSTRINGTerminalRuleCall_8_2_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_8_3() { return cRightParenthesisKeyword_8_3; }
		
		//("sleep" "(" msec=INT ")")?
		public Group getGroup_9() { return cGroup_9; }
		
		//"sleep"
		public Keyword getSleepKeyword_9_0() { return cSleepKeyword_9_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_9_1() { return cLeftParenthesisKeyword_9_1; }
		
		//msec=INT
		public Assignment getMsecAssignment_9_2() { return cMsecAssignment_9_2; }
		
		//INT
		public RuleCall getMsecINTTerminalRuleCall_9_2_0() { return cMsecINTTerminalRuleCall_9_2_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_9_3() { return cRightParenthesisKeyword_9_3; }
		
		//"."
		public Keyword getFullStopKeyword_10() { return cFullStopKeyword_10; }
		
		//next=Proc
		public Assignment getNextAssignment_11() { return cNextAssignment_11; }
		
		//Proc
		public RuleCall getNextProcParserRuleCall_11_0() { return cNextProcParserRuleCall_11_0; }
	}
	public class IfProcessesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.IfProcesses");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIfProcessesAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cBranchesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBranchesIfBranchProcessParserRuleCall_1_0 = (RuleCall)cBranchesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cElseKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cBranchesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cBranchesIfBranchProcessParserRuleCall_2_1_0 = (RuleCall)cBranchesAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cElseKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cBranchesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cBranchesElseBranchProcessParserRuleCall_3_1_0 = (RuleCall)cBranchesAssignment_3_1.eContents().get(0);
		
		//IfProcesses Process:
		//	{IfProcesses} branches+=IfBranchProcess ("else" branches+=IfBranchProcess)* ("else" branches+=ElseBranchProcess)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{IfProcesses} branches+=IfBranchProcess ("else" branches+=IfBranchProcess)* ("else" branches+=ElseBranchProcess)?
		public Group getGroup() { return cGroup; }
		
		//{IfProcesses}
		public Action getIfProcessesAction_0() { return cIfProcessesAction_0; }
		
		//branches+=IfBranchProcess
		public Assignment getBranchesAssignment_1() { return cBranchesAssignment_1; }
		
		//IfBranchProcess
		public RuleCall getBranchesIfBranchProcessParserRuleCall_1_0() { return cBranchesIfBranchProcessParserRuleCall_1_0; }
		
		//("else" branches+=IfBranchProcess)*
		public Group getGroup_2() { return cGroup_2; }
		
		//"else"
		public Keyword getElseKeyword_2_0() { return cElseKeyword_2_0; }
		
		//branches+=IfBranchProcess
		public Assignment getBranchesAssignment_2_1() { return cBranchesAssignment_2_1; }
		
		//IfBranchProcess
		public RuleCall getBranchesIfBranchProcessParserRuleCall_2_1_0() { return cBranchesIfBranchProcessParserRuleCall_2_1_0; }
		
		//("else" branches+=ElseBranchProcess)?
		public Group getGroup_3() { return cGroup_3; }
		
		//"else"
		public Keyword getElseKeyword_3_0() { return cElseKeyword_3_0; }
		
		//branches+=ElseBranchProcess
		public Assignment getBranchesAssignment_3_1() { return cBranchesAssignment_3_1; }
		
		//ElseBranchProcess
		public RuleCall getBranchesElseBranchProcessParserRuleCall_3_1_0() { return cBranchesElseBranchProcessParserRuleCall_3_1_0; }
	}
	public class IfBranchProcessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.IfBranchProcess");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIfBranchProcessAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCondAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCondPreconditionsParserRuleCall_2_0 = (RuleCall)cCondAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cThenAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cThenPredOutputProcessOrInputProcessParserRuleCall_4_0 = (RuleCall)cThenAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//IfBranchProcess Process:
		//	{IfBranchProcess} "if" cond=Preconditions '{' then=PredOutputProcessOrInputProcess '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{IfBranchProcess} "if" cond=Preconditions '{' then=PredOutputProcessOrInputProcess '}'
		public Group getGroup() { return cGroup; }
		
		//{IfBranchProcess}
		public Action getIfBranchProcessAction_0() { return cIfBranchProcessAction_0; }
		
		//"if"
		public Keyword getIfKeyword_1() { return cIfKeyword_1; }
		
		//cond=Preconditions
		public Assignment getCondAssignment_2() { return cCondAssignment_2; }
		
		//Preconditions
		public RuleCall getCondPreconditionsParserRuleCall_2_0() { return cCondPreconditionsParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//then=PredOutputProcessOrInputProcess
		public Assignment getThenAssignment_4() { return cThenAssignment_4; }
		
		//PredOutputProcessOrInputProcess
		public RuleCall getThenPredOutputProcessOrInputProcessParserRuleCall_4_0() { return cThenPredOutputProcessOrInputProcessParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ElseBranchProcessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.ElseBranchProcess");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIfBranchProcessAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cThenAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cThenPredOutputProcessOrInputProcessParserRuleCall_2_0 = (RuleCall)cThenAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ElseBranchProcess Process:
		//	{IfBranchProcess} '{' then=PredOutputProcessOrInputProcess '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{IfBranchProcess} '{' then=PredOutputProcessOrInputProcess '}'
		public Group getGroup() { return cGroup; }
		
		//{IfBranchProcess}
		public Action getIfBranchProcessAction_0() { return cIfBranchProcessAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//then=PredOutputProcessOrInputProcess
		public Assignment getThenAssignment_2() { return cThenAssignment_2; }
		
		//PredOutputProcessOrInputProcess
		public RuleCall getThenPredOutputProcessOrInputProcessParserRuleCall_2_0() { return cThenPredOutputProcessOrInputProcessParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class UpdateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.Update");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVarsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarsAttributeToSetParserRuleCall_1_0 = (RuleCall)cVarsAssignment_1.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValsExpressionParserRuleCall_3_0 = (RuleCall)cValsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cVarsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cVarsAttributeToSetParserRuleCall_4_1_0 = (RuleCall)cVarsAssignment_4_1.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cValsAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cValsExpressionParserRuleCall_4_3_0 = (RuleCall)cValsAssignment_4_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Update:
		//	"[" vars+=AttributeToSet ":=" vals+=Expression ("," vars+=AttributeToSet ":=" vals+=Expression)* "]";
		@Override public ParserRule getRule() { return rule; }
		
		//"[" vars+=AttributeToSet ":=" vals+=Expression ("," vars+=AttributeToSet ":=" vals+=Expression)* "]"
		public Group getGroup() { return cGroup; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//vars+=AttributeToSet
		public Assignment getVarsAssignment_1() { return cVarsAssignment_1; }
		
		//AttributeToSet
		public RuleCall getVarsAttributeToSetParserRuleCall_1_0() { return cVarsAttributeToSetParserRuleCall_1_0; }
		
		//":="
		public Keyword getColonEqualsSignKeyword_2() { return cColonEqualsSignKeyword_2; }
		
		//vals+=Expression
		public Assignment getValsAssignment_3() { return cValsAssignment_3; }
		
		//Expression
		public RuleCall getValsExpressionParserRuleCall_3_0() { return cValsExpressionParserRuleCall_3_0; }
		
		//("," vars+=AttributeToSet ":=" vals+=Expression)*
		public Group getGroup_4() { return cGroup_4; }
		
		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//vars+=AttributeToSet
		public Assignment getVarsAssignment_4_1() { return cVarsAssignment_4_1; }
		
		//AttributeToSet
		public RuleCall getVarsAttributeToSetParserRuleCall_4_1_0() { return cVarsAttributeToSetParserRuleCall_4_1_0; }
		
		//":="
		public Keyword getColonEqualsSignKeyword_4_2() { return cColonEqualsSignKeyword_4_2; }
		
		//vals+=Expression
		public Assignment getValsAssignment_4_3() { return cValsAssignment_4_3; }
		
		//Expression
		public RuleCall getValsExpressionParserRuleCall_4_3_0() { return cValsExpressionParserRuleCall_4_3_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }
	}
	public class AwarenessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.Awareness");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWaitKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cUntilKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPredAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPredExpressionParserRuleCall_3_0 = (RuleCall)cPredAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Awareness:
		//	"wait" "until" "(" pred=Expression ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"wait" "until" "(" pred=Expression ")"
		public Group getGroup() { return cGroup; }
		
		//"wait"
		public Keyword getWaitKeyword_0() { return cWaitKeyword_0; }
		
		//"until"
		public Keyword getUntilKeyword_1() { return cUntilKeyword_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//pred=Expression
		public Assignment getPredAssignment_3() { return cPredAssignment_3; }
		
		//Expression
		public RuleCall getPredExpressionParserRuleCall_3_0() { return cPredExpressionParserRuleCall_3_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class NZCProcessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.NZCProcess");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cProcParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final RuleCall cZeroProcessParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCallProcessParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//NZCProcess Process:
		//	"(" Proc ")" | ZeroProcess | CallProcess;
		@Override public ParserRule getRule() { return rule; }
		
		//"(" Proc ")" | ZeroProcess | CallProcess
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"(" Proc ")"
		public Group getGroup_0() { return cGroup_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//Proc
		public RuleCall getProcParserRuleCall_0_1() { return cProcParserRuleCall_0_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }
		
		//ZeroProcess
		public RuleCall getZeroProcessParserRuleCall_1() { return cZeroProcessParserRuleCall_1; }
		
		//CallProcess
		public RuleCall getCallProcessParserRuleCall_2() { return cCallProcessParserRuleCall_2; }
	}
	public class NProcessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.NProcess");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cProcParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final RuleCall cZeroProcessParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//NProcess Process:
		//	"(" Proc ")" | ZeroProcess //| CallProcess
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"(" Proc ")" | ZeroProcess
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"(" Proc ")"
		public Group getGroup_0() { return cGroup_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//Proc
		public RuleCall getProcParserRuleCall_0_1() { return cProcParserRuleCall_0_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }
		
		//ZeroProcess
		public RuleCall getZeroProcessParserRuleCall_1() { return cZeroProcessParserRuleCall_1; }
	}
	public class CallProcessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.CallProcess");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCallProcessAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cProcnameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cProcnameProcessDefinitionCrossReference_1_0 = (CrossReference)cProcnameAssignment_1.eContents().get(0);
		private final RuleCall cProcnameProcessDefinitionIDTerminalRuleCall_1_0_1 = (RuleCall)cProcnameProcessDefinitionCrossReference_1_0.eContents().get(1);
		
		//CallProcess Process:
		//	{CallProcess} procname=[ProcessDefinition];
		@Override public ParserRule getRule() { return rule; }
		
		//{CallProcess} procname=[ProcessDefinition]
		public Group getGroup() { return cGroup; }
		
		//{CallProcess}
		public Action getCallProcessAction_0() { return cCallProcessAction_0; }
		
		//procname=[ProcessDefinition]
		public Assignment getProcnameAssignment_1() { return cProcnameAssignment_1; }
		
		//[ProcessDefinition]
		public CrossReference getProcnameProcessDefinitionCrossReference_1_0() { return cProcnameProcessDefinitionCrossReference_1_0; }
		
		//ID
		public RuleCall getProcnameProcessDefinitionIDTerminalRuleCall_1_0_1() { return cProcnameProcessDefinitionIDTerminalRuleCall_1_0_1; }
	}
	public class ZeroProcessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.ZeroProcess");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cZeroProcessAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNilKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ZeroProcess Process:
		//	{ZeroProcess} "nil";
		@Override public ParserRule getRule() { return rule; }
		
		//{ZeroProcess} "nil"
		public Group getGroup() { return cGroup; }
		
		//{ZeroProcess}
		public Action getZeroProcessAction_0() { return cZeroProcessAction_0; }
		
		//"nil"
		public Keyword getNilKeyword_1() { return cNilKeyword_1; }
	}
	public class ProcessDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.ProcessDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProcKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cProcAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cProcProcParserRuleCall_3_0 = (RuleCall)cProcAssignment_3.eContents().get(0);
		
		//ProcessDefinition:
		//	'proc' name=ID '=' proc=Proc;
		@Override public ParserRule getRule() { return rule; }
		
		//'proc' name=ID '=' proc=Proc
		public Group getGroup() { return cGroup; }
		
		//'proc'
		public Keyword getProcKeyword_0() { return cProcKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//proc=Proc
		public Assignment getProcAssignment_3() { return cProcAssignment_3; }
		
		//Proc
		public RuleCall getProcProcParserRuleCall_3_0() { return cProcProcParserRuleCall_3_0; }
	}
	public class EnvInitValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.EnvInitValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cIntConstantAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cStringConstantAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cBoolConstantAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Alternatives cValueAlternatives_2_1_0 = (Alternatives)cValueAssignment_2_1.eContents().get(0);
		private final Keyword cValueTrueKeyword_2_1_0_0 = (Keyword)cValueAlternatives_2_1_0.eContents().get(0);
		private final Keyword cValueFalseKeyword_2_1_0_1 = (Keyword)cValueAlternatives_2_1_0.eContents().get(1);
		
		//// Component
		//EnvInitValue Expression:
		//	{IntConstant} value=INT | {StringConstant} value=STRING | {BoolConstant} value=('true' | 'false');
		@Override public ParserRule getRule() { return rule; }
		
		//{IntConstant} value=INT | {StringConstant} value=STRING | {BoolConstant} value=('true' | 'false')
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{IntConstant} value=INT
		public Group getGroup_0() { return cGroup_0; }
		
		//{IntConstant}
		public Action getIntConstantAction_0_0() { return cIntConstantAction_0_0; }
		
		//value=INT
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0_1_0() { return cValueINTTerminalRuleCall_0_1_0; }
		
		//{StringConstant} value=STRING
		public Group getGroup_1() { return cGroup_1; }
		
		//{StringConstant}
		public Action getStringConstantAction_1_0() { return cStringConstantAction_1_0; }
		
		//value=STRING
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_1_0() { return cValueSTRINGTerminalRuleCall_1_1_0; }
		
		//{BoolConstant} value=('true' | 'false')
		public Group getGroup_2() { return cGroup_2; }
		
		//{BoolConstant}
		public Action getBoolConstantAction_2_0() { return cBoolConstantAction_2_0; }
		
		//value=('true' | 'false')
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }
		
		//('true' | 'false')
		public Alternatives getValueAlternatives_2_1_0() { return cValueAlternatives_2_1_0; }
		
		//'true'
		public Keyword getValueTrueKeyword_2_1_0_0() { return cValueTrueKeyword_2_1_0_0; }
		
		//'false'
		public Keyword getValueFalseKeyword_2_1_0_1() { return cValueFalseKeyword_2_1_0_1; }
	}
	public class EnvironmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.Environment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEnvironmentAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cAttrsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cAttrsIDTerminalRuleCall_2_0_0 = (RuleCall)cAttrsAssignment_2_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cValsAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cValsEnvInitValueParserRuleCall_2_2_0 = (RuleCall)cValsAssignment_2_2.eContents().get(0);
		private final Group cGroup_2_3 = (Group)cGroup_2.eContents().get(3);
		private final Keyword cCommaKeyword_2_3_0 = (Keyword)cGroup_2_3.eContents().get(0);
		private final Assignment cAttrsAssignment_2_3_1 = (Assignment)cGroup_2_3.eContents().get(1);
		private final RuleCall cAttrsIDTerminalRuleCall_2_3_1_0 = (RuleCall)cAttrsAssignment_2_3_1.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_2_3_2 = (Keyword)cGroup_2_3.eContents().get(2);
		private final Assignment cValsAssignment_2_3_3 = (Assignment)cGroup_2_3.eContents().get(3);
		private final RuleCall cValsEnvInitValueParserRuleCall_2_3_3_0 = (RuleCall)cValsAssignment_2_3_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Environment:
		//	{Environment} "{" (attrs+=ID ':=' vals+=EnvInitValue ("," attrs+=ID ':=' vals+=EnvInitValue)*)? "}";
		@Override public ParserRule getRule() { return rule; }
		
		//{Environment} "{" (attrs+=ID ':=' vals+=EnvInitValue ("," attrs+=ID ':=' vals+=EnvInitValue)*)? "}"
		public Group getGroup() { return cGroup; }
		
		//{Environment}
		public Action getEnvironmentAction_0() { return cEnvironmentAction_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(attrs+=ID ':=' vals+=EnvInitValue ("," attrs+=ID ':=' vals+=EnvInitValue)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//attrs+=ID
		public Assignment getAttrsAssignment_2_0() { return cAttrsAssignment_2_0; }
		
		//ID
		public RuleCall getAttrsIDTerminalRuleCall_2_0_0() { return cAttrsIDTerminalRuleCall_2_0_0; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_2_1() { return cColonEqualsSignKeyword_2_1; }
		
		//vals+=EnvInitValue
		public Assignment getValsAssignment_2_2() { return cValsAssignment_2_2; }
		
		//EnvInitValue
		public RuleCall getValsEnvInitValueParserRuleCall_2_2_0() { return cValsEnvInitValueParserRuleCall_2_2_0; }
		
		//("," attrs+=ID ':=' vals+=EnvInitValue)*
		public Group getGroup_2_3() { return cGroup_2_3; }
		
		//","
		public Keyword getCommaKeyword_2_3_0() { return cCommaKeyword_2_3_0; }
		
		//attrs+=ID
		public Assignment getAttrsAssignment_2_3_1() { return cAttrsAssignment_2_3_1; }
		
		//ID
		public RuleCall getAttrsIDTerminalRuleCall_2_3_1_0() { return cAttrsIDTerminalRuleCall_2_3_1_0; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_2_3_2() { return cColonEqualsSignKeyword_2_3_2; }
		
		//vals+=EnvInitValue
		public Assignment getValsAssignment_2_3_3() { return cValsAssignment_2_3_3; }
		
		//EnvInitValue
		public RuleCall getValsEnvInitValueParserRuleCall_2_3_3_0() { return cValsEnvInitValueParserRuleCall_2_3_3_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class ComponentDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.ComponentDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cComponentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEnvAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEnvEnvironmentParserRuleCall_1_0 = (RuleCall)cEnvAssignment_1.eContents().get(0);
		private final Assignment cProcAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cProcProcessDefinitionCrossReference_2_0 = (CrossReference)cProcAssignment_2.eContents().get(0);
		private final RuleCall cProcProcessDefinitionIDTerminalRuleCall_2_0_1 = (RuleCall)cProcProcessDefinitionCrossReference_2_0.eContents().get(1);
		private final Keyword cAtKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cAddressAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAddressSTRINGTerminalRuleCall_4_0 = (RuleCall)cAddressAssignment_4.eContents().get(0);
		
		//ComponentDefinition:
		//	"component" env=Environment proc=[ProcessDefinition] 'at' address=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//"component" env=Environment proc=[ProcessDefinition] 'at' address=STRING
		public Group getGroup() { return cGroup; }
		
		//"component"
		public Keyword getComponentKeyword_0() { return cComponentKeyword_0; }
		
		//env=Environment
		public Assignment getEnvAssignment_1() { return cEnvAssignment_1; }
		
		//Environment
		public RuleCall getEnvEnvironmentParserRuleCall_1_0() { return cEnvEnvironmentParserRuleCall_1_0; }
		
		//proc=[ProcessDefinition]
		public Assignment getProcAssignment_2() { return cProcAssignment_2; }
		
		//[ProcessDefinition]
		public CrossReference getProcProcessDefinitionCrossReference_2_0() { return cProcProcessDefinitionCrossReference_2_0; }
		
		//ID
		public RuleCall getProcProcessDefinitionIDTerminalRuleCall_2_0_1() { return cProcProcessDefinitionIDTerminalRuleCall_2_0_1; }
		
		//'at'
		public Keyword getAtKeyword_3() { return cAtKeyword_3; }
		
		//address=STRING
		public Assignment getAddressAssignment_4() { return cAddressAssignment_4; }
		
		//STRING
		public RuleCall getAddressSTRINGTerminalRuleCall_4_0() { return cAddressSTRINGTerminalRuleCall_4_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.Expression");
		private final RuleCall cOrParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		///* 
		//// Predicate
		//Predicate returns Pred:
		//	And ({Predicate.or += current} "||" or += And)*
		//;
		//And returns Pred:
		//	Not ({And.and += current} "&&" and += Not)*
		//;
		//Not returns Pred:
		//	Term | {Not} neg?="!" term = Term
		//;
		//Term returns Pred:
		//	Immediate | EqualityTest | "(" Predicate ")" 
		//;
		//Immediate returns Pred:
		//	{Immediate} (isTrue ?= "true" | "false")
		//;
		//EqualityTest returns Pred:
		//	{EqualityTest} op1 = (Value|RecAttribute) operand=("<"|">"|"<="|">="|"="|"!=") op2 = Value
		//;
		//*/ // Expression
		//Expression:
		//	Or;
		@Override public ParserRule getRule() { return rule; }
		
		//Or
		public RuleCall getOrParserRuleCall() { return cOrParserRuleCall; }
	}
	public class OrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.Or");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cVerticalLineVerticalLineKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAndParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Or Expression:
		//	And ({Or.left=current} "||" right=And)?;
		@Override public ParserRule getRule() { return rule; }
		
		//And ({Or.left=current} "||" right=And)?
		public Group getGroup() { return cGroup; }
		
		//And
		public RuleCall getAndParserRuleCall_0() { return cAndParserRuleCall_0; }
		
		//({Or.left=current} "||" right=And)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{Or.left=current}
		public Action getOrLeftAction_1_0() { return cOrLeftAction_1_0; }
		
		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_1_1() { return cVerticalLineVerticalLineKeyword_1_1; }
		
		//right=And
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//And
		public RuleCall getRightAndParserRuleCall_1_2_0() { return cRightAndParserRuleCall_1_2_0; }
	}
	public class AndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.And");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEqualityParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAmpersandAmpersandKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightEqualityParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//And Expression:
		//	Equality ({And.left=current} "&&" right=Equality)?;
		@Override public ParserRule getRule() { return rule; }
		
		//Equality ({And.left=current} "&&" right=Equality)?
		public Group getGroup() { return cGroup; }
		
		//Equality
		public RuleCall getEqualityParserRuleCall_0() { return cEqualityParserRuleCall_0; }
		
		//({And.left=current} "&&" right=Equality)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{And.left=current}
		public Action getAndLeftAction_1_0() { return cAndLeftAction_1_0; }
		
		//"&&"
		public Keyword getAmpersandAmpersandKeyword_1_1() { return cAmpersandAmpersandKeyword_1_1; }
		
		//right=Equality
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Equality
		public RuleCall getRightEqualityParserRuleCall_1_2_0() { return cRightEqualityParserRuleCall_1_2_0; }
	}
	public class EqualityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.Equality");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cComparisonParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cEqualityLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpEqualsSignEqualsSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpExclamationMarkEqualsSignKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightComparisonParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Equality Expression:
		//	Comparison ({Equality.left=current} op=("==" | "!=") right=Comparison)?;
		@Override public ParserRule getRule() { return rule; }
		
		//Comparison ({Equality.left=current} op=("==" | "!=") right=Comparison)?
		public Group getGroup() { return cGroup; }
		
		//Comparison
		public RuleCall getComparisonParserRuleCall_0() { return cComparisonParserRuleCall_0; }
		
		//({Equality.left=current} op=("==" | "!=") right=Comparison)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{Equality.left=current}
		public Action getEqualityLeftAction_1_0() { return cEqualityLeftAction_1_0; }
		
		//op=("==" | "!=")
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//("==" | "!=")
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//"=="
		public Keyword getOpEqualsSignEqualsSignKeyword_1_1_0_0() { return cOpEqualsSignEqualsSignKeyword_1_1_0_0; }
		
		//"!="
		public Keyword getOpExclamationMarkEqualsSignKeyword_1_1_0_1() { return cOpExclamationMarkEqualsSignKeyword_1_1_0_1; }
		
		//right=Comparison
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Comparison
		public RuleCall getRightComparisonParserRuleCall_1_2_0() { return cRightComparisonParserRuleCall_1_2_0; }
	}
	public class ComparisonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.Comparison");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPlusOrMinusParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cComparisonLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpGreaterThanSignEqualsSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpLessThanSignEqualsSignKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOpGreaterThanSignKeyword_1_1_0_2 = (Keyword)cOpAlternatives_1_1_0.eContents().get(2);
		private final Keyword cOpLessThanSignKeyword_1_1_0_3 = (Keyword)cOpAlternatives_1_1_0.eContents().get(3);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPlusOrMinusParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Comparison Expression:
		//	PlusOrMinus ({Comparison.left=current} op=(">=" | "<=" | ">" | "<") right=PlusOrMinus)?;
		@Override public ParserRule getRule() { return rule; }
		
		//PlusOrMinus ({Comparison.left=current} op=(">=" | "<=" | ">" | "<") right=PlusOrMinus)?
		public Group getGroup() { return cGroup; }
		
		//PlusOrMinus
		public RuleCall getPlusOrMinusParserRuleCall_0() { return cPlusOrMinusParserRuleCall_0; }
		
		//({Comparison.left=current} op=(">=" | "<=" | ">" | "<") right=PlusOrMinus)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{Comparison.left=current}
		public Action getComparisonLeftAction_1_0() { return cComparisonLeftAction_1_0; }
		
		//op=(">=" | "<=" | ">" | "<")
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//(">=" | "<=" | ">" | "<")
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//">="
		public Keyword getOpGreaterThanSignEqualsSignKeyword_1_1_0_0() { return cOpGreaterThanSignEqualsSignKeyword_1_1_0_0; }
		
		//"<="
		public Keyword getOpLessThanSignEqualsSignKeyword_1_1_0_1() { return cOpLessThanSignEqualsSignKeyword_1_1_0_1; }
		
		//">"
		public Keyword getOpGreaterThanSignKeyword_1_1_0_2() { return cOpGreaterThanSignKeyword_1_1_0_2; }
		
		//"<"
		public Keyword getOpLessThanSignKeyword_1_1_0_3() { return cOpLessThanSignKeyword_1_1_0_3; }
		
		//right=PlusOrMinus
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//PlusOrMinus
		public RuleCall getRightPlusOrMinusParserRuleCall_1_2_0() { return cRightPlusOrMinusParserRuleCall_1_2_0; }
	}
	public class PlusOrMinusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.PlusOrMinus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMulOrDivParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cPlusLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cMinusLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Group cGroup_1_0_2 = (Group)cAlternatives_1_0.eContents().get(2);
		private final Action cConcatenateLeftAction_1_0_2_0 = (Action)cGroup_1_0_2.eContents().get(0);
		private final Keyword cPlusSignPlusSignKeyword_1_0_2_1 = (Keyword)cGroup_1_0_2.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightMulOrDivParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//PlusOrMinus Expression:
		//	MulOrDiv (({Plus.left=current} '+' | {Minus.left=current} '-' | {Concatenate.left=current} '++') right=MulOrDiv)?;
		@Override public ParserRule getRule() { return rule; }
		
		//MulOrDiv (({Plus.left=current} '+' | {Minus.left=current} '-' | {Concatenate.left=current} '++') right=MulOrDiv)?
		public Group getGroup() { return cGroup; }
		
		//MulOrDiv
		public RuleCall getMulOrDivParserRuleCall_0() { return cMulOrDivParserRuleCall_0; }
		
		//(({Plus.left=current} '+' | {Minus.left=current} '-' | {Concatenate.left=current} '++') right=MulOrDiv)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{Plus.left=current} '+' | {Minus.left=current} '-' | {Concatenate.left=current} '++'
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{Plus.left=current} '+'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{Plus.left=current}
		public Action getPlusLeftAction_1_0_0_0() { return cPlusLeftAction_1_0_0_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_0_0_1() { return cPlusSignKeyword_1_0_0_1; }
		
		//{Minus.left=current} '-'
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{Minus.left=current}
		public Action getMinusLeftAction_1_0_1_0() { return cMinusLeftAction_1_0_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_0_1_1() { return cHyphenMinusKeyword_1_0_1_1; }
		
		//{Concatenate.left=current} '++'
		public Group getGroup_1_0_2() { return cGroup_1_0_2; }
		
		//{Concatenate.left=current}
		public Action getConcatenateLeftAction_1_0_2_0() { return cConcatenateLeftAction_1_0_2_0; }
		
		//'++'
		public Keyword getPlusSignPlusSignKeyword_1_0_2_1() { return cPlusSignPlusSignKeyword_1_0_2_1; }
		
		//right=MulOrDiv
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//MulOrDiv
		public RuleCall getRightMulOrDivParserRuleCall_1_1_0() { return cRightMulOrDivParserRuleCall_1_1_0; }
	}
	public class MulOrDivElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.MulOrDiv");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cMulOrDivLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpAsteriskKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpSolidusKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPrimaryParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//MulOrDiv Expression:
		//	Primary ({MulOrDiv.left=current} op=('*' | '/') right=Primary)?;
		@Override public ParserRule getRule() { return rule; }
		
		//Primary ({MulOrDiv.left=current} op=('*' | '/') right=Primary)?
		public Group getGroup() { return cGroup; }
		
		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }
		
		//({MulOrDiv.left=current} op=('*' | '/') right=Primary)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{MulOrDiv.left=current}
		public Action getMulOrDivLeftAction_1_0() { return cMulOrDivLeftAction_1_0; }
		
		//op=('*' | '/')
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//('*' | '/')
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//'*'
		public Keyword getOpAsteriskKeyword_1_1_0_0() { return cOpAsteriskKeyword_1_1_0_0; }
		
		//'/'
		public Keyword getOpSolidusKeyword_1_1_0_1() { return cOpSolidusKeyword_1_1_0_1; }
		
		//right=Primary
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Primary
		public RuleCall getRightPrimaryParserRuleCall_1_2_0() { return cRightPrimaryParserRuleCall_1_2_0; }
	}
	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cNotAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cExpressionAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cExpressionPrimaryParserRuleCall_1_3_0 = (RuleCall)cExpressionAssignment_1_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final RuleCall cAtomicParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Primary Expression:
		//	'(' Expression ')' | {Not} "!" "(" expression=Primary ")" | Atomic;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' Expression ')' | {Not} "!" "(" expression=Primary ")" | Atomic
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'(' Expression ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_0_1() { return cExpressionParserRuleCall_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }
		
		//{Not} "!" "(" expression=Primary ")"
		public Group getGroup_1() { return cGroup_1; }
		
		//{Not}
		public Action getNotAction_1_0() { return cNotAction_1_0; }
		
		//"!"
		public Keyword getExclamationMarkKeyword_1_1() { return cExclamationMarkKeyword_1_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1_2() { return cLeftParenthesisKeyword_1_2; }
		
		//expression=Primary
		public Assignment getExpressionAssignment_1_3() { return cExpressionAssignment_1_3; }
		
		//Primary
		public RuleCall getExpressionPrimaryParserRuleCall_1_3_0() { return cExpressionPrimaryParserRuleCall_1_3_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_1_4() { return cRightParenthesisKeyword_1_4; }
		
		//Atomic
		public RuleCall getAtomicParserRuleCall_2() { return cAtomicParserRuleCall_2; }
	}
	public class LRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.LRef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFuncParamParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFuncVarDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//LRef:
		//	FuncParam | FuncVarDeclaration;
		@Override public ParserRule getRule() { return rule; }
		
		//FuncParam | FuncVarDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FuncParam
		public RuleCall getFuncParamParserRuleCall_0() { return cFuncParamParserRuleCall_0; }
		
		//FuncVarDeclaration
		public RuleCall getFuncVarDeclarationParserRuleCall_1() { return cFuncVarDeclarationParserRuleCall_1; }
	}
	public class AtomicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.Atomic");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cIntConstantAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cStringConstantAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cBoolConstantAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Alternatives cValueAlternatives_2_1_0 = (Alternatives)cValueAssignment_2_1.eContents().get(0);
		private final Keyword cValueTrueKeyword_2_1_0_0 = (Keyword)cValueAlternatives_2_1_0.eContents().get(0);
		private final Keyword cValueFalseKeyword_2_1_0_1 = (Keyword)cValueAlternatives_2_1_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cLocalVarRefAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cRefAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cRefLRefCrossReference_3_1_0 = (CrossReference)cRefAssignment_3_1.eContents().get(0);
		private final RuleCall cRefLRefIDTerminalRuleCall_3_1_0_1 = (RuleCall)cRefLRefCrossReference_3_1_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cLocalAttributeRefAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cProcKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Keyword cFullStopKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cAttributeAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cAttributeIDTerminalRuleCall_4_3_0 = (RuleCall)cAttributeAssignment_4_3.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cFunctionCallAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Assignment cFunctionAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cFunctionFuncDefinitionCrossReference_5_1_0 = (CrossReference)cFunctionAssignment_5_1.eContents().get(0);
		private final RuleCall cFunctionFuncDefinitionIDTerminalRuleCall_5_1_0_1 = (RuleCall)cFunctionFuncDefinitionCrossReference_5_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Group cGroup_5_3 = (Group)cGroup_5.eContents().get(3);
		private final Assignment cParamsAssignment_5_3_0 = (Assignment)cGroup_5_3.eContents().get(0);
		private final RuleCall cParamsExpressionParserRuleCall_5_3_0_0 = (RuleCall)cParamsAssignment_5_3_0.eContents().get(0);
		private final Group cGroup_5_3_1 = (Group)cGroup_5_3.eContents().get(1);
		private final Keyword cCommaKeyword_5_3_1_0 = (Keyword)cGroup_5_3_1.eContents().get(0);
		private final Assignment cParamsAssignment_5_3_1_1 = (Assignment)cGroup_5_3_1.eContents().get(1);
		private final RuleCall cParamsExpressionParserRuleCall_5_3_1_1_0 = (RuleCall)cParamsAssignment_5_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cComponentAttributeRefAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Keyword cThisKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Keyword cFullStopKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		private final Assignment cAttributeAssignment_6_3 = (Assignment)cGroup_6.eContents().get(3);
		private final RuleCall cAttributeIDTerminalRuleCall_6_3_0 = (RuleCall)cAttributeAssignment_6_3.eContents().get(0);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Action cRecAttributeRefAction_7_0 = (Action)cGroup_7.eContents().get(0);
		private final Keyword cReceiverKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Keyword cFullStopKeyword_7_2 = (Keyword)cGroup_7.eContents().get(2);
		private final Assignment cAttributeAssignment_7_3 = (Assignment)cGroup_7.eContents().get(3);
		private final RuleCall cAttributeIDTerminalRuleCall_7_3_0 = (RuleCall)cAttributeAssignment_7_3.eContents().get(0);
		
		//Atomic Expression:
		//	{IntConstant} value=INT | {StringConstant} value=STRING | {BoolConstant} value=('true' | 'false') | {LocalVarRef}
		//	ref=[LRef] | {LocalAttributeRef} "proc" "." attribute=ID | {FunctionCall} function=[FuncDefinition] "("
		//	(params+=Expression ("," params+=Expression)*)? ")" | {ComponentAttributeRef} "this" "." attribute=ID |
		//	{RecAttributeRef} "receiver" "." attribute=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//{IntConstant} value=INT | {StringConstant} value=STRING | {BoolConstant} value=('true' | 'false') | {LocalVarRef}
		//ref=[LRef] | {LocalAttributeRef} "proc" "." attribute=ID | {FunctionCall} function=[FuncDefinition] "("
		//(params+=Expression ("," params+=Expression)*)? ")" | {ComponentAttributeRef} "this" "." attribute=ID |
		//{RecAttributeRef} "receiver" "." attribute=ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{IntConstant} value=INT
		public Group getGroup_0() { return cGroup_0; }
		
		//{IntConstant}
		public Action getIntConstantAction_0_0() { return cIntConstantAction_0_0; }
		
		//value=INT
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0_1_0() { return cValueINTTerminalRuleCall_0_1_0; }
		
		//{StringConstant} value=STRING
		public Group getGroup_1() { return cGroup_1; }
		
		//{StringConstant}
		public Action getStringConstantAction_1_0() { return cStringConstantAction_1_0; }
		
		//value=STRING
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_1_0() { return cValueSTRINGTerminalRuleCall_1_1_0; }
		
		//{BoolConstant} value=('true' | 'false')
		public Group getGroup_2() { return cGroup_2; }
		
		//{BoolConstant}
		public Action getBoolConstantAction_2_0() { return cBoolConstantAction_2_0; }
		
		//value=('true' | 'false')
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }
		
		//('true' | 'false')
		public Alternatives getValueAlternatives_2_1_0() { return cValueAlternatives_2_1_0; }
		
		//'true'
		public Keyword getValueTrueKeyword_2_1_0_0() { return cValueTrueKeyword_2_1_0_0; }
		
		//'false'
		public Keyword getValueFalseKeyword_2_1_0_1() { return cValueFalseKeyword_2_1_0_1; }
		
		//{LocalVarRef} ref=[LRef]
		public Group getGroup_3() { return cGroup_3; }
		
		//{LocalVarRef}
		public Action getLocalVarRefAction_3_0() { return cLocalVarRefAction_3_0; }
		
		//ref=[LRef]
		public Assignment getRefAssignment_3_1() { return cRefAssignment_3_1; }
		
		//[LRef]
		public CrossReference getRefLRefCrossReference_3_1_0() { return cRefLRefCrossReference_3_1_0; }
		
		//ID
		public RuleCall getRefLRefIDTerminalRuleCall_3_1_0_1() { return cRefLRefIDTerminalRuleCall_3_1_0_1; }
		
		//{LocalAttributeRef} "proc" "." attribute=ID
		public Group getGroup_4() { return cGroup_4; }
		
		//{LocalAttributeRef}
		public Action getLocalAttributeRefAction_4_0() { return cLocalAttributeRefAction_4_0; }
		
		//"proc"
		public Keyword getProcKeyword_4_1() { return cProcKeyword_4_1; }
		
		//"."
		public Keyword getFullStopKeyword_4_2() { return cFullStopKeyword_4_2; }
		
		//attribute=ID
		public Assignment getAttributeAssignment_4_3() { return cAttributeAssignment_4_3; }
		
		//ID
		public RuleCall getAttributeIDTerminalRuleCall_4_3_0() { return cAttributeIDTerminalRuleCall_4_3_0; }
		
		//{FunctionCall} function=[FuncDefinition] "(" (params+=Expression ("," params+=Expression)*)? ")"
		public Group getGroup_5() { return cGroup_5; }
		
		//{FunctionCall}
		public Action getFunctionCallAction_5_0() { return cFunctionCallAction_5_0; }
		
		//function=[FuncDefinition]
		public Assignment getFunctionAssignment_5_1() { return cFunctionAssignment_5_1; }
		
		//[FuncDefinition]
		public CrossReference getFunctionFuncDefinitionCrossReference_5_1_0() { return cFunctionFuncDefinitionCrossReference_5_1_0; }
		
		//ID
		public RuleCall getFunctionFuncDefinitionIDTerminalRuleCall_5_1_0_1() { return cFunctionFuncDefinitionIDTerminalRuleCall_5_1_0_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_5_2() { return cLeftParenthesisKeyword_5_2; }
		
		//(params+=Expression ("," params+=Expression)*)?
		public Group getGroup_5_3() { return cGroup_5_3; }
		
		//params+=Expression
		public Assignment getParamsAssignment_5_3_0() { return cParamsAssignment_5_3_0; }
		
		//Expression
		public RuleCall getParamsExpressionParserRuleCall_5_3_0_0() { return cParamsExpressionParserRuleCall_5_3_0_0; }
		
		//("," params+=Expression)*
		public Group getGroup_5_3_1() { return cGroup_5_3_1; }
		
		//","
		public Keyword getCommaKeyword_5_3_1_0() { return cCommaKeyword_5_3_1_0; }
		
		//params+=Expression
		public Assignment getParamsAssignment_5_3_1_1() { return cParamsAssignment_5_3_1_1; }
		
		//Expression
		public RuleCall getParamsExpressionParserRuleCall_5_3_1_1_0() { return cParamsExpressionParserRuleCall_5_3_1_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_5_4() { return cRightParenthesisKeyword_5_4; }
		
		//{ComponentAttributeRef} "this" "." attribute=ID
		public Group getGroup_6() { return cGroup_6; }
		
		//{ComponentAttributeRef}
		public Action getComponentAttributeRefAction_6_0() { return cComponentAttributeRefAction_6_0; }
		
		//"this"
		public Keyword getThisKeyword_6_1() { return cThisKeyword_6_1; }
		
		//"."
		public Keyword getFullStopKeyword_6_2() { return cFullStopKeyword_6_2; }
		
		//attribute=ID
		public Assignment getAttributeAssignment_6_3() { return cAttributeAssignment_6_3; }
		
		//ID
		public RuleCall getAttributeIDTerminalRuleCall_6_3_0() { return cAttributeIDTerminalRuleCall_6_3_0; }
		
		//{RecAttributeRef} "receiver" "." attribute=ID
		public Group getGroup_7() { return cGroup_7; }
		
		//{RecAttributeRef}
		public Action getRecAttributeRefAction_7_0() { return cRecAttributeRefAction_7_0; }
		
		//"receiver"
		public Keyword getReceiverKeyword_7_1() { return cReceiverKeyword_7_1; }
		
		//"."
		public Keyword getFullStopKeyword_7_2() { return cFullStopKeyword_7_2; }
		
		//attribute=ID
		public Assignment getAttributeAssignment_7_3() { return cAttributeAssignment_7_3; }
		
		//ID
		public RuleCall getAttributeIDTerminalRuleCall_7_3_0() { return cAttributeIDTerminalRuleCall_7_3_0; }
	}
	public class AttributeToSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.AttributeToSet");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cComponentAttributeToSetAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cThisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cFullStopKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cAttributeAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cAttributeIDTerminalRuleCall_0_3_0 = (RuleCall)cAttributeAssignment_0_3.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cLocalAttributeToSetAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cProcKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cFullStopKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cAttributeAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cAttributeIDTerminalRuleCall_1_3_0 = (RuleCall)cAttributeAssignment_1_3.eContents().get(0);
		
		//AttributeToSet:
		//	{ComponentAttributeToSet} "this" "." attribute=ID | {LocalAttributeToSet} "proc" "." attribute=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//{ComponentAttributeToSet} "this" "." attribute=ID | {LocalAttributeToSet} "proc" "." attribute=ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{ComponentAttributeToSet} "this" "." attribute=ID
		public Group getGroup_0() { return cGroup_0; }
		
		//{ComponentAttributeToSet}
		public Action getComponentAttributeToSetAction_0_0() { return cComponentAttributeToSetAction_0_0; }
		
		//"this"
		public Keyword getThisKeyword_0_1() { return cThisKeyword_0_1; }
		
		//"."
		public Keyword getFullStopKeyword_0_2() { return cFullStopKeyword_0_2; }
		
		//attribute=ID
		public Assignment getAttributeAssignment_0_3() { return cAttributeAssignment_0_3; }
		
		//ID
		public RuleCall getAttributeIDTerminalRuleCall_0_3_0() { return cAttributeIDTerminalRuleCall_0_3_0; }
		
		//{LocalAttributeToSet} "proc" "." attribute=ID
		public Group getGroup_1() { return cGroup_1; }
		
		//{LocalAttributeToSet}
		public Action getLocalAttributeToSetAction_1_0() { return cLocalAttributeToSetAction_1_0; }
		
		//"proc"
		public Keyword getProcKeyword_1_1() { return cProcKeyword_1_1; }
		
		//"."
		public Keyword getFullStopKeyword_1_2() { return cFullStopKeyword_1_2; }
		
		//attribute=ID
		public Assignment getAttributeAssignment_1_3() { return cAttributeAssignment_1_3; }
		
		//ID
		public RuleCall getAttributeIDTerminalRuleCall_1_3_0() { return cAttributeIDTerminalRuleCall_1_3_0; }
	}
	public class FuncParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.FuncParam");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTYPETerminalRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//// Functions
		//FuncParam:
		//	type=TYPE name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//type=TYPE name=ID
		public Group getGroup() { return cGroup; }
		
		//type=TYPE
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//TYPE
		public RuleCall getTypeTYPETerminalRuleCall_0_0() { return cTypeTYPETerminalRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class FuncDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.FuncDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTYPETerminalRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cParamsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cParamsFuncParamParserRuleCall_4_0_0 = (RuleCall)cParamsAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cParamsAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cParamsFuncParamParserRuleCall_4_1_1_0 = (RuleCall)cParamsAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cBlkAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBlkFuncBlockParserRuleCall_6_0 = (RuleCall)cBlkAssignment_6.eContents().get(0);
		
		//FuncDefinition:
		//	'function' type=TYPE name=ID '(' (params+=FuncParam (',' params+=FuncParam)*)? ')' blk=FuncBlock;
		@Override public ParserRule getRule() { return rule; }
		
		//'function' type=TYPE name=ID '(' (params+=FuncParam (',' params+=FuncParam)*)? ')' blk=FuncBlock
		public Group getGroup() { return cGroup; }
		
		//'function'
		public Keyword getFunctionKeyword_0() { return cFunctionKeyword_0; }
		
		//type=TYPE
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//TYPE
		public RuleCall getTypeTYPETerminalRuleCall_1_0() { return cTypeTYPETerminalRuleCall_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//(params+=FuncParam (',' params+=FuncParam)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//params+=FuncParam
		public Assignment getParamsAssignment_4_0() { return cParamsAssignment_4_0; }
		
		//FuncParam
		public RuleCall getParamsFuncParamParserRuleCall_4_0_0() { return cParamsFuncParamParserRuleCall_4_0_0; }
		
		//(',' params+=FuncParam)*
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//','
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }
		
		//params+=FuncParam
		public Assignment getParamsAssignment_4_1_1() { return cParamsAssignment_4_1_1; }
		
		//FuncParam
		public RuleCall getParamsFuncParamParserRuleCall_4_1_1_0() { return cParamsFuncParamParserRuleCall_4_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//blk=FuncBlock
		public Assignment getBlkAssignment_6() { return cBlkAssignment_6; }
		
		//FuncBlock
		public RuleCall getBlkFuncBlockParserRuleCall_6_0() { return cBlkFuncBlockParserRuleCall_6_0; }
	}
	public class FuncBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.FuncBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cFuncBlockAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cStatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementsFuncStatementParserRuleCall_2_0 = (RuleCall)cStatementsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//FuncBlock:
		//	'{' {FuncBlock} statements+=FuncStatement* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' {FuncBlock} statements+=FuncStatement* '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//{FuncBlock}
		public Action getFuncBlockAction_1() { return cFuncBlockAction_1; }
		
		//statements+=FuncStatement*
		public Assignment getStatementsAssignment_2() { return cStatementsAssignment_2; }
		
		//FuncStatement
		public RuleCall getStatementsFuncStatementParserRuleCall_2_0() { return cStatementsFuncStatementParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class FuncStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.FuncStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFuncVarAssignParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFuncIfElseParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFuncReturnParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cFuncVarDeclarationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//FuncStatement:
		//	FuncVarAssign | FuncIfElse | FuncReturn | FuncVarDeclaration;
		@Override public ParserRule getRule() { return rule; }
		
		//FuncVarAssign | FuncIfElse | FuncReturn | FuncVarDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FuncVarAssign
		public RuleCall getFuncVarAssignParserRuleCall_0() { return cFuncVarAssignParserRuleCall_0; }
		
		//FuncIfElse
		public RuleCall getFuncIfElseParserRuleCall_1() { return cFuncIfElseParserRuleCall_1; }
		
		//FuncReturn
		public RuleCall getFuncReturnParserRuleCall_2() { return cFuncReturnParserRuleCall_2; }
		
		//FuncVarDeclaration
		public RuleCall getFuncVarDeclarationParserRuleCall_3() { return cFuncVarDeclarationParserRuleCall_3; }
	}
	public class FuncVarDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.FuncVarDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValExpressionParserRuleCall_3_0 = (RuleCall)cValAssignment_3.eContents().get(0);
		
		//FuncVarDeclaration:
		//	'var' name=ID '=' val=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//'var' name=ID '=' val=Expression
		public Group getGroup() { return cGroup; }
		
		//'var'
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//val=Expression
		public Assignment getValAssignment_3() { return cValAssignment_3; }
		
		//Expression
		public RuleCall getValExpressionParserRuleCall_3_0() { return cValExpressionParserRuleCall_3_0; }
	}
	public class FuncVarAssignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.FuncVarAssign");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cVarFuncVarDeclarationCrossReference_0_0 = (CrossReference)cVarAssignment_0.eContents().get(0);
		private final RuleCall cVarFuncVarDeclarationIDTerminalRuleCall_0_0_1 = (RuleCall)cVarFuncVarDeclarationCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValExpressionParserRuleCall_2_0 = (RuleCall)cValAssignment_2.eContents().get(0);
		
		//FuncVarAssign:
		//	var=[FuncVarDeclaration] '=' val=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//var=[FuncVarDeclaration] '=' val=Expression
		public Group getGroup() { return cGroup; }
		
		//var=[FuncVarDeclaration]
		public Assignment getVarAssignment_0() { return cVarAssignment_0; }
		
		//[FuncVarDeclaration]
		public CrossReference getVarFuncVarDeclarationCrossReference_0_0() { return cVarFuncVarDeclarationCrossReference_0_0; }
		
		//ID
		public RuleCall getVarFuncVarDeclarationIDTerminalRuleCall_0_0_1() { return cVarFuncVarDeclarationIDTerminalRuleCall_0_0_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//val=Expression
		public Assignment getValAssignment_2() { return cValAssignment_2; }
		
		//Expression
		public RuleCall getValExpressionParserRuleCall_2_0() { return cValExpressionParserRuleCall_2_0; }
	}
	public class FuncIfElseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.FuncIfElse");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTestAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTestExpressionParserRuleCall_2_0 = (RuleCall)cTestAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cThenAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cThenFuncBlockParserRuleCall_4_0 = (RuleCall)cThenAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cElifKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cTestAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cTestExpressionParserRuleCall_5_2_0 = (RuleCall)cTestAssignment_5_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		private final Assignment cThenAssignment_5_4 = (Assignment)cGroup_5.eContents().get(4);
		private final RuleCall cThenFuncBlockParserRuleCall_5_4_0 = (RuleCall)cThenAssignment_5_4.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cElseKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cElseBranchAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cElseBranchFuncBlockParserRuleCall_6_1_0 = (RuleCall)cElseBranchAssignment_6_1.eContents().get(0);
		
		//FuncIfElse:
		//	'if' '(' test+=Expression ')' then+=FuncBlock ('elif' '(' test+=Expression ')' then+=FuncBlock)* ('else'
		//	elseBranch=FuncBlock)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'if' '(' test+=Expression ')' then+=FuncBlock ('elif' '(' test+=Expression ')' then+=FuncBlock)* ('else'
		//elseBranch=FuncBlock)?
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//test+=Expression
		public Assignment getTestAssignment_2() { return cTestAssignment_2; }
		
		//Expression
		public RuleCall getTestExpressionParserRuleCall_2_0() { return cTestExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//then+=FuncBlock
		public Assignment getThenAssignment_4() { return cThenAssignment_4; }
		
		//FuncBlock
		public RuleCall getThenFuncBlockParserRuleCall_4_0() { return cThenFuncBlockParserRuleCall_4_0; }
		
		//('elif' '(' test+=Expression ')' then+=FuncBlock)*
		public Group getGroup_5() { return cGroup_5; }
		
		//'elif'
		public Keyword getElifKeyword_5_0() { return cElifKeyword_5_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5_1() { return cLeftParenthesisKeyword_5_1; }
		
		//test+=Expression
		public Assignment getTestAssignment_5_2() { return cTestAssignment_5_2; }
		
		//Expression
		public RuleCall getTestExpressionParserRuleCall_5_2_0() { return cTestExpressionParserRuleCall_5_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5_3() { return cRightParenthesisKeyword_5_3; }
		
		//then+=FuncBlock
		public Assignment getThenAssignment_5_4() { return cThenAssignment_5_4; }
		
		//FuncBlock
		public RuleCall getThenFuncBlockParserRuleCall_5_4_0() { return cThenFuncBlockParserRuleCall_5_4_0; }
		
		//('else' elseBranch=FuncBlock)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'else'
		public Keyword getElseKeyword_6_0() { return cElseKeyword_6_0; }
		
		//elseBranch=FuncBlock
		public Assignment getElseBranchAssignment_6_1() { return cElseBranchAssignment_6_1; }
		
		//FuncBlock
		public RuleCall getElseBranchFuncBlockParserRuleCall_6_1_0() { return cElseBranchFuncBlockParserRuleCall_6_1_0; }
	}
	public class FuncReturnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.FuncReturn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReturnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValExpressionParserRuleCall_1_0 = (RuleCall)cValAssignment_1.eContents().get(0);
		
		//FuncReturn:
		//	'return' val=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//'return' val=Expression
		public Group getGroup() { return cGroup; }
		
		//'return'
		public Keyword getReturnKeyword_0() { return cReturnKeyword_0; }
		
		//val=Expression
		public Assignment getValAssignment_1() { return cValAssignment_1; }
		
		//Expression
		public RuleCall getValExpressionParserRuleCall_1_0() { return cValExpressionParserRuleCall_1_0; }
	}
	
	
	private final ModelElements pModel;
	private final ProcElements pProc;
	private final InterleavingProcessElements pInterleavingProcess;
	private final NonDeterminismProcessElements pNonDeterminismProcess;
	private final PreconditionsElements pPreconditions;
	private final PredOutputProcessOrInputProcessesElements pPredOutputProcessOrInputProcesses;
	private final PredOutputProcessOrInputProcessElements pPredOutputProcessOrInputProcess;
	private final InputProcessesPartElements pInputProcessesPart;
	private final InputProcessElements pInputProcess;
	private final OutputProcessPartElements pOutputProcessPart;
	private final IfProcessesElements pIfProcesses;
	private final IfBranchProcessElements pIfBranchProcess;
	private final ElseBranchProcessElements pElseBranchProcess;
	private final UpdateElements pUpdate;
	private final AwarenessElements pAwareness;
	private final NZCProcessElements pNZCProcess;
	private final NProcessElements pNProcess;
	private final CallProcessElements pCallProcess;
	private final ZeroProcessElements pZeroProcess;
	private final ProcessDefinitionElements pProcessDefinition;
	private final EnvInitValueElements pEnvInitValue;
	private final EnvironmentElements pEnvironment;
	private final ComponentDefinitionElements pComponentDefinition;
	private final ExpressionElements pExpression;
	private final OrElements pOr;
	private final AndElements pAnd;
	private final EqualityElements pEquality;
	private final ComparisonElements pComparison;
	private final PlusOrMinusElements pPlusOrMinus;
	private final MulOrDivElements pMulOrDiv;
	private final PrimaryElements pPrimary;
	private final LRefElements pLRef;
	private final AtomicElements pAtomic;
	private final AttributeToSetElements pAttributeToSet;
	private final TerminalRule tTYPE;
	private final FuncParamElements pFuncParam;
	private final FuncDefinitionElements pFuncDefinition;
	private final FuncBlockElements pFuncBlock;
	private final FuncStatementElements pFuncStatement;
	private final FuncVarDeclarationElements pFuncVarDeclaration;
	private final FuncVarAssignElements pFuncVarAssign;
	private final FuncIfElseElements pFuncIfElse;
	private final FuncReturnElements pFuncReturn;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public GoatComponentsGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pProc = new ProcElements();
		this.pInterleavingProcess = new InterleavingProcessElements();
		this.pNonDeterminismProcess = new NonDeterminismProcessElements();
		this.pPreconditions = new PreconditionsElements();
		this.pPredOutputProcessOrInputProcesses = new PredOutputProcessOrInputProcessesElements();
		this.pPredOutputProcessOrInputProcess = new PredOutputProcessOrInputProcessElements();
		this.pInputProcessesPart = new InputProcessesPartElements();
		this.pInputProcess = new InputProcessElements();
		this.pOutputProcessPart = new OutputProcessPartElements();
		this.pIfProcesses = new IfProcessesElements();
		this.pIfBranchProcess = new IfBranchProcessElements();
		this.pElseBranchProcess = new ElseBranchProcessElements();
		this.pUpdate = new UpdateElements();
		this.pAwareness = new AwarenessElements();
		this.pNZCProcess = new NZCProcessElements();
		this.pNProcess = new NProcessElements();
		this.pCallProcess = new CallProcessElements();
		this.pZeroProcess = new ZeroProcessElements();
		this.pProcessDefinition = new ProcessDefinitionElements();
		this.pEnvInitValue = new EnvInitValueElements();
		this.pEnvironment = new EnvironmentElements();
		this.pComponentDefinition = new ComponentDefinitionElements();
		this.pExpression = new ExpressionElements();
		this.pOr = new OrElements();
		this.pAnd = new AndElements();
		this.pEquality = new EqualityElements();
		this.pComparison = new ComparisonElements();
		this.pPlusOrMinus = new PlusOrMinusElements();
		this.pMulOrDiv = new MulOrDivElements();
		this.pPrimary = new PrimaryElements();
		this.pLRef = new LRefElements();
		this.pAtomic = new AtomicElements();
		this.pAttributeToSet = new AttributeToSetElements();
		this.tTYPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.sysma.goat.eclipse_plugin.GoatComponents.TYPE");
		this.pFuncParam = new FuncParamElements();
		this.pFuncDefinition = new FuncDefinitionElements();
		this.pFuncBlock = new FuncBlockElements();
		this.pFuncStatement = new FuncStatementElements();
		this.pFuncVarDeclaration = new FuncVarDeclarationElements();
		this.pFuncVarAssign = new FuncVarAssignElements();
		this.pFuncIfElse = new FuncIfElseElements();
		this.pFuncReturn = new FuncReturnElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.sysma.goat.eclipse_plugin.GoatComponents".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	{Model} (processes+=ProcessDefinition | components+=ComponentDefinition | functions+=FuncDefinition)*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//// Process
	//Proc Process:
	//	InterleavingProcess | NonDeterminismProcess;
	public ProcElements getProcAccess() {
		return pProc;
	}
	
	public ParserRule getProcRule() {
		return getProcAccess().getRule();
	}
	
	//InterleavingProcess Process:
	//	CallProcess {InterleavingProcess.subProcs+=current} ("|" subProcs+=CallProcess)*;
	public InterleavingProcessElements getInterleavingProcessAccess() {
		return pInterleavingProcess;
	}
	
	public ParserRule getInterleavingProcessRule() {
		return getInterleavingProcessAccess().getRule();
	}
	
	//NonDeterminismProcess Process:
	//	PredOutputProcessOrInputProcesses | IfProcesses | NProcess;
	public NonDeterminismProcessElements getNonDeterminismProcessAccess() {
		return pNonDeterminismProcess;
	}
	
	public ParserRule getNonDeterminismProcessRule() {
		return getNonDeterminismProcessAccess().getRule();
	}
	
	//Preconditions:
	//	{Preconditions} precond+=(Update | Awareness)*;
	public PreconditionsElements getPreconditionsAccess() {
		return pPreconditions;
	}
	
	public ParserRule getPreconditionsRule() {
		return getPreconditionsAccess().getRule();
	}
	
	//PredOutputProcessOrInputProcesses Process:
	//	Preconditions ({OutputProcess.precond=current} OutputProcessPart | {InputProcesses.preconds+=current}
	//	InputProcessesPart);
	public PredOutputProcessOrInputProcessesElements getPredOutputProcessOrInputProcessesAccess() {
		return pPredOutputProcessOrInputProcesses;
	}
	
	public ParserRule getPredOutputProcessOrInputProcessesRule() {
		return getPredOutputProcessOrInputProcessesAccess().getRule();
	}
	
	//PredOutputProcessOrInputProcess Process:
	//	Preconditions ({OutputProcess.precond=current} OutputProcessPart | {InputProcesses.preconds+=current}
	//	inputs+=InputProcess);
	public PredOutputProcessOrInputProcessElements getPredOutputProcessOrInputProcessAccess() {
		return pPredOutputProcessOrInputProcess;
	}
	
	public ParserRule getPredOutputProcessOrInputProcessRule() {
		return getPredOutputProcessOrInputProcessAccess().getRule();
	}
	
	//fragment InputProcessesPart:
	//	inputs+=InputProcess ('+' preconds+=Preconditions inputs+=InputProcess)*;
	public InputProcessesPartElements getInputProcessesPartAccess() {
		return pInputProcessesPart;
	}
	
	public ParserRule getInputProcessesPartRule() {
		return getInputProcessesPartAccess().getRule();
	}
	
	//InputProcess Process:
	//	{InputProcess} "receive" "(" rec_pred=Expression ")" "{" (msgInParts+=AttributeToSet (","
	//	msgInParts+=AttributeToSet)*)? "}" ("print" "(" output=STRING ")")?
	//	"." next=NZCProcess;
	public InputProcessElements getInputProcessAccess() {
		return pInputProcess;
	}
	
	public ParserRule getInputProcessRule() {
		return getInputProcessAccess().getRule();
	}
	
	//fragment OutputProcessPart:
	//	"send" "{" (msgOutParts+=Expression ("," msgOutParts+=Expression)*)? "}" "@" "(" send_pred=Expression ")" ("print" "("
	//	output=STRING ")")? ("sleep" "(" msec=INT ")")? "." next=Proc;
	public OutputProcessPartElements getOutputProcessPartAccess() {
		return pOutputProcessPart;
	}
	
	public ParserRule getOutputProcessPartRule() {
		return getOutputProcessPartAccess().getRule();
	}
	
	//IfProcesses Process:
	//	{IfProcesses} branches+=IfBranchProcess ("else" branches+=IfBranchProcess)* ("else" branches+=ElseBranchProcess)?;
	public IfProcessesElements getIfProcessesAccess() {
		return pIfProcesses;
	}
	
	public ParserRule getIfProcessesRule() {
		return getIfProcessesAccess().getRule();
	}
	
	//IfBranchProcess Process:
	//	{IfBranchProcess} "if" cond=Preconditions '{' then=PredOutputProcessOrInputProcess '}';
	public IfBranchProcessElements getIfBranchProcessAccess() {
		return pIfBranchProcess;
	}
	
	public ParserRule getIfBranchProcessRule() {
		return getIfBranchProcessAccess().getRule();
	}
	
	//ElseBranchProcess Process:
	//	{IfBranchProcess} '{' then=PredOutputProcessOrInputProcess '}';
	public ElseBranchProcessElements getElseBranchProcessAccess() {
		return pElseBranchProcess;
	}
	
	public ParserRule getElseBranchProcessRule() {
		return getElseBranchProcessAccess().getRule();
	}
	
	//Update:
	//	"[" vars+=AttributeToSet ":=" vals+=Expression ("," vars+=AttributeToSet ":=" vals+=Expression)* "]";
	public UpdateElements getUpdateAccess() {
		return pUpdate;
	}
	
	public ParserRule getUpdateRule() {
		return getUpdateAccess().getRule();
	}
	
	//Awareness:
	//	"wait" "until" "(" pred=Expression ")";
	public AwarenessElements getAwarenessAccess() {
		return pAwareness;
	}
	
	public ParserRule getAwarenessRule() {
		return getAwarenessAccess().getRule();
	}
	
	//NZCProcess Process:
	//	"(" Proc ")" | ZeroProcess | CallProcess;
	public NZCProcessElements getNZCProcessAccess() {
		return pNZCProcess;
	}
	
	public ParserRule getNZCProcessRule() {
		return getNZCProcessAccess().getRule();
	}
	
	//NProcess Process:
	//	"(" Proc ")" | ZeroProcess //| CallProcess
	//;
	public NProcessElements getNProcessAccess() {
		return pNProcess;
	}
	
	public ParserRule getNProcessRule() {
		return getNProcessAccess().getRule();
	}
	
	//CallProcess Process:
	//	{CallProcess} procname=[ProcessDefinition];
	public CallProcessElements getCallProcessAccess() {
		return pCallProcess;
	}
	
	public ParserRule getCallProcessRule() {
		return getCallProcessAccess().getRule();
	}
	
	//ZeroProcess Process:
	//	{ZeroProcess} "nil";
	public ZeroProcessElements getZeroProcessAccess() {
		return pZeroProcess;
	}
	
	public ParserRule getZeroProcessRule() {
		return getZeroProcessAccess().getRule();
	}
	
	//ProcessDefinition:
	//	'proc' name=ID '=' proc=Proc;
	public ProcessDefinitionElements getProcessDefinitionAccess() {
		return pProcessDefinition;
	}
	
	public ParserRule getProcessDefinitionRule() {
		return getProcessDefinitionAccess().getRule();
	}
	
	//// Component
	//EnvInitValue Expression:
	//	{IntConstant} value=INT | {StringConstant} value=STRING | {BoolConstant} value=('true' | 'false');
	public EnvInitValueElements getEnvInitValueAccess() {
		return pEnvInitValue;
	}
	
	public ParserRule getEnvInitValueRule() {
		return getEnvInitValueAccess().getRule();
	}
	
	//Environment:
	//	{Environment} "{" (attrs+=ID ':=' vals+=EnvInitValue ("," attrs+=ID ':=' vals+=EnvInitValue)*)? "}";
	public EnvironmentElements getEnvironmentAccess() {
		return pEnvironment;
	}
	
	public ParserRule getEnvironmentRule() {
		return getEnvironmentAccess().getRule();
	}
	
	//ComponentDefinition:
	//	"component" env=Environment proc=[ProcessDefinition] 'at' address=STRING;
	public ComponentDefinitionElements getComponentDefinitionAccess() {
		return pComponentDefinition;
	}
	
	public ParserRule getComponentDefinitionRule() {
		return getComponentDefinitionAccess().getRule();
	}
	
	///* 
	//// Predicate
	//Predicate returns Pred:
	//	And ({Predicate.or += current} "||" or += And)*
	//;
	//And returns Pred:
	//	Not ({And.and += current} "&&" and += Not)*
	//;
	//Not returns Pred:
	//	Term | {Not} neg?="!" term = Term
	//;
	//Term returns Pred:
	//	Immediate | EqualityTest | "(" Predicate ")" 
	//;
	//Immediate returns Pred:
	//	{Immediate} (isTrue ?= "true" | "false")
	//;
	//EqualityTest returns Pred:
	//	{EqualityTest} op1 = (Value|RecAttribute) operand=("<"|">"|"<="|">="|"="|"!=") op2 = Value
	//;
	//*/ // Expression
	//Expression:
	//	Or;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//Or Expression:
	//	And ({Or.left=current} "||" right=And)?;
	public OrElements getOrAccess() {
		return pOr;
	}
	
	public ParserRule getOrRule() {
		return getOrAccess().getRule();
	}
	
	//And Expression:
	//	Equality ({And.left=current} "&&" right=Equality)?;
	public AndElements getAndAccess() {
		return pAnd;
	}
	
	public ParserRule getAndRule() {
		return getAndAccess().getRule();
	}
	
	//Equality Expression:
	//	Comparison ({Equality.left=current} op=("==" | "!=") right=Comparison)?;
	public EqualityElements getEqualityAccess() {
		return pEquality;
	}
	
	public ParserRule getEqualityRule() {
		return getEqualityAccess().getRule();
	}
	
	//Comparison Expression:
	//	PlusOrMinus ({Comparison.left=current} op=(">=" | "<=" | ">" | "<") right=PlusOrMinus)?;
	public ComparisonElements getComparisonAccess() {
		return pComparison;
	}
	
	public ParserRule getComparisonRule() {
		return getComparisonAccess().getRule();
	}
	
	//PlusOrMinus Expression:
	//	MulOrDiv (({Plus.left=current} '+' | {Minus.left=current} '-' | {Concatenate.left=current} '++') right=MulOrDiv)?;
	public PlusOrMinusElements getPlusOrMinusAccess() {
		return pPlusOrMinus;
	}
	
	public ParserRule getPlusOrMinusRule() {
		return getPlusOrMinusAccess().getRule();
	}
	
	//MulOrDiv Expression:
	//	Primary ({MulOrDiv.left=current} op=('*' | '/') right=Primary)?;
	public MulOrDivElements getMulOrDivAccess() {
		return pMulOrDiv;
	}
	
	public ParserRule getMulOrDivRule() {
		return getMulOrDivAccess().getRule();
	}
	
	//Primary Expression:
	//	'(' Expression ')' | {Not} "!" "(" expression=Primary ")" | Atomic;
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}
	
	//LRef:
	//	FuncParam | FuncVarDeclaration;
	public LRefElements getLRefAccess() {
		return pLRef;
	}
	
	public ParserRule getLRefRule() {
		return getLRefAccess().getRule();
	}
	
	//Atomic Expression:
	//	{IntConstant} value=INT | {StringConstant} value=STRING | {BoolConstant} value=('true' | 'false') | {LocalVarRef}
	//	ref=[LRef] | {LocalAttributeRef} "proc" "." attribute=ID | {FunctionCall} function=[FuncDefinition] "("
	//	(params+=Expression ("," params+=Expression)*)? ")" | {ComponentAttributeRef} "this" "." attribute=ID |
	//	{RecAttributeRef} "receiver" "." attribute=ID;
	public AtomicElements getAtomicAccess() {
		return pAtomic;
	}
	
	public ParserRule getAtomicRule() {
		return getAtomicAccess().getRule();
	}
	
	//AttributeToSet:
	//	{ComponentAttributeToSet} "this" "." attribute=ID | {LocalAttributeToSet} "proc" "." attribute=ID;
	public AttributeToSetElements getAttributeToSetAccess() {
		return pAttributeToSet;
	}
	
	public ParserRule getAttributeToSetRule() {
		return getAttributeToSetAccess().getRule();
	}
	
	//terminal TYPE:
	//	'int' | 'string' | 'bool';
	public TerminalRule getTYPERule() {
		return tTYPE;
	}
	
	//// Functions
	//FuncParam:
	//	type=TYPE name=ID;
	public FuncParamElements getFuncParamAccess() {
		return pFuncParam;
	}
	
	public ParserRule getFuncParamRule() {
		return getFuncParamAccess().getRule();
	}
	
	//FuncDefinition:
	//	'function' type=TYPE name=ID '(' (params+=FuncParam (',' params+=FuncParam)*)? ')' blk=FuncBlock;
	public FuncDefinitionElements getFuncDefinitionAccess() {
		return pFuncDefinition;
	}
	
	public ParserRule getFuncDefinitionRule() {
		return getFuncDefinitionAccess().getRule();
	}
	
	//FuncBlock:
	//	'{' {FuncBlock} statements+=FuncStatement* '}';
	public FuncBlockElements getFuncBlockAccess() {
		return pFuncBlock;
	}
	
	public ParserRule getFuncBlockRule() {
		return getFuncBlockAccess().getRule();
	}
	
	//FuncStatement:
	//	FuncVarAssign | FuncIfElse | FuncReturn | FuncVarDeclaration;
	public FuncStatementElements getFuncStatementAccess() {
		return pFuncStatement;
	}
	
	public ParserRule getFuncStatementRule() {
		return getFuncStatementAccess().getRule();
	}
	
	//FuncVarDeclaration:
	//	'var' name=ID '=' val=Expression;
	public FuncVarDeclarationElements getFuncVarDeclarationAccess() {
		return pFuncVarDeclaration;
	}
	
	public ParserRule getFuncVarDeclarationRule() {
		return getFuncVarDeclarationAccess().getRule();
	}
	
	//FuncVarAssign:
	//	var=[FuncVarDeclaration] '=' val=Expression;
	public FuncVarAssignElements getFuncVarAssignAccess() {
		return pFuncVarAssign;
	}
	
	public ParserRule getFuncVarAssignRule() {
		return getFuncVarAssignAccess().getRule();
	}
	
	//FuncIfElse:
	//	'if' '(' test+=Expression ')' then+=FuncBlock ('elif' '(' test+=Expression ')' then+=FuncBlock)* ('else'
	//	elseBranch=FuncBlock)?;
	public FuncIfElseElements getFuncIfElseAccess() {
		return pFuncIfElse;
	}
	
	public ParserRule getFuncIfElseRule() {
		return getFuncIfElseAccess().getRule();
	}
	
	//FuncReturn:
	//	'return' val=Expression;
	public FuncReturnElements getFuncReturnAccess() {
		return pFuncReturn;
	}
	
	public ParserRule getFuncReturnRule() {
		return getFuncReturnAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
