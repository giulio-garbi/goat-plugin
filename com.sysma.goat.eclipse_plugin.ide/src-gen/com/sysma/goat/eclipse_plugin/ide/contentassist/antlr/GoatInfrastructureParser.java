/*
 * generated by Xtext 2.12.0
 */
package com.sysma.goat.eclipse_plugin.ide.contentassist.antlr;

import com.google.inject.Inject;
import com.sysma.goat.eclipse_plugin.ide.contentassist.antlr.internal.InternalGoatInfrastructureParser;
import com.sysma.goat.eclipse_plugin.services.GoatInfrastructureGrammarAccess;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class GoatInfrastructureParser extends AbstractContentAssistParser {

	@Inject
	private GoatInfrastructureGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalGoatInfrastructureParser createParser() {
		InternalGoatInfrastructureParser result = new InternalGoatInfrastructureParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getSingleServerAccess().getGroup(), "rule__SingleServer__Group__0");
					put(grammarAccess.getClusterAccess().getGroup(), "rule__Cluster__Group__0");
					put(grammarAccess.getRingAccess().getGroup(), "rule__Ring__Group__0");
					put(grammarAccess.getTreeAccess().getGroup(), "rule__Tree__Group__0");
					put(grammarAccess.getParamsAccess().getGroup(), "rule__Params__Group__0");
					put(grammarAccess.getParamsAccess().getGroup_1(), "rule__Params__Group_1__0");
					put(grammarAccess.getParamsAccess().getGroup_1_0(), "rule__Params__Group_1_0__0");
					put(grammarAccess.getParamAccess().getGroup(), "rule__Param__Group__0");
					put(grammarAccess.getSingleServerAccess().getNameAssignment_1(), "rule__SingleServer__NameAssignment_1");
					put(grammarAccess.getClusterAccess().getNameAssignment_1(), "rule__Cluster__NameAssignment_1");
					put(grammarAccess.getRingAccess().getNameAssignment_1(), "rule__Ring__NameAssignment_1");
					put(grammarAccess.getTreeAccess().getNameAssignment_1(), "rule__Tree__NameAssignment_1");
					put(grammarAccess.getParamsAccess().getParamsAssignment_1_0_0(), "rule__Params__ParamsAssignment_1_0_0");
					put(grammarAccess.getParamsAccess().getParamsAssignment_1_1(), "rule__Params__ParamsAssignment_1_1");
					put(grammarAccess.getParamAccess().getNameAssignment_0(), "rule__Param__NameAssignment_0");
					put(grammarAccess.getParamAccess().getValueAssignment_2(), "rule__Param__ValueAssignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public GoatInfrastructureGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(GoatInfrastructureGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
