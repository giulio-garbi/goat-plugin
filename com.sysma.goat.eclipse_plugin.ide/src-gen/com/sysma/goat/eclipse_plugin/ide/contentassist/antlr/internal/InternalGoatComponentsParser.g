/*
 * generated by Xtext 2.12.0
 */
parser grammar InternalGoatComponentsParser;

options {
	tokenVocab=InternalGoatComponentsLexer;
	superClass=AbstractInternalContentAssistParser;
}

@header {
package com.sysma.goat.eclipse_plugin.ide.contentassist.antlr.internal;
import java.util.Map;
import java.util.HashMap;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import com.sysma.goat.eclipse_plugin.services.GoatComponentsGrammarAccess;

}
@members {
	private GoatComponentsGrammarAccess grammarAccess;
	private final Map<String, String> tokenNameToValue = new HashMap<String, String>();
	
	{
		tokenNameToValue.put("ExclamationMark", "'!'");
		tokenNameToValue.put("LeftParenthesis", "'('");
		tokenNameToValue.put("RightParenthesis", "')'");
		tokenNameToValue.put("Asterisk", "'*'");
		tokenNameToValue.put("PlusSign", "'+'");
		tokenNameToValue.put("Comma", "','");
		tokenNameToValue.put("HyphenMinus", "'-'");
		tokenNameToValue.put("FullStop", "'.'");
		tokenNameToValue.put("Solidus", "'/'");
		tokenNameToValue.put("LessThanSign", "'<'");
		tokenNameToValue.put("EqualsSign", "'='");
		tokenNameToValue.put("GreaterThanSign", "'>'");
		tokenNameToValue.put("CommercialAt", "'@'");
		tokenNameToValue.put("LeftSquareBracket", "'['");
		tokenNameToValue.put("RightSquareBracket", "']'");
		tokenNameToValue.put("LeftCurlyBracket", "'{'");
		tokenNameToValue.put("VerticalLine", "'|'");
		tokenNameToValue.put("RightCurlyBracket", "'}'");
		tokenNameToValue.put("ExclamationMarkEqualsSign", "'!='");
		tokenNameToValue.put("AmpersandAmpersand", "'&&'");
		tokenNameToValue.put("PlusSignPlusSign", "'++'");
		tokenNameToValue.put("ColonEqualsSign", "':='");
		tokenNameToValue.put("LessThanSignEqualsSign", "'<='");
		tokenNameToValue.put("EqualsSignEqualsSign", "'=='");
		tokenNameToValue.put("GreaterThanSignEqualsSign", "'>='");
		tokenNameToValue.put("At", "'at'");
		tokenNameToValue.put("If", "'if'");
		tokenNameToValue.put("VerticalLineVerticalLine", "'||'");
		tokenNameToValue.put("Nil", "'nil'");
		tokenNameToValue.put("Var", "'var'");
		tokenNameToValue.put("Elif", "'elif'");
		tokenNameToValue.put("Else", "'else'");
		tokenNameToValue.put("Proc", "'proc'");
		tokenNameToValue.put("Send", "'send'");
		tokenNameToValue.put("This", "'this'");
		tokenNameToValue.put("True", "'true'");
		tokenNameToValue.put("Wait", "'wait'");
		tokenNameToValue.put("False", "'false'");
		tokenNameToValue.put("Print", "'print'");
		tokenNameToValue.put("Sleep", "'sleep'");
		tokenNameToValue.put("Until", "'until'");
		tokenNameToValue.put("Return", "'return'");
		tokenNameToValue.put("Receive", "'receive'");
		tokenNameToValue.put("Function", "'function'");
		tokenNameToValue.put("Receiver", "'receiver'");
		tokenNameToValue.put("Component", "'component'");
	}

	public void setGrammarAccess(GoatComponentsGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		String result = tokenNameToValue.get(tokenName);
		if (result == null)
			result = tokenName;
		return result;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getGroup()); }
		(rule__Model__Group__0)
		{ after(grammarAccess.getModelAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleProc
entryRuleProc
:
{ before(grammarAccess.getProcRule()); }
	 ruleProc
{ after(grammarAccess.getProcRule()); } 
	 EOF 
;

// Rule Proc
ruleProc 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProcAccess().getAlternatives()); }
		(rule__Proc__Alternatives)
		{ after(grammarAccess.getProcAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInterleavingProcess
entryRuleInterleavingProcess
:
{ before(grammarAccess.getInterleavingProcessRule()); }
	 ruleInterleavingProcess
{ after(grammarAccess.getInterleavingProcessRule()); } 
	 EOF 
;

// Rule InterleavingProcess
ruleInterleavingProcess 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInterleavingProcessAccess().getGroup()); }
		(rule__InterleavingProcess__Group__0)
		{ after(grammarAccess.getInterleavingProcessAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNonDeterminismProcess
entryRuleNonDeterminismProcess
:
{ before(grammarAccess.getNonDeterminismProcessRule()); }
	 ruleNonDeterminismProcess
{ after(grammarAccess.getNonDeterminismProcessRule()); } 
	 EOF 
;

// Rule NonDeterminismProcess
ruleNonDeterminismProcess 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNonDeterminismProcessAccess().getAlternatives()); }
		(rule__NonDeterminismProcess__Alternatives)
		{ after(grammarAccess.getNonDeterminismProcessAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePreconditions
entryRulePreconditions
:
{ before(grammarAccess.getPreconditionsRule()); }
	 rulePreconditions
{ after(grammarAccess.getPreconditionsRule()); } 
	 EOF 
;

// Rule Preconditions
rulePreconditions 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPreconditionsAccess().getGroup()); }
		(rule__Preconditions__Group__0)
		{ after(grammarAccess.getPreconditionsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePredOutputProcessOrInputProcesses
entryRulePredOutputProcessOrInputProcesses
:
{ before(grammarAccess.getPredOutputProcessOrInputProcessesRule()); }
	 rulePredOutputProcessOrInputProcesses
{ after(grammarAccess.getPredOutputProcessOrInputProcessesRule()); } 
	 EOF 
;

// Rule PredOutputProcessOrInputProcesses
rulePredOutputProcessOrInputProcesses 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPredOutputProcessOrInputProcessesAccess().getGroup()); }
		(rule__PredOutputProcessOrInputProcesses__Group__0)
		{ after(grammarAccess.getPredOutputProcessOrInputProcessesAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePredOutputProcessOrInputProcess
entryRulePredOutputProcessOrInputProcess
:
{ before(grammarAccess.getPredOutputProcessOrInputProcessRule()); }
	 rulePredOutputProcessOrInputProcess
{ after(grammarAccess.getPredOutputProcessOrInputProcessRule()); } 
	 EOF 
;

// Rule PredOutputProcessOrInputProcess
rulePredOutputProcessOrInputProcess 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPredOutputProcessOrInputProcessAccess().getGroup()); }
		(rule__PredOutputProcessOrInputProcess__Group__0)
		{ after(grammarAccess.getPredOutputProcessOrInputProcessAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}


// Rule InputProcessesPart
ruleInputProcessesPart 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInputProcessesPartAccess().getGroup()); }
		(rule__InputProcessesPart__Group__0)
		{ after(grammarAccess.getInputProcessesPartAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInputProcess
entryRuleInputProcess
:
{ before(grammarAccess.getInputProcessRule()); }
	 ruleInputProcess
{ after(grammarAccess.getInputProcessRule()); } 
	 EOF 
;

// Rule InputProcess
ruleInputProcess 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInputProcessAccess().getGroup()); }
		(rule__InputProcess__Group__0)
		{ after(grammarAccess.getInputProcessAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}


// Rule OutputProcessPart
ruleOutputProcessPart 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOutputProcessPartAccess().getGroup()); }
		(rule__OutputProcessPart__Group__0)
		{ after(grammarAccess.getOutputProcessPartAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIfProcesses
entryRuleIfProcesses
:
{ before(grammarAccess.getIfProcessesRule()); }
	 ruleIfProcesses
{ after(grammarAccess.getIfProcessesRule()); } 
	 EOF 
;

// Rule IfProcesses
ruleIfProcesses 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIfProcessesAccess().getGroup()); }
		(rule__IfProcesses__Group__0)
		{ after(grammarAccess.getIfProcessesAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIfBranchProcess
entryRuleIfBranchProcess
:
{ before(grammarAccess.getIfBranchProcessRule()); }
	 ruleIfBranchProcess
{ after(grammarAccess.getIfBranchProcessRule()); } 
	 EOF 
;

// Rule IfBranchProcess
ruleIfBranchProcess 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIfBranchProcessAccess().getGroup()); }
		(rule__IfBranchProcess__Group__0)
		{ after(grammarAccess.getIfBranchProcessAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleElseBranchProcess
entryRuleElseBranchProcess
:
{ before(grammarAccess.getElseBranchProcessRule()); }
	 ruleElseBranchProcess
{ after(grammarAccess.getElseBranchProcessRule()); } 
	 EOF 
;

// Rule ElseBranchProcess
ruleElseBranchProcess 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getElseBranchProcessAccess().getGroup()); }
		(rule__ElseBranchProcess__Group__0)
		{ after(grammarAccess.getElseBranchProcessAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleUpdate
entryRuleUpdate
:
{ before(grammarAccess.getUpdateRule()); }
	 ruleUpdate
{ after(grammarAccess.getUpdateRule()); } 
	 EOF 
;

// Rule Update
ruleUpdate 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUpdateAccess().getGroup()); }
		(rule__Update__Group__0)
		{ after(grammarAccess.getUpdateAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAwareness
entryRuleAwareness
:
{ before(grammarAccess.getAwarenessRule()); }
	 ruleAwareness
{ after(grammarAccess.getAwarenessRule()); } 
	 EOF 
;

// Rule Awareness
ruleAwareness 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAwarenessAccess().getGroup()); }
		(rule__Awareness__Group__0)
		{ after(grammarAccess.getAwarenessAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNZCProcess
entryRuleNZCProcess
:
{ before(grammarAccess.getNZCProcessRule()); }
	 ruleNZCProcess
{ after(grammarAccess.getNZCProcessRule()); } 
	 EOF 
;

// Rule NZCProcess
ruleNZCProcess 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNZCProcessAccess().getAlternatives()); }
		(rule__NZCProcess__Alternatives)
		{ after(grammarAccess.getNZCProcessAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNProcess
entryRuleNProcess
:
{ before(grammarAccess.getNProcessRule()); }
	 ruleNProcess
{ after(grammarAccess.getNProcessRule()); } 
	 EOF 
;

// Rule NProcess
ruleNProcess 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNProcessAccess().getAlternatives()); }
		(rule__NProcess__Alternatives)
		{ after(grammarAccess.getNProcessAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCallProcess
entryRuleCallProcess
:
{ before(grammarAccess.getCallProcessRule()); }
	 ruleCallProcess
{ after(grammarAccess.getCallProcessRule()); } 
	 EOF 
;

// Rule CallProcess
ruleCallProcess 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCallProcessAccess().getGroup()); }
		(rule__CallProcess__Group__0)
		{ after(grammarAccess.getCallProcessAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleZeroProcess
entryRuleZeroProcess
:
{ before(grammarAccess.getZeroProcessRule()); }
	 ruleZeroProcess
{ after(grammarAccess.getZeroProcessRule()); } 
	 EOF 
;

// Rule ZeroProcess
ruleZeroProcess 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getZeroProcessAccess().getGroup()); }
		(rule__ZeroProcess__Group__0)
		{ after(grammarAccess.getZeroProcessAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleProcessDefinition
entryRuleProcessDefinition
:
{ before(grammarAccess.getProcessDefinitionRule()); }
	 ruleProcessDefinition
{ after(grammarAccess.getProcessDefinitionRule()); } 
	 EOF 
;

// Rule ProcessDefinition
ruleProcessDefinition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProcessDefinitionAccess().getGroup()); }
		(rule__ProcessDefinition__Group__0)
		{ after(grammarAccess.getProcessDefinitionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEnvInitValue
entryRuleEnvInitValue
:
{ before(grammarAccess.getEnvInitValueRule()); }
	 ruleEnvInitValue
{ after(grammarAccess.getEnvInitValueRule()); } 
	 EOF 
;

// Rule EnvInitValue
ruleEnvInitValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEnvInitValueAccess().getAlternatives()); }
		(rule__EnvInitValue__Alternatives)
		{ after(grammarAccess.getEnvInitValueAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEnvironment
entryRuleEnvironment
:
{ before(grammarAccess.getEnvironmentRule()); }
	 ruleEnvironment
{ after(grammarAccess.getEnvironmentRule()); } 
	 EOF 
;

// Rule Environment
ruleEnvironment 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEnvironmentAccess().getGroup()); }
		(rule__Environment__Group__0)
		{ after(grammarAccess.getEnvironmentAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleComponentDefinition
entryRuleComponentDefinition
:
{ before(grammarAccess.getComponentDefinitionRule()); }
	 ruleComponentDefinition
{ after(grammarAccess.getComponentDefinitionRule()); } 
	 EOF 
;

// Rule ComponentDefinition
ruleComponentDefinition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getComponentDefinitionAccess().getGroup()); }
		(rule__ComponentDefinition__Group__0)
		{ after(grammarAccess.getComponentDefinitionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression
entryRuleExpression
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionAccess().getOrParserRuleCall()); }
		ruleOr
		{ after(grammarAccess.getExpressionAccess().getOrParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOr
entryRuleOr
:
{ before(grammarAccess.getOrRule()); }
	 ruleOr
{ after(grammarAccess.getOrRule()); } 
	 EOF 
;

// Rule Or
ruleOr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOrAccess().getGroup()); }
		(rule__Or__Group__0)
		{ after(grammarAccess.getOrAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAnd
entryRuleAnd
:
{ before(grammarAccess.getAndRule()); }
	 ruleAnd
{ after(grammarAccess.getAndRule()); } 
	 EOF 
;

// Rule And
ruleAnd 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAndAccess().getGroup()); }
		(rule__And__Group__0)
		{ after(grammarAccess.getAndAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEquality
entryRuleEquality
:
{ before(grammarAccess.getEqualityRule()); }
	 ruleEquality
{ after(grammarAccess.getEqualityRule()); } 
	 EOF 
;

// Rule Equality
ruleEquality 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEqualityAccess().getGroup()); }
		(rule__Equality__Group__0)
		{ after(grammarAccess.getEqualityAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleComparison
entryRuleComparison
:
{ before(grammarAccess.getComparisonRule()); }
	 ruleComparison
{ after(grammarAccess.getComparisonRule()); } 
	 EOF 
;

// Rule Comparison
ruleComparison 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getComparisonAccess().getGroup()); }
		(rule__Comparison__Group__0)
		{ after(grammarAccess.getComparisonAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePlusOrMinus
entryRulePlusOrMinus
:
{ before(grammarAccess.getPlusOrMinusRule()); }
	 rulePlusOrMinus
{ after(grammarAccess.getPlusOrMinusRule()); } 
	 EOF 
;

// Rule PlusOrMinus
rulePlusOrMinus 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPlusOrMinusAccess().getGroup()); }
		(rule__PlusOrMinus__Group__0)
		{ after(grammarAccess.getPlusOrMinusAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMulOrDiv
entryRuleMulOrDiv
:
{ before(grammarAccess.getMulOrDivRule()); }
	 ruleMulOrDiv
{ after(grammarAccess.getMulOrDivRule()); } 
	 EOF 
;

// Rule MulOrDiv
ruleMulOrDiv 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMulOrDivAccess().getGroup()); }
		(rule__MulOrDiv__Group__0)
		{ after(grammarAccess.getMulOrDivAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrimary
entryRulePrimary
:
{ before(grammarAccess.getPrimaryRule()); }
	 rulePrimary
{ after(grammarAccess.getPrimaryRule()); } 
	 EOF 
;

// Rule Primary
rulePrimary 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrimaryAccess().getAlternatives()); }
		(rule__Primary__Alternatives)
		{ after(grammarAccess.getPrimaryAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAtomic
entryRuleAtomic
:
{ before(grammarAccess.getAtomicRule()); }
	 ruleAtomic
{ after(grammarAccess.getAtomicRule()); } 
	 EOF 
;

// Rule Atomic
ruleAtomic 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAtomicAccess().getAlternatives()); }
		(rule__Atomic__Alternatives)
		{ after(grammarAccess.getAtomicAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAttributeToSet
entryRuleAttributeToSet
:
{ before(grammarAccess.getAttributeToSetRule()); }
	 ruleAttributeToSet
{ after(grammarAccess.getAttributeToSetRule()); } 
	 EOF 
;

// Rule AttributeToSet
ruleAttributeToSet 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAttributeToSetAccess().getAlternatives()); }
		(rule__AttributeToSet__Alternatives)
		{ after(grammarAccess.getAttributeToSetAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFuncParam
entryRuleFuncParam
:
{ before(grammarAccess.getFuncParamRule()); }
	 ruleFuncParam
{ after(grammarAccess.getFuncParamRule()); } 
	 EOF 
;

// Rule FuncParam
ruleFuncParam 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFuncParamAccess().getGroup()); }
		(rule__FuncParam__Group__0)
		{ after(grammarAccess.getFuncParamAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFuncDefinition
entryRuleFuncDefinition
:
{ before(grammarAccess.getFuncDefinitionRule()); }
	 ruleFuncDefinition
{ after(grammarAccess.getFuncDefinitionRule()); } 
	 EOF 
;

// Rule FuncDefinition
ruleFuncDefinition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFuncDefinitionAccess().getGroup()); }
		(rule__FuncDefinition__Group__0)
		{ after(grammarAccess.getFuncDefinitionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFuncBlock
entryRuleFuncBlock
:
{ before(grammarAccess.getFuncBlockRule()); }
	 ruleFuncBlock
{ after(grammarAccess.getFuncBlockRule()); } 
	 EOF 
;

// Rule FuncBlock
ruleFuncBlock 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFuncBlockAccess().getGroup()); }
		(rule__FuncBlock__Group__0)
		{ after(grammarAccess.getFuncBlockAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFuncStatement
entryRuleFuncStatement
:
{ before(grammarAccess.getFuncStatementRule()); }
	 ruleFuncStatement
{ after(grammarAccess.getFuncStatementRule()); } 
	 EOF 
;

// Rule FuncStatement
ruleFuncStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFuncStatementAccess().getAlternatives()); }
		(rule__FuncStatement__Alternatives)
		{ after(grammarAccess.getFuncStatementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFuncVarDeclaration
entryRuleFuncVarDeclaration
:
{ before(grammarAccess.getFuncVarDeclarationRule()); }
	 ruleFuncVarDeclaration
{ after(grammarAccess.getFuncVarDeclarationRule()); } 
	 EOF 
;

// Rule FuncVarDeclaration
ruleFuncVarDeclaration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFuncVarDeclarationAccess().getGroup()); }
		(rule__FuncVarDeclaration__Group__0)
		{ after(grammarAccess.getFuncVarDeclarationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFuncVarAssign
entryRuleFuncVarAssign
:
{ before(grammarAccess.getFuncVarAssignRule()); }
	 ruleFuncVarAssign
{ after(grammarAccess.getFuncVarAssignRule()); } 
	 EOF 
;

// Rule FuncVarAssign
ruleFuncVarAssign 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFuncVarAssignAccess().getGroup()); }
		(rule__FuncVarAssign__Group__0)
		{ after(grammarAccess.getFuncVarAssignAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFuncIfElse
entryRuleFuncIfElse
:
{ before(grammarAccess.getFuncIfElseRule()); }
	 ruleFuncIfElse
{ after(grammarAccess.getFuncIfElseRule()); } 
	 EOF 
;

// Rule FuncIfElse
ruleFuncIfElse 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFuncIfElseAccess().getGroup()); }
		(rule__FuncIfElse__Group__0)
		{ after(grammarAccess.getFuncIfElseAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFuncReturn
entryRuleFuncReturn
:
{ before(grammarAccess.getFuncReturnRule()); }
	 ruleFuncReturn
{ after(grammarAccess.getFuncReturnRule()); } 
	 EOF 
;

// Rule FuncReturn
ruleFuncReturn 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFuncReturnAccess().getGroup()); }
		(rule__FuncReturn__Group__0)
		{ after(grammarAccess.getFuncReturnAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getProcessesAssignment_1_0()); }
		(rule__Model__ProcessesAssignment_1_0)
		{ after(grammarAccess.getModelAccess().getProcessesAssignment_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getModelAccess().getComponentsAssignment_1_1()); }
		(rule__Model__ComponentsAssignment_1_1)
		{ after(grammarAccess.getModelAccess().getComponentsAssignment_1_1()); }
	)
	|
	(
		{ before(grammarAccess.getModelAccess().getFunctionsAssignment_1_2()); }
		(rule__Model__FunctionsAssignment_1_2)
		{ after(grammarAccess.getModelAccess().getFunctionsAssignment_1_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Proc__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProcAccess().getInterleavingProcessParserRuleCall_0()); }
		ruleInterleavingProcess
		{ after(grammarAccess.getProcAccess().getInterleavingProcessParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getProcAccess().getNonDeterminismProcessParserRuleCall_1()); }
		ruleNonDeterminismProcess
		{ after(grammarAccess.getProcAccess().getNonDeterminismProcessParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NonDeterminismProcess__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNonDeterminismProcessAccess().getPredOutputProcessOrInputProcessesParserRuleCall_0()); }
		rulePredOutputProcessOrInputProcesses
		{ after(grammarAccess.getNonDeterminismProcessAccess().getPredOutputProcessOrInputProcessesParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getNonDeterminismProcessAccess().getIfProcessesParserRuleCall_1()); }
		ruleIfProcesses
		{ after(grammarAccess.getNonDeterminismProcessAccess().getIfProcessesParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getNonDeterminismProcessAccess().getNProcessParserRuleCall_2()); }
		ruleNProcess
		{ after(grammarAccess.getNonDeterminismProcessAccess().getNProcessParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Preconditions__PrecondAlternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPreconditionsAccess().getPrecondUpdateParserRuleCall_1_0_0()); }
		ruleUpdate
		{ after(grammarAccess.getPreconditionsAccess().getPrecondUpdateParserRuleCall_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getPreconditionsAccess().getPrecondAwarenessParserRuleCall_1_0_1()); }
		ruleAwareness
		{ after(grammarAccess.getPreconditionsAccess().getPrecondAwarenessParserRuleCall_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredOutputProcessOrInputProcesses__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPredOutputProcessOrInputProcessesAccess().getGroup_1_0()); }
		(rule__PredOutputProcessOrInputProcesses__Group_1_0__0)
		{ after(grammarAccess.getPredOutputProcessOrInputProcessesAccess().getGroup_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getPredOutputProcessOrInputProcessesAccess().getGroup_1_1()); }
		(rule__PredOutputProcessOrInputProcesses__Group_1_1__0)
		{ after(grammarAccess.getPredOutputProcessOrInputProcessesAccess().getGroup_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredOutputProcessOrInputProcess__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPredOutputProcessOrInputProcessAccess().getGroup_1_0()); }
		(rule__PredOutputProcessOrInputProcess__Group_1_0__0)
		{ after(grammarAccess.getPredOutputProcessOrInputProcessAccess().getGroup_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getPredOutputProcessOrInputProcessAccess().getGroup_1_1()); }
		(rule__PredOutputProcessOrInputProcess__Group_1_1__0)
		{ after(grammarAccess.getPredOutputProcessOrInputProcessAccess().getGroup_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NZCProcess__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNZCProcessAccess().getGroup_0()); }
		(rule__NZCProcess__Group_0__0)
		{ after(grammarAccess.getNZCProcessAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getNZCProcessAccess().getZeroProcessParserRuleCall_1()); }
		ruleZeroProcess
		{ after(grammarAccess.getNZCProcessAccess().getZeroProcessParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getNZCProcessAccess().getCallProcessParserRuleCall_2()); }
		ruleCallProcess
		{ after(grammarAccess.getNZCProcessAccess().getCallProcessParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NProcess__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNProcessAccess().getGroup_0()); }
		(rule__NProcess__Group_0__0)
		{ after(grammarAccess.getNProcessAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getNProcessAccess().getZeroProcessParserRuleCall_1()); }
		ruleZeroProcess
		{ after(grammarAccess.getNProcessAccess().getZeroProcessParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EnvInitValue__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEnvInitValueAccess().getGroup_0()); }
		(rule__EnvInitValue__Group_0__0)
		{ after(grammarAccess.getEnvInitValueAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getEnvInitValueAccess().getGroup_1()); }
		(rule__EnvInitValue__Group_1__0)
		{ after(grammarAccess.getEnvInitValueAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getEnvInitValueAccess().getGroup_2()); }
		(rule__EnvInitValue__Group_2__0)
		{ after(grammarAccess.getEnvInitValueAccess().getGroup_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EnvInitValue__ValueAlternatives_2_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEnvInitValueAccess().getValueTrueKeyword_2_1_0_0()); }
		True
		{ after(grammarAccess.getEnvInitValueAccess().getValueTrueKeyword_2_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getEnvInitValueAccess().getValueFalseKeyword_2_1_0_1()); }
		False
		{ after(grammarAccess.getEnvInitValueAccess().getValueFalseKeyword_2_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__OpAlternatives_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEqualityAccess().getOpEqualsSignEqualsSignKeyword_1_1_0_0()); }
		EqualsSignEqualsSign
		{ after(grammarAccess.getEqualityAccess().getOpEqualsSignEqualsSignKeyword_1_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getEqualityAccess().getOpExclamationMarkEqualsSignKeyword_1_1_0_1()); }
		ExclamationMarkEqualsSign
		{ after(grammarAccess.getEqualityAccess().getOpExclamationMarkEqualsSignKeyword_1_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__OpAlternatives_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonAccess().getOpGreaterThanSignEqualsSignKeyword_1_1_0_0()); }
		GreaterThanSignEqualsSign
		{ after(grammarAccess.getComparisonAccess().getOpGreaterThanSignEqualsSignKeyword_1_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonAccess().getOpLessThanSignEqualsSignKeyword_1_1_0_1()); }
		LessThanSignEqualsSign
		{ after(grammarAccess.getComparisonAccess().getOpLessThanSignEqualsSignKeyword_1_1_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonAccess().getOpGreaterThanSignKeyword_1_1_0_2()); }
		GreaterThanSign
		{ after(grammarAccess.getComparisonAccess().getOpGreaterThanSignKeyword_1_1_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonAccess().getOpLessThanSignKeyword_1_1_0_3()); }
		LessThanSign
		{ after(grammarAccess.getComparisonAccess().getOpLessThanSignKeyword_1_1_0_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusOrMinus__Alternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPlusOrMinusAccess().getGroup_1_0_0()); }
		(rule__PlusOrMinus__Group_1_0_0__0)
		{ after(grammarAccess.getPlusOrMinusAccess().getGroup_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getPlusOrMinusAccess().getGroup_1_0_1()); }
		(rule__PlusOrMinus__Group_1_0_1__0)
		{ after(grammarAccess.getPlusOrMinusAccess().getGroup_1_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getPlusOrMinusAccess().getGroup_1_0_2()); }
		(rule__PlusOrMinus__Group_1_0_2__0)
		{ after(grammarAccess.getPlusOrMinusAccess().getGroup_1_0_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MulOrDiv__OpAlternatives_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMulOrDivAccess().getOpAsteriskKeyword_1_1_0_0()); }
		Asterisk
		{ after(grammarAccess.getMulOrDivAccess().getOpAsteriskKeyword_1_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getMulOrDivAccess().getOpSolidusKeyword_1_1_0_1()); }
		Solidus
		{ after(grammarAccess.getMulOrDivAccess().getOpSolidusKeyword_1_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryAccess().getGroup_0()); }
		(rule__Primary__Group_0__0)
		{ after(grammarAccess.getPrimaryAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryAccess().getGroup_1()); }
		(rule__Primary__Group_1__0)
		{ after(grammarAccess.getPrimaryAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryAccess().getAtomicParserRuleCall_2()); }
		ruleAtomic
		{ after(grammarAccess.getPrimaryAccess().getAtomicParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomicAccess().getGroup_0()); }
		(rule__Atomic__Group_0__0)
		{ after(grammarAccess.getAtomicAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getAtomicAccess().getGroup_1()); }
		(rule__Atomic__Group_1__0)
		{ after(grammarAccess.getAtomicAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getAtomicAccess().getGroup_2()); }
		(rule__Atomic__Group_2__0)
		{ after(grammarAccess.getAtomicAccess().getGroup_2()); }
	)
	|
	(
		{ before(grammarAccess.getAtomicAccess().getGroup_3()); }
		(rule__Atomic__Group_3__0)
		{ after(grammarAccess.getAtomicAccess().getGroup_3()); }
	)
	|
	(
		{ before(grammarAccess.getAtomicAccess().getGroup_4()); }
		(rule__Atomic__Group_4__0)
		{ after(grammarAccess.getAtomicAccess().getGroup_4()); }
	)
	|
	(
		{ before(grammarAccess.getAtomicAccess().getGroup_5()); }
		(rule__Atomic__Group_5__0)
		{ after(grammarAccess.getAtomicAccess().getGroup_5()); }
	)
	|
	(
		{ before(grammarAccess.getAtomicAccess().getGroup_6()); }
		(rule__Atomic__Group_6__0)
		{ after(grammarAccess.getAtomicAccess().getGroup_6()); }
	)
	|
	(
		{ before(grammarAccess.getAtomicAccess().getGroup_7()); }
		(rule__Atomic__Group_7__0)
		{ after(grammarAccess.getAtomicAccess().getGroup_7()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__ValueAlternatives_2_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomicAccess().getValueTrueKeyword_2_1_0_0()); }
		True
		{ after(grammarAccess.getAtomicAccess().getValueTrueKeyword_2_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getAtomicAccess().getValueFalseKeyword_2_1_0_1()); }
		False
		{ after(grammarAccess.getAtomicAccess().getValueFalseKeyword_2_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeToSet__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAttributeToSetAccess().getGroup_0()); }
		(rule__AttributeToSet__Group_0__0)
		{ after(grammarAccess.getAttributeToSetAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getAttributeToSetAccess().getGroup_1()); }
		(rule__AttributeToSet__Group_1__0)
		{ after(grammarAccess.getAttributeToSetAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncStatement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFuncStatementAccess().getFuncVarAssignParserRuleCall_0()); }
		ruleFuncVarAssign
		{ after(grammarAccess.getFuncStatementAccess().getFuncVarAssignParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getFuncStatementAccess().getFuncIfElseParserRuleCall_1()); }
		ruleFuncIfElse
		{ after(grammarAccess.getFuncStatementAccess().getFuncIfElseParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getFuncStatementAccess().getFuncReturnParserRuleCall_2()); }
		ruleFuncReturn
		{ after(grammarAccess.getFuncStatementAccess().getFuncReturnParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getFuncStatementAccess().getFuncVarDeclarationParserRuleCall_3()); }
		ruleFuncVarDeclaration
		{ after(grammarAccess.getFuncStatementAccess().getFuncVarDeclarationParserRuleCall_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__0__Impl
	rule__Model__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getModelAction_0()); }
	()
	{ after(grammarAccess.getModelAccess().getModelAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getAlternatives_1()); }
	(rule__Model__Alternatives_1)*
	{ after(grammarAccess.getModelAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__InterleavingProcess__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InterleavingProcess__Group__0__Impl
	rule__InterleavingProcess__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InterleavingProcess__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInterleavingProcessAccess().getCallProcessParserRuleCall_0()); }
	ruleCallProcess
	{ after(grammarAccess.getInterleavingProcessAccess().getCallProcessParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InterleavingProcess__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InterleavingProcess__Group__1__Impl
	rule__InterleavingProcess__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__InterleavingProcess__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInterleavingProcessAccess().getInterleavingProcessSubProcsAction_1()); }
	()
	{ after(grammarAccess.getInterleavingProcessAccess().getInterleavingProcessSubProcsAction_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InterleavingProcess__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InterleavingProcess__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InterleavingProcess__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInterleavingProcessAccess().getGroup_2()); }
	(rule__InterleavingProcess__Group_2__0)*
	{ after(grammarAccess.getInterleavingProcessAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__InterleavingProcess__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InterleavingProcess__Group_2__0__Impl
	rule__InterleavingProcess__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InterleavingProcess__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInterleavingProcessAccess().getVerticalLineKeyword_2_0()); }
	VerticalLine
	{ after(grammarAccess.getInterleavingProcessAccess().getVerticalLineKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InterleavingProcess__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InterleavingProcess__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InterleavingProcess__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInterleavingProcessAccess().getSubProcsAssignment_2_1()); }
	(rule__InterleavingProcess__SubProcsAssignment_2_1)
	{ after(grammarAccess.getInterleavingProcessAccess().getSubProcsAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Preconditions__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Preconditions__Group__0__Impl
	rule__Preconditions__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Preconditions__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPreconditionsAccess().getPreconditionsAction_0()); }
	()
	{ after(grammarAccess.getPreconditionsAccess().getPreconditionsAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Preconditions__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Preconditions__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Preconditions__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPreconditionsAccess().getPrecondAssignment_1()); }
	(rule__Preconditions__PrecondAssignment_1)*
	{ after(grammarAccess.getPreconditionsAccess().getPrecondAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PredOutputProcessOrInputProcesses__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredOutputProcessOrInputProcesses__Group__0__Impl
	rule__PredOutputProcessOrInputProcesses__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PredOutputProcessOrInputProcesses__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredOutputProcessOrInputProcessesAccess().getPreconditionsParserRuleCall_0()); }
	rulePreconditions
	{ after(grammarAccess.getPredOutputProcessOrInputProcessesAccess().getPreconditionsParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredOutputProcessOrInputProcesses__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredOutputProcessOrInputProcesses__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PredOutputProcessOrInputProcesses__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredOutputProcessOrInputProcessesAccess().getAlternatives_1()); }
	(rule__PredOutputProcessOrInputProcesses__Alternatives_1)
	{ after(grammarAccess.getPredOutputProcessOrInputProcessesAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PredOutputProcessOrInputProcesses__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredOutputProcessOrInputProcesses__Group_1_0__0__Impl
	rule__PredOutputProcessOrInputProcesses__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PredOutputProcessOrInputProcesses__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredOutputProcessOrInputProcessesAccess().getOutputProcessPrecondAction_1_0_0()); }
	()
	{ after(grammarAccess.getPredOutputProcessOrInputProcessesAccess().getOutputProcessPrecondAction_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredOutputProcessOrInputProcesses__Group_1_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredOutputProcessOrInputProcesses__Group_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PredOutputProcessOrInputProcesses__Group_1_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredOutputProcessOrInputProcessesAccess().getOutputProcessPartParserRuleCall_1_0_1()); }
	ruleOutputProcessPart
	{ after(grammarAccess.getPredOutputProcessOrInputProcessesAccess().getOutputProcessPartParserRuleCall_1_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PredOutputProcessOrInputProcesses__Group_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredOutputProcessOrInputProcesses__Group_1_1__0__Impl
	rule__PredOutputProcessOrInputProcesses__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PredOutputProcessOrInputProcesses__Group_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredOutputProcessOrInputProcessesAccess().getInputProcessesPrecondsAction_1_1_0()); }
	()
	{ after(grammarAccess.getPredOutputProcessOrInputProcessesAccess().getInputProcessesPrecondsAction_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredOutputProcessOrInputProcesses__Group_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredOutputProcessOrInputProcesses__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PredOutputProcessOrInputProcesses__Group_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredOutputProcessOrInputProcessesAccess().getInputProcessesPartParserRuleCall_1_1_1()); }
	ruleInputProcessesPart
	{ after(grammarAccess.getPredOutputProcessOrInputProcessesAccess().getInputProcessesPartParserRuleCall_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PredOutputProcessOrInputProcess__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredOutputProcessOrInputProcess__Group__0__Impl
	rule__PredOutputProcessOrInputProcess__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PredOutputProcessOrInputProcess__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredOutputProcessOrInputProcessAccess().getPreconditionsParserRuleCall_0()); }
	rulePreconditions
	{ after(grammarAccess.getPredOutputProcessOrInputProcessAccess().getPreconditionsParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredOutputProcessOrInputProcess__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredOutputProcessOrInputProcess__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PredOutputProcessOrInputProcess__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredOutputProcessOrInputProcessAccess().getAlternatives_1()); }
	(rule__PredOutputProcessOrInputProcess__Alternatives_1)
	{ after(grammarAccess.getPredOutputProcessOrInputProcessAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PredOutputProcessOrInputProcess__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredOutputProcessOrInputProcess__Group_1_0__0__Impl
	rule__PredOutputProcessOrInputProcess__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PredOutputProcessOrInputProcess__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredOutputProcessOrInputProcessAccess().getOutputProcessPrecondAction_1_0_0()); }
	()
	{ after(grammarAccess.getPredOutputProcessOrInputProcessAccess().getOutputProcessPrecondAction_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredOutputProcessOrInputProcess__Group_1_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredOutputProcessOrInputProcess__Group_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PredOutputProcessOrInputProcess__Group_1_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredOutputProcessOrInputProcessAccess().getOutputProcessPartParserRuleCall_1_0_1()); }
	ruleOutputProcessPart
	{ after(grammarAccess.getPredOutputProcessOrInputProcessAccess().getOutputProcessPartParserRuleCall_1_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PredOutputProcessOrInputProcess__Group_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredOutputProcessOrInputProcess__Group_1_1__0__Impl
	rule__PredOutputProcessOrInputProcess__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PredOutputProcessOrInputProcess__Group_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredOutputProcessOrInputProcessAccess().getInputProcessesPrecondsAction_1_1_0()); }
	()
	{ after(grammarAccess.getPredOutputProcessOrInputProcessAccess().getInputProcessesPrecondsAction_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredOutputProcessOrInputProcess__Group_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredOutputProcessOrInputProcess__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PredOutputProcessOrInputProcess__Group_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredOutputProcessOrInputProcessAccess().getInputsAssignment_1_1_1()); }
	(rule__PredOutputProcessOrInputProcess__InputsAssignment_1_1_1)
	{ after(grammarAccess.getPredOutputProcessOrInputProcessAccess().getInputsAssignment_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__InputProcessesPart__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InputProcessesPart__Group__0__Impl
	rule__InputProcessesPart__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InputProcessesPart__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInputProcessesPartAccess().getInputsAssignment_0()); }
	(rule__InputProcessesPart__InputsAssignment_0)
	{ after(grammarAccess.getInputProcessesPartAccess().getInputsAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InputProcessesPart__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InputProcessesPart__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InputProcessesPart__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInputProcessesPartAccess().getGroup_1()); }
	(rule__InputProcessesPart__Group_1__0)*
	{ after(grammarAccess.getInputProcessesPartAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__InputProcessesPart__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InputProcessesPart__Group_1__0__Impl
	rule__InputProcessesPart__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InputProcessesPart__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInputProcessesPartAccess().getPlusSignKeyword_1_0()); }
	PlusSign
	{ after(grammarAccess.getInputProcessesPartAccess().getPlusSignKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InputProcessesPart__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InputProcessesPart__Group_1__1__Impl
	rule__InputProcessesPart__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__InputProcessesPart__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInputProcessesPartAccess().getPrecondsAssignment_1_1()); }
	(rule__InputProcessesPart__PrecondsAssignment_1_1)
	{ after(grammarAccess.getInputProcessesPartAccess().getPrecondsAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InputProcessesPart__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InputProcessesPart__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InputProcessesPart__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInputProcessesPartAccess().getInputsAssignment_1_2()); }
	(rule__InputProcessesPart__InputsAssignment_1_2)
	{ after(grammarAccess.getInputProcessesPartAccess().getInputsAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__InputProcess__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InputProcess__Group__0__Impl
	rule__InputProcess__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InputProcess__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInputProcessAccess().getInputProcessAction_0()); }
	()
	{ after(grammarAccess.getInputProcessAccess().getInputProcessAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InputProcess__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InputProcess__Group__1__Impl
	rule__InputProcess__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__InputProcess__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInputProcessAccess().getReceiveKeyword_1()); }
	Receive
	{ after(grammarAccess.getInputProcessAccess().getReceiveKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InputProcess__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InputProcess__Group__2__Impl
	rule__InputProcess__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__InputProcess__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInputProcessAccess().getLeftParenthesisKeyword_2()); }
	LeftParenthesis
	{ after(grammarAccess.getInputProcessAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InputProcess__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InputProcess__Group__3__Impl
	rule__InputProcess__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__InputProcess__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInputProcessAccess().getRec_predAssignment_3()); }
	(rule__InputProcess__Rec_predAssignment_3)
	{ after(grammarAccess.getInputProcessAccess().getRec_predAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InputProcess__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InputProcess__Group__4__Impl
	rule__InputProcess__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__InputProcess__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInputProcessAccess().getRightParenthesisKeyword_4()); }
	RightParenthesis
	{ after(grammarAccess.getInputProcessAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InputProcess__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InputProcess__Group__5__Impl
	rule__InputProcess__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__InputProcess__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInputProcessAccess().getLeftCurlyBracketKeyword_5()); }
	LeftCurlyBracket
	{ after(grammarAccess.getInputProcessAccess().getLeftCurlyBracketKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InputProcess__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InputProcess__Group__6__Impl
	rule__InputProcess__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__InputProcess__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInputProcessAccess().getGroup_6()); }
	(rule__InputProcess__Group_6__0)?
	{ after(grammarAccess.getInputProcessAccess().getGroup_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InputProcess__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InputProcess__Group__7__Impl
	rule__InputProcess__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__InputProcess__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInputProcessAccess().getRightCurlyBracketKeyword_7()); }
	RightCurlyBracket
	{ after(grammarAccess.getInputProcessAccess().getRightCurlyBracketKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InputProcess__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InputProcess__Group__8__Impl
	rule__InputProcess__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__InputProcess__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInputProcessAccess().getGroup_8()); }
	(rule__InputProcess__Group_8__0)?
	{ after(grammarAccess.getInputProcessAccess().getGroup_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InputProcess__Group__9
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InputProcess__Group__9__Impl
	rule__InputProcess__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__InputProcess__Group__9__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInputProcessAccess().getFullStopKeyword_9()); }
	FullStop
	{ after(grammarAccess.getInputProcessAccess().getFullStopKeyword_9()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InputProcess__Group__10
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InputProcess__Group__10__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InputProcess__Group__10__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInputProcessAccess().getNextAssignment_10()); }
	(rule__InputProcess__NextAssignment_10)
	{ after(grammarAccess.getInputProcessAccess().getNextAssignment_10()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__InputProcess__Group_6__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InputProcess__Group_6__0__Impl
	rule__InputProcess__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InputProcess__Group_6__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInputProcessAccess().getMsgInPartsAssignment_6_0()); }
	(rule__InputProcess__MsgInPartsAssignment_6_0)
	{ after(grammarAccess.getInputProcessAccess().getMsgInPartsAssignment_6_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InputProcess__Group_6__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InputProcess__Group_6__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InputProcess__Group_6__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInputProcessAccess().getGroup_6_1()); }
	(rule__InputProcess__Group_6_1__0)*
	{ after(grammarAccess.getInputProcessAccess().getGroup_6_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__InputProcess__Group_6_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InputProcess__Group_6_1__0__Impl
	rule__InputProcess__Group_6_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InputProcess__Group_6_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInputProcessAccess().getCommaKeyword_6_1_0()); }
	Comma
	{ after(grammarAccess.getInputProcessAccess().getCommaKeyword_6_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InputProcess__Group_6_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InputProcess__Group_6_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InputProcess__Group_6_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInputProcessAccess().getMsgInPartsAssignment_6_1_1()); }
	(rule__InputProcess__MsgInPartsAssignment_6_1_1)
	{ after(grammarAccess.getInputProcessAccess().getMsgInPartsAssignment_6_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__InputProcess__Group_8__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InputProcess__Group_8__0__Impl
	rule__InputProcess__Group_8__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InputProcess__Group_8__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInputProcessAccess().getPrintKeyword_8_0()); }
	Print
	{ after(grammarAccess.getInputProcessAccess().getPrintKeyword_8_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InputProcess__Group_8__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InputProcess__Group_8__1__Impl
	rule__InputProcess__Group_8__2
;
finally {
	restoreStackSize(stackSize);
}

rule__InputProcess__Group_8__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInputProcessAccess().getLeftParenthesisKeyword_8_1()); }
	LeftParenthesis
	{ after(grammarAccess.getInputProcessAccess().getLeftParenthesisKeyword_8_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InputProcess__Group_8__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InputProcess__Group_8__2__Impl
	rule__InputProcess__Group_8__3
;
finally {
	restoreStackSize(stackSize);
}

rule__InputProcess__Group_8__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInputProcessAccess().getOutputAssignment_8_2()); }
	(rule__InputProcess__OutputAssignment_8_2)
	{ after(grammarAccess.getInputProcessAccess().getOutputAssignment_8_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InputProcess__Group_8__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InputProcess__Group_8__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InputProcess__Group_8__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInputProcessAccess().getRightParenthesisKeyword_8_3()); }
	RightParenthesis
	{ after(grammarAccess.getInputProcessAccess().getRightParenthesisKeyword_8_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OutputProcessPart__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OutputProcessPart__Group__0__Impl
	rule__OutputProcessPart__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputProcessPart__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutputProcessPartAccess().getSendKeyword_0()); }
	Send
	{ after(grammarAccess.getOutputProcessPartAccess().getSendKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputProcessPart__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OutputProcessPart__Group__1__Impl
	rule__OutputProcessPart__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputProcessPart__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutputProcessPartAccess().getLeftCurlyBracketKeyword_1()); }
	LeftCurlyBracket
	{ after(grammarAccess.getOutputProcessPartAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputProcessPart__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OutputProcessPart__Group__2__Impl
	rule__OutputProcessPart__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputProcessPart__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutputProcessPartAccess().getGroup_2()); }
	(rule__OutputProcessPart__Group_2__0)?
	{ after(grammarAccess.getOutputProcessPartAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputProcessPart__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OutputProcessPart__Group__3__Impl
	rule__OutputProcessPart__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputProcessPart__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutputProcessPartAccess().getRightCurlyBracketKeyword_3()); }
	RightCurlyBracket
	{ after(grammarAccess.getOutputProcessPartAccess().getRightCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputProcessPart__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OutputProcessPart__Group__4__Impl
	rule__OutputProcessPart__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputProcessPart__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutputProcessPartAccess().getCommercialAtKeyword_4()); }
	CommercialAt
	{ after(grammarAccess.getOutputProcessPartAccess().getCommercialAtKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputProcessPart__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OutputProcessPart__Group__5__Impl
	rule__OutputProcessPart__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputProcessPart__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutputProcessPartAccess().getLeftParenthesisKeyword_5()); }
	LeftParenthesis
	{ after(grammarAccess.getOutputProcessPartAccess().getLeftParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputProcessPart__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OutputProcessPart__Group__6__Impl
	rule__OutputProcessPart__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputProcessPart__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutputProcessPartAccess().getSend_predAssignment_6()); }
	(rule__OutputProcessPart__Send_predAssignment_6)
	{ after(grammarAccess.getOutputProcessPartAccess().getSend_predAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputProcessPart__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OutputProcessPart__Group__7__Impl
	rule__OutputProcessPart__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputProcessPart__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutputProcessPartAccess().getRightParenthesisKeyword_7()); }
	RightParenthesis
	{ after(grammarAccess.getOutputProcessPartAccess().getRightParenthesisKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputProcessPart__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OutputProcessPart__Group__8__Impl
	rule__OutputProcessPart__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputProcessPart__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutputProcessPartAccess().getGroup_8()); }
	(rule__OutputProcessPart__Group_8__0)?
	{ after(grammarAccess.getOutputProcessPartAccess().getGroup_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputProcessPart__Group__9
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OutputProcessPart__Group__9__Impl
	rule__OutputProcessPart__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputProcessPart__Group__9__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutputProcessPartAccess().getGroup_9()); }
	(rule__OutputProcessPart__Group_9__0)?
	{ after(grammarAccess.getOutputProcessPartAccess().getGroup_9()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputProcessPart__Group__10
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OutputProcessPart__Group__10__Impl
	rule__OutputProcessPart__Group__11
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputProcessPart__Group__10__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutputProcessPartAccess().getFullStopKeyword_10()); }
	FullStop
	{ after(grammarAccess.getOutputProcessPartAccess().getFullStopKeyword_10()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputProcessPart__Group__11
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OutputProcessPart__Group__11__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputProcessPart__Group__11__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutputProcessPartAccess().getNextAssignment_11()); }
	(rule__OutputProcessPart__NextAssignment_11)
	{ after(grammarAccess.getOutputProcessPartAccess().getNextAssignment_11()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OutputProcessPart__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OutputProcessPart__Group_2__0__Impl
	rule__OutputProcessPart__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputProcessPart__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutputProcessPartAccess().getMsgOutPartsAssignment_2_0()); }
	(rule__OutputProcessPart__MsgOutPartsAssignment_2_0)
	{ after(grammarAccess.getOutputProcessPartAccess().getMsgOutPartsAssignment_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputProcessPart__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OutputProcessPart__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputProcessPart__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutputProcessPartAccess().getGroup_2_1()); }
	(rule__OutputProcessPart__Group_2_1__0)*
	{ after(grammarAccess.getOutputProcessPartAccess().getGroup_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OutputProcessPart__Group_2_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OutputProcessPart__Group_2_1__0__Impl
	rule__OutputProcessPart__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputProcessPart__Group_2_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutputProcessPartAccess().getCommaKeyword_2_1_0()); }
	Comma
	{ after(grammarAccess.getOutputProcessPartAccess().getCommaKeyword_2_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputProcessPart__Group_2_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OutputProcessPart__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputProcessPart__Group_2_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutputProcessPartAccess().getMsgOutPartsAssignment_2_1_1()); }
	(rule__OutputProcessPart__MsgOutPartsAssignment_2_1_1)
	{ after(grammarAccess.getOutputProcessPartAccess().getMsgOutPartsAssignment_2_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OutputProcessPart__Group_8__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OutputProcessPart__Group_8__0__Impl
	rule__OutputProcessPart__Group_8__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputProcessPart__Group_8__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutputProcessPartAccess().getPrintKeyword_8_0()); }
	Print
	{ after(grammarAccess.getOutputProcessPartAccess().getPrintKeyword_8_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputProcessPart__Group_8__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OutputProcessPart__Group_8__1__Impl
	rule__OutputProcessPart__Group_8__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputProcessPart__Group_8__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutputProcessPartAccess().getLeftParenthesisKeyword_8_1()); }
	LeftParenthesis
	{ after(grammarAccess.getOutputProcessPartAccess().getLeftParenthesisKeyword_8_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputProcessPart__Group_8__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OutputProcessPart__Group_8__2__Impl
	rule__OutputProcessPart__Group_8__3
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputProcessPart__Group_8__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutputProcessPartAccess().getOutputAssignment_8_2()); }
	(rule__OutputProcessPart__OutputAssignment_8_2)
	{ after(grammarAccess.getOutputProcessPartAccess().getOutputAssignment_8_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputProcessPart__Group_8__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OutputProcessPart__Group_8__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputProcessPart__Group_8__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutputProcessPartAccess().getRightParenthesisKeyword_8_3()); }
	RightParenthesis
	{ after(grammarAccess.getOutputProcessPartAccess().getRightParenthesisKeyword_8_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OutputProcessPart__Group_9__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OutputProcessPart__Group_9__0__Impl
	rule__OutputProcessPart__Group_9__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputProcessPart__Group_9__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutputProcessPartAccess().getSleepKeyword_9_0()); }
	Sleep
	{ after(grammarAccess.getOutputProcessPartAccess().getSleepKeyword_9_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputProcessPart__Group_9__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OutputProcessPart__Group_9__1__Impl
	rule__OutputProcessPart__Group_9__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputProcessPart__Group_9__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutputProcessPartAccess().getLeftParenthesisKeyword_9_1()); }
	LeftParenthesis
	{ after(grammarAccess.getOutputProcessPartAccess().getLeftParenthesisKeyword_9_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputProcessPart__Group_9__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OutputProcessPart__Group_9__2__Impl
	rule__OutputProcessPart__Group_9__3
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputProcessPart__Group_9__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutputProcessPartAccess().getMsecAssignment_9_2()); }
	(rule__OutputProcessPart__MsecAssignment_9_2)
	{ after(grammarAccess.getOutputProcessPartAccess().getMsecAssignment_9_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputProcessPart__Group_9__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OutputProcessPart__Group_9__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputProcessPart__Group_9__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutputProcessPartAccess().getRightParenthesisKeyword_9_3()); }
	RightParenthesis
	{ after(grammarAccess.getOutputProcessPartAccess().getRightParenthesisKeyword_9_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IfProcesses__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfProcesses__Group__0__Impl
	rule__IfProcesses__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfProcesses__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfProcessesAccess().getIfProcessesAction_0()); }
	()
	{ after(grammarAccess.getIfProcessesAccess().getIfProcessesAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfProcesses__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfProcesses__Group__1__Impl
	rule__IfProcesses__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IfProcesses__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfProcessesAccess().getBranchesAssignment_1()); }
	(rule__IfProcesses__BranchesAssignment_1)
	{ after(grammarAccess.getIfProcessesAccess().getBranchesAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfProcesses__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfProcesses__Group__2__Impl
	rule__IfProcesses__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IfProcesses__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfProcessesAccess().getGroup_2()); }
	(rule__IfProcesses__Group_2__0)*
	{ after(grammarAccess.getIfProcessesAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfProcesses__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfProcesses__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfProcesses__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfProcessesAccess().getGroup_3()); }
	(rule__IfProcesses__Group_3__0)?
	{ after(grammarAccess.getIfProcessesAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IfProcesses__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfProcesses__Group_2__0__Impl
	rule__IfProcesses__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfProcesses__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfProcessesAccess().getElseKeyword_2_0()); }
	Else
	{ after(grammarAccess.getIfProcessesAccess().getElseKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfProcesses__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfProcesses__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfProcesses__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfProcessesAccess().getBranchesAssignment_2_1()); }
	(rule__IfProcesses__BranchesAssignment_2_1)
	{ after(grammarAccess.getIfProcessesAccess().getBranchesAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IfProcesses__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfProcesses__Group_3__0__Impl
	rule__IfProcesses__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfProcesses__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfProcessesAccess().getElseKeyword_3_0()); }
	Else
	{ after(grammarAccess.getIfProcessesAccess().getElseKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfProcesses__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfProcesses__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfProcesses__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfProcessesAccess().getBranchesAssignment_3_1()); }
	(rule__IfProcesses__BranchesAssignment_3_1)
	{ after(grammarAccess.getIfProcessesAccess().getBranchesAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IfBranchProcess__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfBranchProcess__Group__0__Impl
	rule__IfBranchProcess__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfBranchProcess__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfBranchProcessAccess().getIfBranchProcessAction_0()); }
	()
	{ after(grammarAccess.getIfBranchProcessAccess().getIfBranchProcessAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfBranchProcess__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfBranchProcess__Group__1__Impl
	rule__IfBranchProcess__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IfBranchProcess__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfBranchProcessAccess().getIfKeyword_1()); }
	If
	{ after(grammarAccess.getIfBranchProcessAccess().getIfKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfBranchProcess__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfBranchProcess__Group__2__Impl
	rule__IfBranchProcess__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IfBranchProcess__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfBranchProcessAccess().getCondAssignment_2()); }
	(rule__IfBranchProcess__CondAssignment_2)
	{ after(grammarAccess.getIfBranchProcessAccess().getCondAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfBranchProcess__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfBranchProcess__Group__3__Impl
	rule__IfBranchProcess__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__IfBranchProcess__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfBranchProcessAccess().getLeftCurlyBracketKeyword_3()); }
	LeftCurlyBracket
	{ after(grammarAccess.getIfBranchProcessAccess().getLeftCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfBranchProcess__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfBranchProcess__Group__4__Impl
	rule__IfBranchProcess__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__IfBranchProcess__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfBranchProcessAccess().getThenAssignment_4()); }
	(rule__IfBranchProcess__ThenAssignment_4)
	{ after(grammarAccess.getIfBranchProcessAccess().getThenAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfBranchProcess__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfBranchProcess__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfBranchProcess__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfBranchProcessAccess().getRightCurlyBracketKeyword_5()); }
	RightCurlyBracket
	{ after(grammarAccess.getIfBranchProcessAccess().getRightCurlyBracketKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ElseBranchProcess__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ElseBranchProcess__Group__0__Impl
	rule__ElseBranchProcess__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ElseBranchProcess__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElseBranchProcessAccess().getIfBranchProcessAction_0()); }
	()
	{ after(grammarAccess.getElseBranchProcessAccess().getIfBranchProcessAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ElseBranchProcess__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ElseBranchProcess__Group__1__Impl
	rule__ElseBranchProcess__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ElseBranchProcess__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElseBranchProcessAccess().getLeftCurlyBracketKeyword_1()); }
	LeftCurlyBracket
	{ after(grammarAccess.getElseBranchProcessAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ElseBranchProcess__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ElseBranchProcess__Group__2__Impl
	rule__ElseBranchProcess__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ElseBranchProcess__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElseBranchProcessAccess().getThenAssignment_2()); }
	(rule__ElseBranchProcess__ThenAssignment_2)
	{ after(grammarAccess.getElseBranchProcessAccess().getThenAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ElseBranchProcess__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ElseBranchProcess__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ElseBranchProcess__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElseBranchProcessAccess().getRightCurlyBracketKeyword_3()); }
	RightCurlyBracket
	{ after(grammarAccess.getElseBranchProcessAccess().getRightCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Update__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Update__Group__0__Impl
	rule__Update__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Update__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUpdateAccess().getLeftSquareBracketKeyword_0()); }
	LeftSquareBracket
	{ after(grammarAccess.getUpdateAccess().getLeftSquareBracketKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Update__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Update__Group__1__Impl
	rule__Update__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Update__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUpdateAccess().getVarsAssignment_1()); }
	(rule__Update__VarsAssignment_1)
	{ after(grammarAccess.getUpdateAccess().getVarsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Update__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Update__Group__2__Impl
	rule__Update__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Update__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUpdateAccess().getColonEqualsSignKeyword_2()); }
	ColonEqualsSign
	{ after(grammarAccess.getUpdateAccess().getColonEqualsSignKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Update__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Update__Group__3__Impl
	rule__Update__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Update__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUpdateAccess().getValsAssignment_3()); }
	(rule__Update__ValsAssignment_3)
	{ after(grammarAccess.getUpdateAccess().getValsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Update__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Update__Group__4__Impl
	rule__Update__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Update__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUpdateAccess().getGroup_4()); }
	(rule__Update__Group_4__0)*
	{ after(grammarAccess.getUpdateAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Update__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Update__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Update__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUpdateAccess().getRightSquareBracketKeyword_5()); }
	RightSquareBracket
	{ after(grammarAccess.getUpdateAccess().getRightSquareBracketKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Update__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Update__Group_4__0__Impl
	rule__Update__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Update__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUpdateAccess().getCommaKeyword_4_0()); }
	Comma
	{ after(grammarAccess.getUpdateAccess().getCommaKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Update__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Update__Group_4__1__Impl
	rule__Update__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Update__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUpdateAccess().getVarsAssignment_4_1()); }
	(rule__Update__VarsAssignment_4_1)
	{ after(grammarAccess.getUpdateAccess().getVarsAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Update__Group_4__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Update__Group_4__2__Impl
	rule__Update__Group_4__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Update__Group_4__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUpdateAccess().getColonEqualsSignKeyword_4_2()); }
	ColonEqualsSign
	{ after(grammarAccess.getUpdateAccess().getColonEqualsSignKeyword_4_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Update__Group_4__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Update__Group_4__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Update__Group_4__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUpdateAccess().getValsAssignment_4_3()); }
	(rule__Update__ValsAssignment_4_3)
	{ after(grammarAccess.getUpdateAccess().getValsAssignment_4_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Awareness__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Awareness__Group__0__Impl
	rule__Awareness__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Awareness__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAwarenessAccess().getWaitKeyword_0()); }
	Wait
	{ after(grammarAccess.getAwarenessAccess().getWaitKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Awareness__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Awareness__Group__1__Impl
	rule__Awareness__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Awareness__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAwarenessAccess().getUntilKeyword_1()); }
	Until
	{ after(grammarAccess.getAwarenessAccess().getUntilKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Awareness__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Awareness__Group__2__Impl
	rule__Awareness__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Awareness__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAwarenessAccess().getLeftParenthesisKeyword_2()); }
	LeftParenthesis
	{ after(grammarAccess.getAwarenessAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Awareness__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Awareness__Group__3__Impl
	rule__Awareness__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Awareness__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAwarenessAccess().getPredAssignment_3()); }
	(rule__Awareness__PredAssignment_3)
	{ after(grammarAccess.getAwarenessAccess().getPredAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Awareness__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Awareness__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Awareness__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAwarenessAccess().getRightParenthesisKeyword_4()); }
	RightParenthesis
	{ after(grammarAccess.getAwarenessAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NZCProcess__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NZCProcess__Group_0__0__Impl
	rule__NZCProcess__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NZCProcess__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNZCProcessAccess().getLeftParenthesisKeyword_0_0()); }
	LeftParenthesis
	{ after(grammarAccess.getNZCProcessAccess().getLeftParenthesisKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NZCProcess__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NZCProcess__Group_0__1__Impl
	rule__NZCProcess__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NZCProcess__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNZCProcessAccess().getProcParserRuleCall_0_1()); }
	ruleProc
	{ after(grammarAccess.getNZCProcessAccess().getProcParserRuleCall_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NZCProcess__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NZCProcess__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NZCProcess__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNZCProcessAccess().getRightParenthesisKeyword_0_2()); }
	RightParenthesis
	{ after(grammarAccess.getNZCProcessAccess().getRightParenthesisKeyword_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NProcess__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NProcess__Group_0__0__Impl
	rule__NProcess__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NProcess__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNProcessAccess().getLeftParenthesisKeyword_0_0()); }
	LeftParenthesis
	{ after(grammarAccess.getNProcessAccess().getLeftParenthesisKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NProcess__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NProcess__Group_0__1__Impl
	rule__NProcess__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NProcess__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNProcessAccess().getProcParserRuleCall_0_1()); }
	ruleProc
	{ after(grammarAccess.getNProcessAccess().getProcParserRuleCall_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NProcess__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NProcess__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NProcess__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNProcessAccess().getRightParenthesisKeyword_0_2()); }
	RightParenthesis
	{ after(grammarAccess.getNProcessAccess().getRightParenthesisKeyword_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CallProcess__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CallProcess__Group__0__Impl
	rule__CallProcess__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CallProcess__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCallProcessAccess().getCallProcessAction_0()); }
	()
	{ after(grammarAccess.getCallProcessAccess().getCallProcessAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CallProcess__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CallProcess__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CallProcess__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCallProcessAccess().getProcnameAssignment_1()); }
	(rule__CallProcess__ProcnameAssignment_1)
	{ after(grammarAccess.getCallProcessAccess().getProcnameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ZeroProcess__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ZeroProcess__Group__0__Impl
	rule__ZeroProcess__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ZeroProcess__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getZeroProcessAccess().getZeroProcessAction_0()); }
	()
	{ after(grammarAccess.getZeroProcessAccess().getZeroProcessAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ZeroProcess__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ZeroProcess__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ZeroProcess__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getZeroProcessAccess().getNilKeyword_1()); }
	Nil
	{ after(grammarAccess.getZeroProcessAccess().getNilKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ProcessDefinition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProcessDefinition__Group__0__Impl
	rule__ProcessDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessDefinition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcessDefinitionAccess().getProcKeyword_0()); }
	Proc
	{ after(grammarAccess.getProcessDefinitionAccess().getProcKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessDefinition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProcessDefinition__Group__1__Impl
	rule__ProcessDefinition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessDefinition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcessDefinitionAccess().getNameAssignment_1()); }
	(rule__ProcessDefinition__NameAssignment_1)
	{ after(grammarAccess.getProcessDefinitionAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessDefinition__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProcessDefinition__Group__2__Impl
	rule__ProcessDefinition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessDefinition__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcessDefinitionAccess().getEqualsSignKeyword_2()); }
	EqualsSign
	{ after(grammarAccess.getProcessDefinitionAccess().getEqualsSignKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessDefinition__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProcessDefinition__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessDefinition__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcessDefinitionAccess().getProcAssignment_3()); }
	(rule__ProcessDefinition__ProcAssignment_3)
	{ after(grammarAccess.getProcessDefinitionAccess().getProcAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EnvInitValue__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EnvInitValue__Group_0__0__Impl
	rule__EnvInitValue__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnvInitValue__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnvInitValueAccess().getIntConstantAction_0_0()); }
	()
	{ after(grammarAccess.getEnvInitValueAccess().getIntConstantAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EnvInitValue__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EnvInitValue__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnvInitValue__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnvInitValueAccess().getValueAssignment_0_1()); }
	(rule__EnvInitValue__ValueAssignment_0_1)
	{ after(grammarAccess.getEnvInitValueAccess().getValueAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EnvInitValue__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EnvInitValue__Group_1__0__Impl
	rule__EnvInitValue__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnvInitValue__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnvInitValueAccess().getStringConstantAction_1_0()); }
	()
	{ after(grammarAccess.getEnvInitValueAccess().getStringConstantAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EnvInitValue__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EnvInitValue__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnvInitValue__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnvInitValueAccess().getValueAssignment_1_1()); }
	(rule__EnvInitValue__ValueAssignment_1_1)
	{ after(grammarAccess.getEnvInitValueAccess().getValueAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EnvInitValue__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EnvInitValue__Group_2__0__Impl
	rule__EnvInitValue__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnvInitValue__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnvInitValueAccess().getBoolConstantAction_2_0()); }
	()
	{ after(grammarAccess.getEnvInitValueAccess().getBoolConstantAction_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EnvInitValue__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EnvInitValue__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnvInitValue__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnvInitValueAccess().getValueAssignment_2_1()); }
	(rule__EnvInitValue__ValueAssignment_2_1)
	{ after(grammarAccess.getEnvInitValueAccess().getValueAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Environment__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Environment__Group__0__Impl
	rule__Environment__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Environment__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnvironmentAccess().getEnvironmentAction_0()); }
	()
	{ after(grammarAccess.getEnvironmentAccess().getEnvironmentAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Environment__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Environment__Group__1__Impl
	rule__Environment__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Environment__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnvironmentAccess().getLeftCurlyBracketKeyword_1()); }
	LeftCurlyBracket
	{ after(grammarAccess.getEnvironmentAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Environment__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Environment__Group__2__Impl
	rule__Environment__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Environment__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnvironmentAccess().getGroup_2()); }
	(rule__Environment__Group_2__0)?
	{ after(grammarAccess.getEnvironmentAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Environment__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Environment__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Environment__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnvironmentAccess().getRightCurlyBracketKeyword_3()); }
	RightCurlyBracket
	{ after(grammarAccess.getEnvironmentAccess().getRightCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Environment__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Environment__Group_2__0__Impl
	rule__Environment__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Environment__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnvironmentAccess().getAttrsAssignment_2_0()); }
	(rule__Environment__AttrsAssignment_2_0)
	{ after(grammarAccess.getEnvironmentAccess().getAttrsAssignment_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Environment__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Environment__Group_2__1__Impl
	rule__Environment__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Environment__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnvironmentAccess().getColonEqualsSignKeyword_2_1()); }
	ColonEqualsSign
	{ after(grammarAccess.getEnvironmentAccess().getColonEqualsSignKeyword_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Environment__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Environment__Group_2__2__Impl
	rule__Environment__Group_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Environment__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnvironmentAccess().getValsAssignment_2_2()); }
	(rule__Environment__ValsAssignment_2_2)
	{ after(grammarAccess.getEnvironmentAccess().getValsAssignment_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Environment__Group_2__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Environment__Group_2__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Environment__Group_2__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnvironmentAccess().getGroup_2_3()); }
	(rule__Environment__Group_2_3__0)*
	{ after(grammarAccess.getEnvironmentAccess().getGroup_2_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Environment__Group_2_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Environment__Group_2_3__0__Impl
	rule__Environment__Group_2_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Environment__Group_2_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnvironmentAccess().getCommaKeyword_2_3_0()); }
	Comma
	{ after(grammarAccess.getEnvironmentAccess().getCommaKeyword_2_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Environment__Group_2_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Environment__Group_2_3__1__Impl
	rule__Environment__Group_2_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Environment__Group_2_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnvironmentAccess().getAttrsAssignment_2_3_1()); }
	(rule__Environment__AttrsAssignment_2_3_1)
	{ after(grammarAccess.getEnvironmentAccess().getAttrsAssignment_2_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Environment__Group_2_3__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Environment__Group_2_3__2__Impl
	rule__Environment__Group_2_3__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Environment__Group_2_3__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnvironmentAccess().getColonEqualsSignKeyword_2_3_2()); }
	ColonEqualsSign
	{ after(grammarAccess.getEnvironmentAccess().getColonEqualsSignKeyword_2_3_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Environment__Group_2_3__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Environment__Group_2_3__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Environment__Group_2_3__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnvironmentAccess().getValsAssignment_2_3_3()); }
	(rule__Environment__ValsAssignment_2_3_3)
	{ after(grammarAccess.getEnvironmentAccess().getValsAssignment_2_3_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ComponentDefinition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComponentDefinition__Group__0__Impl
	rule__ComponentDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentDefinition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComponentDefinitionAccess().getComponentKeyword_0()); }
	Component
	{ after(grammarAccess.getComponentDefinitionAccess().getComponentKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentDefinition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComponentDefinition__Group__1__Impl
	rule__ComponentDefinition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentDefinition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComponentDefinitionAccess().getEnvAssignment_1()); }
	(rule__ComponentDefinition__EnvAssignment_1)
	{ after(grammarAccess.getComponentDefinitionAccess().getEnvAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentDefinition__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComponentDefinition__Group__2__Impl
	rule__ComponentDefinition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentDefinition__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComponentDefinitionAccess().getProcAssignment_2()); }
	(rule__ComponentDefinition__ProcAssignment_2)
	{ after(grammarAccess.getComponentDefinitionAccess().getProcAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentDefinition__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComponentDefinition__Group__3__Impl
	rule__ComponentDefinition__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentDefinition__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComponentDefinitionAccess().getAtKeyword_3()); }
	At
	{ after(grammarAccess.getComponentDefinitionAccess().getAtKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentDefinition__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComponentDefinition__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentDefinition__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComponentDefinitionAccess().getAddressAssignment_4()); }
	(rule__ComponentDefinition__AddressAssignment_4)
	{ after(grammarAccess.getComponentDefinitionAccess().getAddressAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Or__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Or__Group__0__Impl
	rule__Or__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrAccess().getAndParserRuleCall_0()); }
	ruleAnd
	{ after(grammarAccess.getOrAccess().getAndParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Or__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrAccess().getGroup_1()); }
	(rule__Or__Group_1__0)?
	{ after(grammarAccess.getOrAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Or__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Or__Group_1__0__Impl
	rule__Or__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrAccess().getOrLeftAction_1_0()); }
	()
	{ after(grammarAccess.getOrAccess().getOrLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Or__Group_1__1__Impl
	rule__Or__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrAccess().getVerticalLineVerticalLineKeyword_1_1()); }
	VerticalLineVerticalLine
	{ after(grammarAccess.getOrAccess().getVerticalLineVerticalLineKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Or__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrAccess().getRightAssignment_1_2()); }
	(rule__Or__RightAssignment_1_2)
	{ after(grammarAccess.getOrAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__And__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group__0__Impl
	rule__And__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getEqualityParserRuleCall_0()); }
	ruleEquality
	{ after(grammarAccess.getAndAccess().getEqualityParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getGroup_1()); }
	(rule__And__Group_1__0)?
	{ after(grammarAccess.getAndAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__And__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group_1__0__Impl
	rule__And__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getAndLeftAction_1_0()); }
	()
	{ after(grammarAccess.getAndAccess().getAndLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group_1__1__Impl
	rule__And__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getAmpersandAmpersandKeyword_1_1()); }
	AmpersandAmpersand
	{ after(grammarAccess.getAndAccess().getAmpersandAmpersandKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getRightAssignment_1_2()); }
	(rule__And__RightAssignment_1_2)
	{ after(grammarAccess.getAndAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Equality__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Equality__Group__0__Impl
	rule__Equality__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualityAccess().getComparisonParserRuleCall_0()); }
	ruleComparison
	{ after(grammarAccess.getEqualityAccess().getComparisonParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Equality__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualityAccess().getGroup_1()); }
	(rule__Equality__Group_1__0)?
	{ after(grammarAccess.getEqualityAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Equality__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Equality__Group_1__0__Impl
	rule__Equality__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualityAccess().getEqualityLeftAction_1_0()); }
	()
	{ after(grammarAccess.getEqualityAccess().getEqualityLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Equality__Group_1__1__Impl
	rule__Equality__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualityAccess().getOpAssignment_1_1()); }
	(rule__Equality__OpAssignment_1_1)
	{ after(grammarAccess.getEqualityAccess().getOpAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Equality__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualityAccess().getRightAssignment_1_2()); }
	(rule__Equality__RightAssignment_1_2)
	{ after(grammarAccess.getEqualityAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Comparison__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group__0__Impl
	rule__Comparison__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getPlusOrMinusParserRuleCall_0()); }
	rulePlusOrMinus
	{ after(grammarAccess.getComparisonAccess().getPlusOrMinusParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getGroup_1()); }
	(rule__Comparison__Group_1__0)?
	{ after(grammarAccess.getComparisonAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Comparison__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group_1__0__Impl
	rule__Comparison__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getComparisonLeftAction_1_0()); }
	()
	{ after(grammarAccess.getComparisonAccess().getComparisonLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group_1__1__Impl
	rule__Comparison__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getOpAssignment_1_1()); }
	(rule__Comparison__OpAssignment_1_1)
	{ after(grammarAccess.getComparisonAccess().getOpAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getRightAssignment_1_2()); }
	(rule__Comparison__RightAssignment_1_2)
	{ after(grammarAccess.getComparisonAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PlusOrMinus__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PlusOrMinus__Group__0__Impl
	rule__PlusOrMinus__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusOrMinus__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusOrMinusAccess().getMulOrDivParserRuleCall_0()); }
	ruleMulOrDiv
	{ after(grammarAccess.getPlusOrMinusAccess().getMulOrDivParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusOrMinus__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PlusOrMinus__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusOrMinus__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusOrMinusAccess().getGroup_1()); }
	(rule__PlusOrMinus__Group_1__0)?
	{ after(grammarAccess.getPlusOrMinusAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PlusOrMinus__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PlusOrMinus__Group_1__0__Impl
	rule__PlusOrMinus__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusOrMinus__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusOrMinusAccess().getAlternatives_1_0()); }
	(rule__PlusOrMinus__Alternatives_1_0)
	{ after(grammarAccess.getPlusOrMinusAccess().getAlternatives_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusOrMinus__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PlusOrMinus__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusOrMinus__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusOrMinusAccess().getRightAssignment_1_1()); }
	(rule__PlusOrMinus__RightAssignment_1_1)
	{ after(grammarAccess.getPlusOrMinusAccess().getRightAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PlusOrMinus__Group_1_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PlusOrMinus__Group_1_0_0__0__Impl
	rule__PlusOrMinus__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusOrMinus__Group_1_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusOrMinusAccess().getPlusLeftAction_1_0_0_0()); }
	()
	{ after(grammarAccess.getPlusOrMinusAccess().getPlusLeftAction_1_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusOrMinus__Group_1_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PlusOrMinus__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusOrMinus__Group_1_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusOrMinusAccess().getPlusSignKeyword_1_0_0_1()); }
	PlusSign
	{ after(grammarAccess.getPlusOrMinusAccess().getPlusSignKeyword_1_0_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PlusOrMinus__Group_1_0_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PlusOrMinus__Group_1_0_1__0__Impl
	rule__PlusOrMinus__Group_1_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusOrMinus__Group_1_0_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusOrMinusAccess().getMinusLeftAction_1_0_1_0()); }
	()
	{ after(grammarAccess.getPlusOrMinusAccess().getMinusLeftAction_1_0_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusOrMinus__Group_1_0_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PlusOrMinus__Group_1_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusOrMinus__Group_1_0_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusOrMinusAccess().getHyphenMinusKeyword_1_0_1_1()); }
	HyphenMinus
	{ after(grammarAccess.getPlusOrMinusAccess().getHyphenMinusKeyword_1_0_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PlusOrMinus__Group_1_0_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PlusOrMinus__Group_1_0_2__0__Impl
	rule__PlusOrMinus__Group_1_0_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusOrMinus__Group_1_0_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusOrMinusAccess().getConcatenateLeftAction_1_0_2_0()); }
	()
	{ after(grammarAccess.getPlusOrMinusAccess().getConcatenateLeftAction_1_0_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusOrMinus__Group_1_0_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PlusOrMinus__Group_1_0_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusOrMinus__Group_1_0_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusOrMinusAccess().getPlusSignPlusSignKeyword_1_0_2_1()); }
	PlusSignPlusSign
	{ after(grammarAccess.getPlusOrMinusAccess().getPlusSignPlusSignKeyword_1_0_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MulOrDiv__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MulOrDiv__Group__0__Impl
	rule__MulOrDiv__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MulOrDiv__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMulOrDivAccess().getPrimaryParserRuleCall_0()); }
	rulePrimary
	{ after(grammarAccess.getMulOrDivAccess().getPrimaryParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MulOrDiv__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MulOrDiv__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MulOrDiv__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMulOrDivAccess().getGroup_1()); }
	(rule__MulOrDiv__Group_1__0)?
	{ after(grammarAccess.getMulOrDivAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MulOrDiv__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MulOrDiv__Group_1__0__Impl
	rule__MulOrDiv__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MulOrDiv__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMulOrDivAccess().getMulOrDivLeftAction_1_0()); }
	()
	{ after(grammarAccess.getMulOrDivAccess().getMulOrDivLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MulOrDiv__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MulOrDiv__Group_1__1__Impl
	rule__MulOrDiv__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MulOrDiv__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMulOrDivAccess().getOpAssignment_1_1()); }
	(rule__MulOrDiv__OpAssignment_1_1)
	{ after(grammarAccess.getMulOrDivAccess().getOpAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MulOrDiv__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MulOrDiv__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MulOrDiv__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMulOrDivAccess().getRightAssignment_1_2()); }
	(rule__MulOrDiv__RightAssignment_1_2)
	{ after(grammarAccess.getMulOrDivAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Primary__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_0__0__Impl
	rule__Primary__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_0_0()); }
	LeftParenthesis
	{ after(grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_0__1__Impl
	rule__Primary__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getExpressionParserRuleCall_0_1()); }
	ruleExpression
	{ after(grammarAccess.getPrimaryAccess().getExpressionParserRuleCall_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_0_2()); }
	RightParenthesis
	{ after(grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Primary__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_1__0__Impl
	rule__Primary__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getNotAction_1_0()); }
	()
	{ after(grammarAccess.getPrimaryAccess().getNotAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_1__1__Impl
	rule__Primary__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getExclamationMarkKeyword_1_1()); }
	ExclamationMark
	{ after(grammarAccess.getPrimaryAccess().getExclamationMarkKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_1__2__Impl
	rule__Primary__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_1_2()); }
	LeftParenthesis
	{ after(grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_1__3__Impl
	rule__Primary__Group_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getExpressionAssignment_1_3()); }
	(rule__Primary__ExpressionAssignment_1_3)
	{ after(grammarAccess.getPrimaryAccess().getExpressionAssignment_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_1__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_1__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_1__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_1_4()); }
	RightParenthesis
	{ after(grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_1_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Atomic__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atomic__Group_0__0__Impl
	rule__Atomic__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicAccess().getIntConstantAction_0_0()); }
	()
	{ after(grammarAccess.getAtomicAccess().getIntConstantAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atomic__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicAccess().getValueAssignment_0_1()); }
	(rule__Atomic__ValueAssignment_0_1)
	{ after(grammarAccess.getAtomicAccess().getValueAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Atomic__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atomic__Group_1__0__Impl
	rule__Atomic__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicAccess().getStringConstantAction_1_0()); }
	()
	{ after(grammarAccess.getAtomicAccess().getStringConstantAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atomic__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicAccess().getValueAssignment_1_1()); }
	(rule__Atomic__ValueAssignment_1_1)
	{ after(grammarAccess.getAtomicAccess().getValueAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Atomic__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atomic__Group_2__0__Impl
	rule__Atomic__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicAccess().getBoolConstantAction_2_0()); }
	()
	{ after(grammarAccess.getAtomicAccess().getBoolConstantAction_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atomic__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicAccess().getValueAssignment_2_1()); }
	(rule__Atomic__ValueAssignment_2_1)
	{ after(grammarAccess.getAtomicAccess().getValueAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Atomic__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atomic__Group_3__0__Impl
	rule__Atomic__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicAccess().getLocalVarRefAction_3_0()); }
	()
	{ after(grammarAccess.getAtomicAccess().getLocalVarRefAction_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atomic__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicAccess().getRefAssignment_3_1()); }
	(rule__Atomic__RefAssignment_3_1)
	{ after(grammarAccess.getAtomicAccess().getRefAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Atomic__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atomic__Group_4__0__Impl
	rule__Atomic__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicAccess().getLocalAttributeRefAction_4_0()); }
	()
	{ after(grammarAccess.getAtomicAccess().getLocalAttributeRefAction_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atomic__Group_4__1__Impl
	rule__Atomic__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicAccess().getProcKeyword_4_1()); }
	Proc
	{ after(grammarAccess.getAtomicAccess().getProcKeyword_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_4__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atomic__Group_4__2__Impl
	rule__Atomic__Group_4__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_4__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicAccess().getFullStopKeyword_4_2()); }
	FullStop
	{ after(grammarAccess.getAtomicAccess().getFullStopKeyword_4_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_4__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atomic__Group_4__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_4__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicAccess().getAttributeAssignment_4_3()); }
	(rule__Atomic__AttributeAssignment_4_3)
	{ after(grammarAccess.getAtomicAccess().getAttributeAssignment_4_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Atomic__Group_5__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atomic__Group_5__0__Impl
	rule__Atomic__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_5__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicAccess().getFunctionCallAction_5_0()); }
	()
	{ after(grammarAccess.getAtomicAccess().getFunctionCallAction_5_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_5__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atomic__Group_5__1__Impl
	rule__Atomic__Group_5__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_5__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicAccess().getFunctionAssignment_5_1()); }
	(rule__Atomic__FunctionAssignment_5_1)
	{ after(grammarAccess.getAtomicAccess().getFunctionAssignment_5_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_5__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atomic__Group_5__2__Impl
	rule__Atomic__Group_5__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_5__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicAccess().getLeftParenthesisKeyword_5_2()); }
	LeftParenthesis
	{ after(grammarAccess.getAtomicAccess().getLeftParenthesisKeyword_5_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_5__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atomic__Group_5__3__Impl
	rule__Atomic__Group_5__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_5__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicAccess().getGroup_5_3()); }
	(rule__Atomic__Group_5_3__0)?
	{ after(grammarAccess.getAtomicAccess().getGroup_5_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_5__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atomic__Group_5__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_5__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicAccess().getRightParenthesisKeyword_5_4()); }
	RightParenthesis
	{ after(grammarAccess.getAtomicAccess().getRightParenthesisKeyword_5_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Atomic__Group_5_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atomic__Group_5_3__0__Impl
	rule__Atomic__Group_5_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_5_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicAccess().getParamsAssignment_5_3_0()); }
	(rule__Atomic__ParamsAssignment_5_3_0)
	{ after(grammarAccess.getAtomicAccess().getParamsAssignment_5_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_5_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atomic__Group_5_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_5_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicAccess().getGroup_5_3_1()); }
	(rule__Atomic__Group_5_3_1__0)*
	{ after(grammarAccess.getAtomicAccess().getGroup_5_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Atomic__Group_5_3_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atomic__Group_5_3_1__0__Impl
	rule__Atomic__Group_5_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_5_3_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicAccess().getCommaKeyword_5_3_1_0()); }
	Comma
	{ after(grammarAccess.getAtomicAccess().getCommaKeyword_5_3_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_5_3_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atomic__Group_5_3_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_5_3_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicAccess().getParamsAssignment_5_3_1_1()); }
	(rule__Atomic__ParamsAssignment_5_3_1_1)
	{ after(grammarAccess.getAtomicAccess().getParamsAssignment_5_3_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Atomic__Group_6__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atomic__Group_6__0__Impl
	rule__Atomic__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_6__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicAccess().getComponentAttributeRefAction_6_0()); }
	()
	{ after(grammarAccess.getAtomicAccess().getComponentAttributeRefAction_6_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_6__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atomic__Group_6__1__Impl
	rule__Atomic__Group_6__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_6__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicAccess().getThisKeyword_6_1()); }
	This
	{ after(grammarAccess.getAtomicAccess().getThisKeyword_6_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_6__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atomic__Group_6__2__Impl
	rule__Atomic__Group_6__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_6__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicAccess().getFullStopKeyword_6_2()); }
	FullStop
	{ after(grammarAccess.getAtomicAccess().getFullStopKeyword_6_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_6__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atomic__Group_6__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_6__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicAccess().getAttributeAssignment_6_3()); }
	(rule__Atomic__AttributeAssignment_6_3)
	{ after(grammarAccess.getAtomicAccess().getAttributeAssignment_6_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Atomic__Group_7__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atomic__Group_7__0__Impl
	rule__Atomic__Group_7__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_7__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicAccess().getRecAttributeRefAction_7_0()); }
	()
	{ after(grammarAccess.getAtomicAccess().getRecAttributeRefAction_7_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_7__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atomic__Group_7__1__Impl
	rule__Atomic__Group_7__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_7__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicAccess().getReceiverKeyword_7_1()); }
	Receiver
	{ after(grammarAccess.getAtomicAccess().getReceiverKeyword_7_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_7__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atomic__Group_7__2__Impl
	rule__Atomic__Group_7__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_7__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicAccess().getFullStopKeyword_7_2()); }
	FullStop
	{ after(grammarAccess.getAtomicAccess().getFullStopKeyword_7_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_7__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atomic__Group_7__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_7__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicAccess().getAttributeAssignment_7_3()); }
	(rule__Atomic__AttributeAssignment_7_3)
	{ after(grammarAccess.getAtomicAccess().getAttributeAssignment_7_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AttributeToSet__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AttributeToSet__Group_0__0__Impl
	rule__AttributeToSet__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeToSet__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributeToSetAccess().getComponentAttributeToSetAction_0_0()); }
	()
	{ after(grammarAccess.getAttributeToSetAccess().getComponentAttributeToSetAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeToSet__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AttributeToSet__Group_0__1__Impl
	rule__AttributeToSet__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeToSet__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributeToSetAccess().getThisKeyword_0_1()); }
	This
	{ after(grammarAccess.getAttributeToSetAccess().getThisKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeToSet__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AttributeToSet__Group_0__2__Impl
	rule__AttributeToSet__Group_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeToSet__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributeToSetAccess().getFullStopKeyword_0_2()); }
	FullStop
	{ after(grammarAccess.getAttributeToSetAccess().getFullStopKeyword_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeToSet__Group_0__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AttributeToSet__Group_0__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeToSet__Group_0__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributeToSetAccess().getAttributeAssignment_0_3()); }
	(rule__AttributeToSet__AttributeAssignment_0_3)
	{ after(grammarAccess.getAttributeToSetAccess().getAttributeAssignment_0_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AttributeToSet__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AttributeToSet__Group_1__0__Impl
	rule__AttributeToSet__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeToSet__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributeToSetAccess().getLocalAttributeToSetAction_1_0()); }
	()
	{ after(grammarAccess.getAttributeToSetAccess().getLocalAttributeToSetAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeToSet__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AttributeToSet__Group_1__1__Impl
	rule__AttributeToSet__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeToSet__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributeToSetAccess().getProcKeyword_1_1()); }
	Proc
	{ after(grammarAccess.getAttributeToSetAccess().getProcKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeToSet__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AttributeToSet__Group_1__2__Impl
	rule__AttributeToSet__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeToSet__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributeToSetAccess().getFullStopKeyword_1_2()); }
	FullStop
	{ after(grammarAccess.getAttributeToSetAccess().getFullStopKeyword_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeToSet__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AttributeToSet__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeToSet__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributeToSetAccess().getAttributeAssignment_1_3()); }
	(rule__AttributeToSet__AttributeAssignment_1_3)
	{ after(grammarAccess.getAttributeToSetAccess().getAttributeAssignment_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FuncParam__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncParam__Group__0__Impl
	rule__FuncParam__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncParam__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncParamAccess().getTypeAssignment_0()); }
	(rule__FuncParam__TypeAssignment_0)
	{ after(grammarAccess.getFuncParamAccess().getTypeAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncParam__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncParam__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncParam__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncParamAccess().getNameAssignment_1()); }
	(rule__FuncParam__NameAssignment_1)
	{ after(grammarAccess.getFuncParamAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FuncDefinition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncDefinition__Group__0__Impl
	rule__FuncDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncDefinition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncDefinitionAccess().getFunctionKeyword_0()); }
	Function
	{ after(grammarAccess.getFuncDefinitionAccess().getFunctionKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncDefinition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncDefinition__Group__1__Impl
	rule__FuncDefinition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncDefinition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncDefinitionAccess().getTypeAssignment_1()); }
	(rule__FuncDefinition__TypeAssignment_1)
	{ after(grammarAccess.getFuncDefinitionAccess().getTypeAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncDefinition__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncDefinition__Group__2__Impl
	rule__FuncDefinition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncDefinition__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncDefinitionAccess().getNameAssignment_2()); }
	(rule__FuncDefinition__NameAssignment_2)
	{ after(grammarAccess.getFuncDefinitionAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncDefinition__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncDefinition__Group__3__Impl
	rule__FuncDefinition__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncDefinition__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncDefinitionAccess().getLeftParenthesisKeyword_3()); }
	LeftParenthesis
	{ after(grammarAccess.getFuncDefinitionAccess().getLeftParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncDefinition__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncDefinition__Group__4__Impl
	rule__FuncDefinition__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncDefinition__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncDefinitionAccess().getGroup_4()); }
	(rule__FuncDefinition__Group_4__0)?
	{ after(grammarAccess.getFuncDefinitionAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncDefinition__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncDefinition__Group__5__Impl
	rule__FuncDefinition__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncDefinition__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncDefinitionAccess().getRightParenthesisKeyword_5()); }
	RightParenthesis
	{ after(grammarAccess.getFuncDefinitionAccess().getRightParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncDefinition__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncDefinition__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncDefinition__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncDefinitionAccess().getBlkAssignment_6()); }
	(rule__FuncDefinition__BlkAssignment_6)
	{ after(grammarAccess.getFuncDefinitionAccess().getBlkAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FuncDefinition__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncDefinition__Group_4__0__Impl
	rule__FuncDefinition__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncDefinition__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncDefinitionAccess().getParamsAssignment_4_0()); }
	(rule__FuncDefinition__ParamsAssignment_4_0)
	{ after(grammarAccess.getFuncDefinitionAccess().getParamsAssignment_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncDefinition__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncDefinition__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncDefinition__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncDefinitionAccess().getGroup_4_1()); }
	(rule__FuncDefinition__Group_4_1__0)*
	{ after(grammarAccess.getFuncDefinitionAccess().getGroup_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FuncDefinition__Group_4_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncDefinition__Group_4_1__0__Impl
	rule__FuncDefinition__Group_4_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncDefinition__Group_4_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncDefinitionAccess().getCommaKeyword_4_1_0()); }
	Comma
	{ after(grammarAccess.getFuncDefinitionAccess().getCommaKeyword_4_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncDefinition__Group_4_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncDefinition__Group_4_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncDefinition__Group_4_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncDefinitionAccess().getParamsAssignment_4_1_1()); }
	(rule__FuncDefinition__ParamsAssignment_4_1_1)
	{ after(grammarAccess.getFuncDefinitionAccess().getParamsAssignment_4_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FuncBlock__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncBlock__Group__0__Impl
	rule__FuncBlock__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncBlock__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncBlockAccess().getLeftCurlyBracketKeyword_0()); }
	LeftCurlyBracket
	{ after(grammarAccess.getFuncBlockAccess().getLeftCurlyBracketKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncBlock__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncBlock__Group__1__Impl
	rule__FuncBlock__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncBlock__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncBlockAccess().getFuncBlockAction_1()); }
	()
	{ after(grammarAccess.getFuncBlockAccess().getFuncBlockAction_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncBlock__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncBlock__Group__2__Impl
	rule__FuncBlock__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncBlock__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncBlockAccess().getStatementsAssignment_2()); }
	(rule__FuncBlock__StatementsAssignment_2)*
	{ after(grammarAccess.getFuncBlockAccess().getStatementsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncBlock__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncBlock__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncBlock__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncBlockAccess().getRightCurlyBracketKeyword_3()); }
	RightCurlyBracket
	{ after(grammarAccess.getFuncBlockAccess().getRightCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FuncVarDeclaration__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncVarDeclaration__Group__0__Impl
	rule__FuncVarDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncVarDeclaration__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncVarDeclarationAccess().getVarKeyword_0()); }
	Var
	{ after(grammarAccess.getFuncVarDeclarationAccess().getVarKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncVarDeclaration__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncVarDeclaration__Group__1__Impl
	rule__FuncVarDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncVarDeclaration__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncVarDeclarationAccess().getNameAssignment_1()); }
	(rule__FuncVarDeclaration__NameAssignment_1)
	{ after(grammarAccess.getFuncVarDeclarationAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncVarDeclaration__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncVarDeclaration__Group__2__Impl
	rule__FuncVarDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncVarDeclaration__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncVarDeclarationAccess().getEqualsSignKeyword_2()); }
	EqualsSign
	{ after(grammarAccess.getFuncVarDeclarationAccess().getEqualsSignKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncVarDeclaration__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncVarDeclaration__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncVarDeclaration__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncVarDeclarationAccess().getValAssignment_3()); }
	(rule__FuncVarDeclaration__ValAssignment_3)
	{ after(grammarAccess.getFuncVarDeclarationAccess().getValAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FuncVarAssign__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncVarAssign__Group__0__Impl
	rule__FuncVarAssign__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncVarAssign__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncVarAssignAccess().getVarAssignment_0()); }
	(rule__FuncVarAssign__VarAssignment_0)
	{ after(grammarAccess.getFuncVarAssignAccess().getVarAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncVarAssign__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncVarAssign__Group__1__Impl
	rule__FuncVarAssign__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncVarAssign__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncVarAssignAccess().getEqualsSignKeyword_1()); }
	EqualsSign
	{ after(grammarAccess.getFuncVarAssignAccess().getEqualsSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncVarAssign__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncVarAssign__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncVarAssign__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncVarAssignAccess().getValAssignment_2()); }
	(rule__FuncVarAssign__ValAssignment_2)
	{ after(grammarAccess.getFuncVarAssignAccess().getValAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FuncIfElse__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncIfElse__Group__0__Impl
	rule__FuncIfElse__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncIfElse__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncIfElseAccess().getIfKeyword_0()); }
	If
	{ after(grammarAccess.getFuncIfElseAccess().getIfKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncIfElse__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncIfElse__Group__1__Impl
	rule__FuncIfElse__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncIfElse__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncIfElseAccess().getLeftParenthesisKeyword_1()); }
	LeftParenthesis
	{ after(grammarAccess.getFuncIfElseAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncIfElse__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncIfElse__Group__2__Impl
	rule__FuncIfElse__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncIfElse__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncIfElseAccess().getTestAssignment_2()); }
	(rule__FuncIfElse__TestAssignment_2)
	{ after(grammarAccess.getFuncIfElseAccess().getTestAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncIfElse__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncIfElse__Group__3__Impl
	rule__FuncIfElse__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncIfElse__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncIfElseAccess().getRightParenthesisKeyword_3()); }
	RightParenthesis
	{ after(grammarAccess.getFuncIfElseAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncIfElse__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncIfElse__Group__4__Impl
	rule__FuncIfElse__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncIfElse__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncIfElseAccess().getThenAssignment_4()); }
	(rule__FuncIfElse__ThenAssignment_4)
	{ after(grammarAccess.getFuncIfElseAccess().getThenAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncIfElse__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncIfElse__Group__5__Impl
	rule__FuncIfElse__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncIfElse__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncIfElseAccess().getGroup_5()); }
	(rule__FuncIfElse__Group_5__0)*
	{ after(grammarAccess.getFuncIfElseAccess().getGroup_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncIfElse__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncIfElse__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncIfElse__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncIfElseAccess().getGroup_6()); }
	(rule__FuncIfElse__Group_6__0)?
	{ after(grammarAccess.getFuncIfElseAccess().getGroup_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FuncIfElse__Group_5__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncIfElse__Group_5__0__Impl
	rule__FuncIfElse__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncIfElse__Group_5__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncIfElseAccess().getElifKeyword_5_0()); }
	Elif
	{ after(grammarAccess.getFuncIfElseAccess().getElifKeyword_5_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncIfElse__Group_5__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncIfElse__Group_5__1__Impl
	rule__FuncIfElse__Group_5__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncIfElse__Group_5__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncIfElseAccess().getLeftParenthesisKeyword_5_1()); }
	LeftParenthesis
	{ after(grammarAccess.getFuncIfElseAccess().getLeftParenthesisKeyword_5_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncIfElse__Group_5__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncIfElse__Group_5__2__Impl
	rule__FuncIfElse__Group_5__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncIfElse__Group_5__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncIfElseAccess().getTestAssignment_5_2()); }
	(rule__FuncIfElse__TestAssignment_5_2)
	{ after(grammarAccess.getFuncIfElseAccess().getTestAssignment_5_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncIfElse__Group_5__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncIfElse__Group_5__3__Impl
	rule__FuncIfElse__Group_5__4
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncIfElse__Group_5__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncIfElseAccess().getRightParenthesisKeyword_5_3()); }
	RightParenthesis
	{ after(grammarAccess.getFuncIfElseAccess().getRightParenthesisKeyword_5_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncIfElse__Group_5__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncIfElse__Group_5__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncIfElse__Group_5__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncIfElseAccess().getThenAssignment_5_4()); }
	(rule__FuncIfElse__ThenAssignment_5_4)
	{ after(grammarAccess.getFuncIfElseAccess().getThenAssignment_5_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FuncIfElse__Group_6__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncIfElse__Group_6__0__Impl
	rule__FuncIfElse__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncIfElse__Group_6__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncIfElseAccess().getElseKeyword_6_0()); }
	Else
	{ after(grammarAccess.getFuncIfElseAccess().getElseKeyword_6_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncIfElse__Group_6__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncIfElse__Group_6__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncIfElse__Group_6__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncIfElseAccess().getElseBranchAssignment_6_1()); }
	(rule__FuncIfElse__ElseBranchAssignment_6_1)
	{ after(grammarAccess.getFuncIfElseAccess().getElseBranchAssignment_6_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FuncReturn__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncReturn__Group__0__Impl
	rule__FuncReturn__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncReturn__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncReturnAccess().getReturnKeyword_0()); }
	Return
	{ after(grammarAccess.getFuncReturnAccess().getReturnKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncReturn__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncReturn__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncReturn__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncReturnAccess().getValAssignment_1()); }
	(rule__FuncReturn__ValAssignment_1)
	{ after(grammarAccess.getFuncReturnAccess().getValAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__ProcessesAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getProcessesProcessDefinitionParserRuleCall_1_0_0()); }
		ruleProcessDefinition
		{ after(grammarAccess.getModelAccess().getProcessesProcessDefinitionParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__ComponentsAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getComponentsComponentDefinitionParserRuleCall_1_1_0()); }
		ruleComponentDefinition
		{ after(grammarAccess.getModelAccess().getComponentsComponentDefinitionParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__FunctionsAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getFunctionsFuncDefinitionParserRuleCall_1_2_0()); }
		ruleFuncDefinition
		{ after(grammarAccess.getModelAccess().getFunctionsFuncDefinitionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__InterleavingProcess__SubProcsAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInterleavingProcessAccess().getSubProcsCallProcessParserRuleCall_2_1_0()); }
		ruleCallProcess
		{ after(grammarAccess.getInterleavingProcessAccess().getSubProcsCallProcessParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Preconditions__PrecondAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPreconditionsAccess().getPrecondAlternatives_1_0()); }
		(rule__Preconditions__PrecondAlternatives_1_0)
		{ after(grammarAccess.getPreconditionsAccess().getPrecondAlternatives_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredOutputProcessOrInputProcess__InputsAssignment_1_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPredOutputProcessOrInputProcessAccess().getInputsInputProcessParserRuleCall_1_1_1_0()); }
		ruleInputProcess
		{ after(grammarAccess.getPredOutputProcessOrInputProcessAccess().getInputsInputProcessParserRuleCall_1_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__InputProcessesPart__InputsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInputProcessesPartAccess().getInputsInputProcessParserRuleCall_0_0()); }
		ruleInputProcess
		{ after(grammarAccess.getInputProcessesPartAccess().getInputsInputProcessParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__InputProcessesPart__PrecondsAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInputProcessesPartAccess().getPrecondsPreconditionsParserRuleCall_1_1_0()); }
		rulePreconditions
		{ after(grammarAccess.getInputProcessesPartAccess().getPrecondsPreconditionsParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__InputProcessesPart__InputsAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInputProcessesPartAccess().getInputsInputProcessParserRuleCall_1_2_0()); }
		ruleInputProcess
		{ after(grammarAccess.getInputProcessesPartAccess().getInputsInputProcessParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__InputProcess__Rec_predAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInputProcessAccess().getRec_predExpressionParserRuleCall_3_0()); }
		ruleExpression
		{ after(grammarAccess.getInputProcessAccess().getRec_predExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__InputProcess__MsgInPartsAssignment_6_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInputProcessAccess().getMsgInPartsAttributeToSetParserRuleCall_6_0_0()); }
		ruleAttributeToSet
		{ after(grammarAccess.getInputProcessAccess().getMsgInPartsAttributeToSetParserRuleCall_6_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__InputProcess__MsgInPartsAssignment_6_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInputProcessAccess().getMsgInPartsAttributeToSetParserRuleCall_6_1_1_0()); }
		ruleAttributeToSet
		{ after(grammarAccess.getInputProcessAccess().getMsgInPartsAttributeToSetParserRuleCall_6_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__InputProcess__OutputAssignment_8_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInputProcessAccess().getOutputSTRINGTerminalRuleCall_8_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getInputProcessAccess().getOutputSTRINGTerminalRuleCall_8_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__InputProcess__NextAssignment_10
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInputProcessAccess().getNextNZCProcessParserRuleCall_10_0()); }
		ruleNZCProcess
		{ after(grammarAccess.getInputProcessAccess().getNextNZCProcessParserRuleCall_10_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputProcessPart__MsgOutPartsAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOutputProcessPartAccess().getMsgOutPartsExpressionParserRuleCall_2_0_0()); }
		ruleExpression
		{ after(grammarAccess.getOutputProcessPartAccess().getMsgOutPartsExpressionParserRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputProcessPart__MsgOutPartsAssignment_2_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOutputProcessPartAccess().getMsgOutPartsExpressionParserRuleCall_2_1_1_0()); }
		ruleExpression
		{ after(grammarAccess.getOutputProcessPartAccess().getMsgOutPartsExpressionParserRuleCall_2_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputProcessPart__Send_predAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOutputProcessPartAccess().getSend_predExpressionParserRuleCall_6_0()); }
		ruleExpression
		{ after(grammarAccess.getOutputProcessPartAccess().getSend_predExpressionParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputProcessPart__OutputAssignment_8_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOutputProcessPartAccess().getOutputSTRINGTerminalRuleCall_8_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getOutputProcessPartAccess().getOutputSTRINGTerminalRuleCall_8_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputProcessPart__MsecAssignment_9_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOutputProcessPartAccess().getMsecINTTerminalRuleCall_9_2_0()); }
		RULE_INT
		{ after(grammarAccess.getOutputProcessPartAccess().getMsecINTTerminalRuleCall_9_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputProcessPart__NextAssignment_11
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOutputProcessPartAccess().getNextProcParserRuleCall_11_0()); }
		ruleProc
		{ after(grammarAccess.getOutputProcessPartAccess().getNextProcParserRuleCall_11_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfProcesses__BranchesAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfProcessesAccess().getBranchesIfBranchProcessParserRuleCall_1_0()); }
		ruleIfBranchProcess
		{ after(grammarAccess.getIfProcessesAccess().getBranchesIfBranchProcessParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfProcesses__BranchesAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfProcessesAccess().getBranchesIfBranchProcessParserRuleCall_2_1_0()); }
		ruleIfBranchProcess
		{ after(grammarAccess.getIfProcessesAccess().getBranchesIfBranchProcessParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfProcesses__BranchesAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfProcessesAccess().getBranchesElseBranchProcessParserRuleCall_3_1_0()); }
		ruleElseBranchProcess
		{ after(grammarAccess.getIfProcessesAccess().getBranchesElseBranchProcessParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfBranchProcess__CondAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfBranchProcessAccess().getCondPreconditionsParserRuleCall_2_0()); }
		rulePreconditions
		{ after(grammarAccess.getIfBranchProcessAccess().getCondPreconditionsParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfBranchProcess__ThenAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfBranchProcessAccess().getThenPredOutputProcessOrInputProcessParserRuleCall_4_0()); }
		rulePredOutputProcessOrInputProcess
		{ after(grammarAccess.getIfBranchProcessAccess().getThenPredOutputProcessOrInputProcessParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ElseBranchProcess__ThenAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getElseBranchProcessAccess().getThenPredOutputProcessOrInputProcessParserRuleCall_2_0()); }
		rulePredOutputProcessOrInputProcess
		{ after(grammarAccess.getElseBranchProcessAccess().getThenPredOutputProcessOrInputProcessParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Update__VarsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUpdateAccess().getVarsAttributeToSetParserRuleCall_1_0()); }
		ruleAttributeToSet
		{ after(grammarAccess.getUpdateAccess().getVarsAttributeToSetParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Update__ValsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUpdateAccess().getValsExpressionParserRuleCall_3_0()); }
		ruleExpression
		{ after(grammarAccess.getUpdateAccess().getValsExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Update__VarsAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUpdateAccess().getVarsAttributeToSetParserRuleCall_4_1_0()); }
		ruleAttributeToSet
		{ after(grammarAccess.getUpdateAccess().getVarsAttributeToSetParserRuleCall_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Update__ValsAssignment_4_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUpdateAccess().getValsExpressionParserRuleCall_4_3_0()); }
		ruleExpression
		{ after(grammarAccess.getUpdateAccess().getValsExpressionParserRuleCall_4_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Awareness__PredAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAwarenessAccess().getPredExpressionParserRuleCall_3_0()); }
		ruleExpression
		{ after(grammarAccess.getAwarenessAccess().getPredExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CallProcess__ProcnameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCallProcessAccess().getProcnameProcessDefinitionCrossReference_1_0()); }
		(
			{ before(grammarAccess.getCallProcessAccess().getProcnameProcessDefinitionIDTerminalRuleCall_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getCallProcessAccess().getProcnameProcessDefinitionIDTerminalRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getCallProcessAccess().getProcnameProcessDefinitionCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessDefinition__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProcessDefinitionAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getProcessDefinitionAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessDefinition__ProcAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProcessDefinitionAccess().getProcProcParserRuleCall_3_0()); }
		ruleProc
		{ after(grammarAccess.getProcessDefinitionAccess().getProcProcParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EnvInitValue__ValueAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEnvInitValueAccess().getValueINTTerminalRuleCall_0_1_0()); }
		RULE_INT
		{ after(grammarAccess.getEnvInitValueAccess().getValueINTTerminalRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EnvInitValue__ValueAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEnvInitValueAccess().getValueSTRINGTerminalRuleCall_1_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getEnvInitValueAccess().getValueSTRINGTerminalRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EnvInitValue__ValueAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEnvInitValueAccess().getValueAlternatives_2_1_0()); }
		(rule__EnvInitValue__ValueAlternatives_2_1_0)
		{ after(grammarAccess.getEnvInitValueAccess().getValueAlternatives_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Environment__AttrsAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEnvironmentAccess().getAttrsIDTerminalRuleCall_2_0_0()); }
		RULE_ID
		{ after(grammarAccess.getEnvironmentAccess().getAttrsIDTerminalRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Environment__ValsAssignment_2_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEnvironmentAccess().getValsEnvInitValueParserRuleCall_2_2_0()); }
		ruleEnvInitValue
		{ after(grammarAccess.getEnvironmentAccess().getValsEnvInitValueParserRuleCall_2_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Environment__AttrsAssignment_2_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEnvironmentAccess().getAttrsIDTerminalRuleCall_2_3_1_0()); }
		RULE_ID
		{ after(grammarAccess.getEnvironmentAccess().getAttrsIDTerminalRuleCall_2_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Environment__ValsAssignment_2_3_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEnvironmentAccess().getValsEnvInitValueParserRuleCall_2_3_3_0()); }
		ruleEnvInitValue
		{ after(grammarAccess.getEnvironmentAccess().getValsEnvInitValueParserRuleCall_2_3_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentDefinition__EnvAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComponentDefinitionAccess().getEnvEnvironmentParserRuleCall_1_0()); }
		ruleEnvironment
		{ after(grammarAccess.getComponentDefinitionAccess().getEnvEnvironmentParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentDefinition__ProcAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComponentDefinitionAccess().getProcProcessDefinitionCrossReference_2_0()); }
		(
			{ before(grammarAccess.getComponentDefinitionAccess().getProcProcessDefinitionIDTerminalRuleCall_2_0_1()); }
			RULE_ID
			{ after(grammarAccess.getComponentDefinitionAccess().getProcProcessDefinitionIDTerminalRuleCall_2_0_1()); }
		)
		{ after(grammarAccess.getComponentDefinitionAccess().getProcProcessDefinitionCrossReference_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentDefinition__AddressAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComponentDefinitionAccess().getAddressSTRINGTerminalRuleCall_4_0()); }
		RULE_STRING
		{ after(grammarAccess.getComponentDefinitionAccess().getAddressSTRINGTerminalRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOrAccess().getRightAndParserRuleCall_1_2_0()); }
		ruleAnd
		{ after(grammarAccess.getOrAccess().getRightAndParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__And__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAndAccess().getRightEqualityParserRuleCall_1_2_0()); }
		ruleEquality
		{ after(grammarAccess.getAndAccess().getRightEqualityParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__OpAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEqualityAccess().getOpAlternatives_1_1_0()); }
		(rule__Equality__OpAlternatives_1_1_0)
		{ after(grammarAccess.getEqualityAccess().getOpAlternatives_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEqualityAccess().getRightComparisonParserRuleCall_1_2_0()); }
		ruleComparison
		{ after(grammarAccess.getEqualityAccess().getRightComparisonParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__OpAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonAccess().getOpAlternatives_1_1_0()); }
		(rule__Comparison__OpAlternatives_1_1_0)
		{ after(grammarAccess.getComparisonAccess().getOpAlternatives_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonAccess().getRightPlusOrMinusParserRuleCall_1_2_0()); }
		rulePlusOrMinus
		{ after(grammarAccess.getComparisonAccess().getRightPlusOrMinusParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusOrMinus__RightAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPlusOrMinusAccess().getRightMulOrDivParserRuleCall_1_1_0()); }
		ruleMulOrDiv
		{ after(grammarAccess.getPlusOrMinusAccess().getRightMulOrDivParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MulOrDiv__OpAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMulOrDivAccess().getOpAlternatives_1_1_0()); }
		(rule__MulOrDiv__OpAlternatives_1_1_0)
		{ after(grammarAccess.getMulOrDivAccess().getOpAlternatives_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MulOrDiv__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMulOrDivAccess().getRightPrimaryParserRuleCall_1_2_0()); }
		rulePrimary
		{ after(grammarAccess.getMulOrDivAccess().getRightPrimaryParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__ExpressionAssignment_1_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryAccess().getExpressionPrimaryParserRuleCall_1_3_0()); }
		rulePrimary
		{ after(grammarAccess.getPrimaryAccess().getExpressionPrimaryParserRuleCall_1_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__ValueAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomicAccess().getValueINTTerminalRuleCall_0_1_0()); }
		RULE_INT
		{ after(grammarAccess.getAtomicAccess().getValueINTTerminalRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__ValueAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomicAccess().getValueSTRINGTerminalRuleCall_1_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getAtomicAccess().getValueSTRINGTerminalRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__ValueAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomicAccess().getValueAlternatives_2_1_0()); }
		(rule__Atomic__ValueAlternatives_2_1_0)
		{ after(grammarAccess.getAtomicAccess().getValueAlternatives_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__RefAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomicAccess().getRefLRefCrossReference_3_1_0()); }
		(
			{ before(grammarAccess.getAtomicAccess().getRefLRefIDTerminalRuleCall_3_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getAtomicAccess().getRefLRefIDTerminalRuleCall_3_1_0_1()); }
		)
		{ after(grammarAccess.getAtomicAccess().getRefLRefCrossReference_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__AttributeAssignment_4_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomicAccess().getAttributeIDTerminalRuleCall_4_3_0()); }
		RULE_ID
		{ after(grammarAccess.getAtomicAccess().getAttributeIDTerminalRuleCall_4_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__FunctionAssignment_5_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomicAccess().getFunctionFuncDefinitionCrossReference_5_1_0()); }
		(
			{ before(grammarAccess.getAtomicAccess().getFunctionFuncDefinitionIDTerminalRuleCall_5_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getAtomicAccess().getFunctionFuncDefinitionIDTerminalRuleCall_5_1_0_1()); }
		)
		{ after(grammarAccess.getAtomicAccess().getFunctionFuncDefinitionCrossReference_5_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__ParamsAssignment_5_3_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomicAccess().getParamsExpressionParserRuleCall_5_3_0_0()); }
		ruleExpression
		{ after(grammarAccess.getAtomicAccess().getParamsExpressionParserRuleCall_5_3_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__ParamsAssignment_5_3_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomicAccess().getParamsExpressionParserRuleCall_5_3_1_1_0()); }
		ruleExpression
		{ after(grammarAccess.getAtomicAccess().getParamsExpressionParserRuleCall_5_3_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__AttributeAssignment_6_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomicAccess().getAttributeIDTerminalRuleCall_6_3_0()); }
		RULE_ID
		{ after(grammarAccess.getAtomicAccess().getAttributeIDTerminalRuleCall_6_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__AttributeAssignment_7_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomicAccess().getAttributeIDTerminalRuleCall_7_3_0()); }
		RULE_ID
		{ after(grammarAccess.getAtomicAccess().getAttributeIDTerminalRuleCall_7_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeToSet__AttributeAssignment_0_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAttributeToSetAccess().getAttributeIDTerminalRuleCall_0_3_0()); }
		RULE_ID
		{ after(grammarAccess.getAttributeToSetAccess().getAttributeIDTerminalRuleCall_0_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeToSet__AttributeAssignment_1_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAttributeToSetAccess().getAttributeIDTerminalRuleCall_1_3_0()); }
		RULE_ID
		{ after(grammarAccess.getAttributeToSetAccess().getAttributeIDTerminalRuleCall_1_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncParam__TypeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFuncParamAccess().getTypeTYPETerminalRuleCall_0_0()); }
		RULE_TYPE
		{ after(grammarAccess.getFuncParamAccess().getTypeTYPETerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncParam__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFuncParamAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getFuncParamAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncDefinition__TypeAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFuncDefinitionAccess().getTypeTYPETerminalRuleCall_1_0()); }
		RULE_TYPE
		{ after(grammarAccess.getFuncDefinitionAccess().getTypeTYPETerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncDefinition__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFuncDefinitionAccess().getNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getFuncDefinitionAccess().getNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncDefinition__ParamsAssignment_4_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFuncDefinitionAccess().getParamsFuncParamParserRuleCall_4_0_0()); }
		ruleFuncParam
		{ after(grammarAccess.getFuncDefinitionAccess().getParamsFuncParamParserRuleCall_4_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncDefinition__ParamsAssignment_4_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFuncDefinitionAccess().getParamsFuncParamParserRuleCall_4_1_1_0()); }
		ruleFuncParam
		{ after(grammarAccess.getFuncDefinitionAccess().getParamsFuncParamParserRuleCall_4_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncDefinition__BlkAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFuncDefinitionAccess().getBlkFuncBlockParserRuleCall_6_0()); }
		ruleFuncBlock
		{ after(grammarAccess.getFuncDefinitionAccess().getBlkFuncBlockParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncBlock__StatementsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFuncBlockAccess().getStatementsFuncStatementParserRuleCall_2_0()); }
		ruleFuncStatement
		{ after(grammarAccess.getFuncBlockAccess().getStatementsFuncStatementParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncVarDeclaration__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFuncVarDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getFuncVarDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncVarDeclaration__ValAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFuncVarDeclarationAccess().getValExpressionParserRuleCall_3_0()); }
		ruleExpression
		{ after(grammarAccess.getFuncVarDeclarationAccess().getValExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncVarAssign__VarAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFuncVarAssignAccess().getVarFuncVarDeclarationCrossReference_0_0()); }
		(
			{ before(grammarAccess.getFuncVarAssignAccess().getVarFuncVarDeclarationIDTerminalRuleCall_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getFuncVarAssignAccess().getVarFuncVarDeclarationIDTerminalRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getFuncVarAssignAccess().getVarFuncVarDeclarationCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncVarAssign__ValAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFuncVarAssignAccess().getValExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getFuncVarAssignAccess().getValExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncIfElse__TestAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFuncIfElseAccess().getTestExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getFuncIfElseAccess().getTestExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncIfElse__ThenAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFuncIfElseAccess().getThenFuncBlockParserRuleCall_4_0()); }
		ruleFuncBlock
		{ after(grammarAccess.getFuncIfElseAccess().getThenFuncBlockParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncIfElse__TestAssignment_5_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFuncIfElseAccess().getTestExpressionParserRuleCall_5_2_0()); }
		ruleExpression
		{ after(grammarAccess.getFuncIfElseAccess().getTestExpressionParserRuleCall_5_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncIfElse__ThenAssignment_5_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFuncIfElseAccess().getThenFuncBlockParserRuleCall_5_4_0()); }
		ruleFuncBlock
		{ after(grammarAccess.getFuncIfElseAccess().getThenFuncBlockParserRuleCall_5_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncIfElse__ElseBranchAssignment_6_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFuncIfElseAccess().getElseBranchFuncBlockParserRuleCall_6_1_0()); }
		ruleFuncBlock
		{ after(grammarAccess.getFuncIfElseAccess().getElseBranchFuncBlockParserRuleCall_6_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncReturn__ValAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFuncReturnAccess().getValExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getFuncReturnAccess().getValExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}
