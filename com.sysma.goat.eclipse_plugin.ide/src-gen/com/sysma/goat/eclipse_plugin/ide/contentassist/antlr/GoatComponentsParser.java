/*
 * generated by Xtext 2.12.0
 */
package com.sysma.goat.eclipse_plugin.ide.contentassist.antlr;

import com.google.inject.Inject;
import com.sysma.goat.eclipse_plugin.ide.contentassist.antlr.internal.InternalGoatComponentsParser;
import com.sysma.goat.eclipse_plugin.services.GoatComponentsGrammarAccess;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class GoatComponentsParser extends AbstractContentAssistParser {

	@Inject
	private GoatComponentsGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalGoatComponentsParser createParser() {
		InternalGoatComponentsParser result = new InternalGoatComponentsParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getModelAccess().getAlternatives_1(), "rule__Model__Alternatives_1");
					put(grammarAccess.getProcAccess().getAlternatives(), "rule__Proc__Alternatives");
					put(grammarAccess.getNonDeterminismProcessAccess().getAlternatives(), "rule__NonDeterminismProcess__Alternatives");
					put(grammarAccess.getPreconditionsAccess().getPrecondAlternatives_1_0(), "rule__Preconditions__PrecondAlternatives_1_0");
					put(grammarAccess.getPredOutputProcessOrInputProcessesAccess().getAlternatives_1(), "rule__PredOutputProcessOrInputProcesses__Alternatives_1");
					put(grammarAccess.getPredOutputProcessOrInputProcessAccess().getAlternatives_1(), "rule__PredOutputProcessOrInputProcess__Alternatives_1");
					put(grammarAccess.getNZCProcessAccess().getAlternatives(), "rule__NZCProcess__Alternatives");
					put(grammarAccess.getNProcessAccess().getAlternatives(), "rule__NProcess__Alternatives");
					put(grammarAccess.getEnvInitValueAccess().getAlternatives(), "rule__EnvInitValue__Alternatives");
					put(grammarAccess.getEnvInitValueAccess().getValueAlternatives_2_1_0(), "rule__EnvInitValue__ValueAlternatives_2_1_0");
					put(grammarAccess.getEqualityAccess().getOpAlternatives_1_1_0(), "rule__Equality__OpAlternatives_1_1_0");
					put(grammarAccess.getComparisonAccess().getOpAlternatives_1_1_0(), "rule__Comparison__OpAlternatives_1_1_0");
					put(grammarAccess.getPlusOrMinusAccess().getAlternatives_1_0(), "rule__PlusOrMinus__Alternatives_1_0");
					put(grammarAccess.getMulOrDivAccess().getOpAlternatives_1_1_0(), "rule__MulOrDiv__OpAlternatives_1_1_0");
					put(grammarAccess.getPrimaryAccess().getAlternatives(), "rule__Primary__Alternatives");
					put(grammarAccess.getLRefAccess().getAlternatives(), "rule__LRef__Alternatives");
					put(grammarAccess.getAtomicAccess().getAlternatives(), "rule__Atomic__Alternatives");
					put(grammarAccess.getAtomicAccess().getValueAlternatives_2_1_0(), "rule__Atomic__ValueAlternatives_2_1_0");
					put(grammarAccess.getAttributeToSetAccess().getAlternatives(), "rule__AttributeToSet__Alternatives");
					put(grammarAccess.getFuncStatementAccess().getAlternatives(), "rule__FuncStatement__Alternatives");
					put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
					put(grammarAccess.getInterleavingProcessAccess().getGroup(), "rule__InterleavingProcess__Group__0");
					put(grammarAccess.getInterleavingProcessAccess().getGroup_2(), "rule__InterleavingProcess__Group_2__0");
					put(grammarAccess.getPreconditionsAccess().getGroup(), "rule__Preconditions__Group__0");
					put(grammarAccess.getPredOutputProcessOrInputProcessesAccess().getGroup(), "rule__PredOutputProcessOrInputProcesses__Group__0");
					put(grammarAccess.getPredOutputProcessOrInputProcessesAccess().getGroup_1_0(), "rule__PredOutputProcessOrInputProcesses__Group_1_0__0");
					put(grammarAccess.getPredOutputProcessOrInputProcessesAccess().getGroup_1_1(), "rule__PredOutputProcessOrInputProcesses__Group_1_1__0");
					put(grammarAccess.getPredOutputProcessOrInputProcessAccess().getGroup(), "rule__PredOutputProcessOrInputProcess__Group__0");
					put(grammarAccess.getPredOutputProcessOrInputProcessAccess().getGroup_1_0(), "rule__PredOutputProcessOrInputProcess__Group_1_0__0");
					put(grammarAccess.getPredOutputProcessOrInputProcessAccess().getGroup_1_1(), "rule__PredOutputProcessOrInputProcess__Group_1_1__0");
					put(grammarAccess.getInputProcessesPartAccess().getGroup(), "rule__InputProcessesPart__Group__0");
					put(grammarAccess.getInputProcessesPartAccess().getGroup_1(), "rule__InputProcessesPart__Group_1__0");
					put(grammarAccess.getInputProcessAccess().getGroup(), "rule__InputProcess__Group__0");
					put(grammarAccess.getInputProcessAccess().getGroup_6(), "rule__InputProcess__Group_6__0");
					put(grammarAccess.getInputProcessAccess().getGroup_6_1(), "rule__InputProcess__Group_6_1__0");
					put(grammarAccess.getInputProcessAccess().getGroup_8(), "rule__InputProcess__Group_8__0");
					put(grammarAccess.getOutputProcessPartAccess().getGroup(), "rule__OutputProcessPart__Group__0");
					put(grammarAccess.getOutputProcessPartAccess().getGroup_2(), "rule__OutputProcessPart__Group_2__0");
					put(grammarAccess.getOutputProcessPartAccess().getGroup_2_1(), "rule__OutputProcessPart__Group_2_1__0");
					put(grammarAccess.getOutputProcessPartAccess().getGroup_8(), "rule__OutputProcessPart__Group_8__0");
					put(grammarAccess.getOutputProcessPartAccess().getGroup_9(), "rule__OutputProcessPart__Group_9__0");
					put(grammarAccess.getIfProcessesAccess().getGroup(), "rule__IfProcesses__Group__0");
					put(grammarAccess.getIfProcessesAccess().getGroup_2(), "rule__IfProcesses__Group_2__0");
					put(grammarAccess.getIfProcessesAccess().getGroup_3(), "rule__IfProcesses__Group_3__0");
					put(grammarAccess.getIfBranchProcessAccess().getGroup(), "rule__IfBranchProcess__Group__0");
					put(grammarAccess.getElseBranchProcessAccess().getGroup(), "rule__ElseBranchProcess__Group__0");
					put(grammarAccess.getUpdateAccess().getGroup(), "rule__Update__Group__0");
					put(grammarAccess.getUpdateAccess().getGroup_4(), "rule__Update__Group_4__0");
					put(grammarAccess.getAwarenessAccess().getGroup(), "rule__Awareness__Group__0");
					put(grammarAccess.getNZCProcessAccess().getGroup_0(), "rule__NZCProcess__Group_0__0");
					put(grammarAccess.getNProcessAccess().getGroup_0(), "rule__NProcess__Group_0__0");
					put(grammarAccess.getCallProcessAccess().getGroup(), "rule__CallProcess__Group__0");
					put(grammarAccess.getZeroProcessAccess().getGroup(), "rule__ZeroProcess__Group__0");
					put(grammarAccess.getProcessDefinitionAccess().getGroup(), "rule__ProcessDefinition__Group__0");
					put(grammarAccess.getEnvInitValueAccess().getGroup_0(), "rule__EnvInitValue__Group_0__0");
					put(grammarAccess.getEnvInitValueAccess().getGroup_1(), "rule__EnvInitValue__Group_1__0");
					put(grammarAccess.getEnvInitValueAccess().getGroup_2(), "rule__EnvInitValue__Group_2__0");
					put(grammarAccess.getEnvironmentAccess().getGroup(), "rule__Environment__Group__0");
					put(grammarAccess.getEnvironmentAccess().getGroup_2(), "rule__Environment__Group_2__0");
					put(grammarAccess.getEnvironmentAccess().getGroup_2_3(), "rule__Environment__Group_2_3__0");
					put(grammarAccess.getComponentDefinitionAccess().getGroup(), "rule__ComponentDefinition__Group__0");
					put(grammarAccess.getOrAccess().getGroup(), "rule__Or__Group__0");
					put(grammarAccess.getOrAccess().getGroup_1(), "rule__Or__Group_1__0");
					put(grammarAccess.getAndAccess().getGroup(), "rule__And__Group__0");
					put(grammarAccess.getAndAccess().getGroup_1(), "rule__And__Group_1__0");
					put(grammarAccess.getEqualityAccess().getGroup(), "rule__Equality__Group__0");
					put(grammarAccess.getEqualityAccess().getGroup_1(), "rule__Equality__Group_1__0");
					put(grammarAccess.getComparisonAccess().getGroup(), "rule__Comparison__Group__0");
					put(grammarAccess.getComparisonAccess().getGroup_1(), "rule__Comparison__Group_1__0");
					put(grammarAccess.getPlusOrMinusAccess().getGroup(), "rule__PlusOrMinus__Group__0");
					put(grammarAccess.getPlusOrMinusAccess().getGroup_1(), "rule__PlusOrMinus__Group_1__0");
					put(grammarAccess.getPlusOrMinusAccess().getGroup_1_0_0(), "rule__PlusOrMinus__Group_1_0_0__0");
					put(grammarAccess.getPlusOrMinusAccess().getGroup_1_0_1(), "rule__PlusOrMinus__Group_1_0_1__0");
					put(grammarAccess.getPlusOrMinusAccess().getGroup_1_0_2(), "rule__PlusOrMinus__Group_1_0_2__0");
					put(grammarAccess.getMulOrDivAccess().getGroup(), "rule__MulOrDiv__Group__0");
					put(grammarAccess.getMulOrDivAccess().getGroup_1(), "rule__MulOrDiv__Group_1__0");
					put(grammarAccess.getPrimaryAccess().getGroup_0(), "rule__Primary__Group_0__0");
					put(grammarAccess.getPrimaryAccess().getGroup_1(), "rule__Primary__Group_1__0");
					put(grammarAccess.getAtomicAccess().getGroup_0(), "rule__Atomic__Group_0__0");
					put(grammarAccess.getAtomicAccess().getGroup_1(), "rule__Atomic__Group_1__0");
					put(grammarAccess.getAtomicAccess().getGroup_2(), "rule__Atomic__Group_2__0");
					put(grammarAccess.getAtomicAccess().getGroup_3(), "rule__Atomic__Group_3__0");
					put(grammarAccess.getAtomicAccess().getGroup_4(), "rule__Atomic__Group_4__0");
					put(grammarAccess.getAtomicAccess().getGroup_5(), "rule__Atomic__Group_5__0");
					put(grammarAccess.getAtomicAccess().getGroup_5_3(), "rule__Atomic__Group_5_3__0");
					put(grammarAccess.getAtomicAccess().getGroup_5_3_1(), "rule__Atomic__Group_5_3_1__0");
					put(grammarAccess.getAtomicAccess().getGroup_6(), "rule__Atomic__Group_6__0");
					put(grammarAccess.getAtomicAccess().getGroup_7(), "rule__Atomic__Group_7__0");
					put(grammarAccess.getAttributeToSetAccess().getGroup_0(), "rule__AttributeToSet__Group_0__0");
					put(grammarAccess.getAttributeToSetAccess().getGroup_1(), "rule__AttributeToSet__Group_1__0");
					put(grammarAccess.getFuncParamAccess().getGroup(), "rule__FuncParam__Group__0");
					put(grammarAccess.getFuncDefinitionAccess().getGroup(), "rule__FuncDefinition__Group__0");
					put(grammarAccess.getFuncDefinitionAccess().getGroup_4(), "rule__FuncDefinition__Group_4__0");
					put(grammarAccess.getFuncDefinitionAccess().getGroup_4_1(), "rule__FuncDefinition__Group_4_1__0");
					put(grammarAccess.getFuncBlockAccess().getGroup(), "rule__FuncBlock__Group__0");
					put(grammarAccess.getFuncVarDeclarationAccess().getGroup(), "rule__FuncVarDeclaration__Group__0");
					put(grammarAccess.getFuncVarAssignAccess().getGroup(), "rule__FuncVarAssign__Group__0");
					put(grammarAccess.getFuncIfElseAccess().getGroup(), "rule__FuncIfElse__Group__0");
					put(grammarAccess.getFuncIfElseAccess().getGroup_5(), "rule__FuncIfElse__Group_5__0");
					put(grammarAccess.getFuncIfElseAccess().getGroup_6(), "rule__FuncIfElse__Group_6__0");
					put(grammarAccess.getFuncReturnAccess().getGroup(), "rule__FuncReturn__Group__0");
					put(grammarAccess.getModelAccess().getProcessesAssignment_1_0(), "rule__Model__ProcessesAssignment_1_0");
					put(grammarAccess.getModelAccess().getComponentsAssignment_1_1(), "rule__Model__ComponentsAssignment_1_1");
					put(grammarAccess.getModelAccess().getFunctionsAssignment_1_2(), "rule__Model__FunctionsAssignment_1_2");
					put(grammarAccess.getInterleavingProcessAccess().getSubProcsAssignment_2_1(), "rule__InterleavingProcess__SubProcsAssignment_2_1");
					put(grammarAccess.getPreconditionsAccess().getPrecondAssignment_1(), "rule__Preconditions__PrecondAssignment_1");
					put(grammarAccess.getPredOutputProcessOrInputProcessAccess().getInputsAssignment_1_1_1(), "rule__PredOutputProcessOrInputProcess__InputsAssignment_1_1_1");
					put(grammarAccess.getInputProcessesPartAccess().getInputsAssignment_0(), "rule__InputProcessesPart__InputsAssignment_0");
					put(grammarAccess.getInputProcessesPartAccess().getPrecondsAssignment_1_1(), "rule__InputProcessesPart__PrecondsAssignment_1_1");
					put(grammarAccess.getInputProcessesPartAccess().getInputsAssignment_1_2(), "rule__InputProcessesPart__InputsAssignment_1_2");
					put(grammarAccess.getInputProcessAccess().getRec_predAssignment_3(), "rule__InputProcess__Rec_predAssignment_3");
					put(grammarAccess.getInputProcessAccess().getMsgInPartsAssignment_6_0(), "rule__InputProcess__MsgInPartsAssignment_6_0");
					put(grammarAccess.getInputProcessAccess().getMsgInPartsAssignment_6_1_1(), "rule__InputProcess__MsgInPartsAssignment_6_1_1");
					put(grammarAccess.getInputProcessAccess().getOutputAssignment_8_2(), "rule__InputProcess__OutputAssignment_8_2");
					put(grammarAccess.getInputProcessAccess().getNextAssignment_10(), "rule__InputProcess__NextAssignment_10");
					put(grammarAccess.getOutputProcessPartAccess().getMsgOutPartsAssignment_2_0(), "rule__OutputProcessPart__MsgOutPartsAssignment_2_0");
					put(grammarAccess.getOutputProcessPartAccess().getMsgOutPartsAssignment_2_1_1(), "rule__OutputProcessPart__MsgOutPartsAssignment_2_1_1");
					put(grammarAccess.getOutputProcessPartAccess().getSend_predAssignment_6(), "rule__OutputProcessPart__Send_predAssignment_6");
					put(grammarAccess.getOutputProcessPartAccess().getOutputAssignment_8_2(), "rule__OutputProcessPart__OutputAssignment_8_2");
					put(grammarAccess.getOutputProcessPartAccess().getMsecAssignment_9_2(), "rule__OutputProcessPart__MsecAssignment_9_2");
					put(grammarAccess.getOutputProcessPartAccess().getNextAssignment_11(), "rule__OutputProcessPart__NextAssignment_11");
					put(grammarAccess.getIfProcessesAccess().getBranchesAssignment_1(), "rule__IfProcesses__BranchesAssignment_1");
					put(grammarAccess.getIfProcessesAccess().getBranchesAssignment_2_1(), "rule__IfProcesses__BranchesAssignment_2_1");
					put(grammarAccess.getIfProcessesAccess().getBranchesAssignment_3_1(), "rule__IfProcesses__BranchesAssignment_3_1");
					put(grammarAccess.getIfBranchProcessAccess().getCondAssignment_2(), "rule__IfBranchProcess__CondAssignment_2");
					put(grammarAccess.getIfBranchProcessAccess().getThenAssignment_4(), "rule__IfBranchProcess__ThenAssignment_4");
					put(grammarAccess.getElseBranchProcessAccess().getThenAssignment_2(), "rule__ElseBranchProcess__ThenAssignment_2");
					put(grammarAccess.getUpdateAccess().getVarsAssignment_1(), "rule__Update__VarsAssignment_1");
					put(grammarAccess.getUpdateAccess().getValsAssignment_3(), "rule__Update__ValsAssignment_3");
					put(grammarAccess.getUpdateAccess().getVarsAssignment_4_1(), "rule__Update__VarsAssignment_4_1");
					put(grammarAccess.getUpdateAccess().getValsAssignment_4_3(), "rule__Update__ValsAssignment_4_3");
					put(grammarAccess.getAwarenessAccess().getPredAssignment_3(), "rule__Awareness__PredAssignment_3");
					put(grammarAccess.getCallProcessAccess().getProcnameAssignment_1(), "rule__CallProcess__ProcnameAssignment_1");
					put(grammarAccess.getProcessDefinitionAccess().getNameAssignment_1(), "rule__ProcessDefinition__NameAssignment_1");
					put(grammarAccess.getProcessDefinitionAccess().getProcAssignment_3(), "rule__ProcessDefinition__ProcAssignment_3");
					put(grammarAccess.getEnvInitValueAccess().getValueAssignment_0_1(), "rule__EnvInitValue__ValueAssignment_0_1");
					put(grammarAccess.getEnvInitValueAccess().getValueAssignment_1_1(), "rule__EnvInitValue__ValueAssignment_1_1");
					put(grammarAccess.getEnvInitValueAccess().getValueAssignment_2_1(), "rule__EnvInitValue__ValueAssignment_2_1");
					put(grammarAccess.getEnvironmentAccess().getAttrsAssignment_2_0(), "rule__Environment__AttrsAssignment_2_0");
					put(grammarAccess.getEnvironmentAccess().getValsAssignment_2_2(), "rule__Environment__ValsAssignment_2_2");
					put(grammarAccess.getEnvironmentAccess().getAttrsAssignment_2_3_1(), "rule__Environment__AttrsAssignment_2_3_1");
					put(grammarAccess.getEnvironmentAccess().getValsAssignment_2_3_3(), "rule__Environment__ValsAssignment_2_3_3");
					put(grammarAccess.getComponentDefinitionAccess().getEnvAssignment_1(), "rule__ComponentDefinition__EnvAssignment_1");
					put(grammarAccess.getComponentDefinitionAccess().getProcAssignment_2(), "rule__ComponentDefinition__ProcAssignment_2");
					put(grammarAccess.getComponentDefinitionAccess().getAddressAssignment_4(), "rule__ComponentDefinition__AddressAssignment_4");
					put(grammarAccess.getOrAccess().getRightAssignment_1_2(), "rule__Or__RightAssignment_1_2");
					put(grammarAccess.getAndAccess().getRightAssignment_1_2(), "rule__And__RightAssignment_1_2");
					put(grammarAccess.getEqualityAccess().getOpAssignment_1_1(), "rule__Equality__OpAssignment_1_1");
					put(grammarAccess.getEqualityAccess().getRightAssignment_1_2(), "rule__Equality__RightAssignment_1_2");
					put(grammarAccess.getComparisonAccess().getOpAssignment_1_1(), "rule__Comparison__OpAssignment_1_1");
					put(grammarAccess.getComparisonAccess().getRightAssignment_1_2(), "rule__Comparison__RightAssignment_1_2");
					put(grammarAccess.getPlusOrMinusAccess().getRightAssignment_1_1(), "rule__PlusOrMinus__RightAssignment_1_1");
					put(grammarAccess.getMulOrDivAccess().getOpAssignment_1_1(), "rule__MulOrDiv__OpAssignment_1_1");
					put(grammarAccess.getMulOrDivAccess().getRightAssignment_1_2(), "rule__MulOrDiv__RightAssignment_1_2");
					put(grammarAccess.getPrimaryAccess().getExpressionAssignment_1_3(), "rule__Primary__ExpressionAssignment_1_3");
					put(grammarAccess.getAtomicAccess().getValueAssignment_0_1(), "rule__Atomic__ValueAssignment_0_1");
					put(grammarAccess.getAtomicAccess().getValueAssignment_1_1(), "rule__Atomic__ValueAssignment_1_1");
					put(grammarAccess.getAtomicAccess().getValueAssignment_2_1(), "rule__Atomic__ValueAssignment_2_1");
					put(grammarAccess.getAtomicAccess().getRefAssignment_3_1(), "rule__Atomic__RefAssignment_3_1");
					put(grammarAccess.getAtomicAccess().getAttributeAssignment_4_3(), "rule__Atomic__AttributeAssignment_4_3");
					put(grammarAccess.getAtomicAccess().getFunctionAssignment_5_1(), "rule__Atomic__FunctionAssignment_5_1");
					put(grammarAccess.getAtomicAccess().getParamsAssignment_5_3_0(), "rule__Atomic__ParamsAssignment_5_3_0");
					put(grammarAccess.getAtomicAccess().getParamsAssignment_5_3_1_1(), "rule__Atomic__ParamsAssignment_5_3_1_1");
					put(grammarAccess.getAtomicAccess().getAttributeAssignment_6_3(), "rule__Atomic__AttributeAssignment_6_3");
					put(grammarAccess.getAtomicAccess().getAttributeAssignment_7_3(), "rule__Atomic__AttributeAssignment_7_3");
					put(grammarAccess.getAttributeToSetAccess().getAttributeAssignment_0_3(), "rule__AttributeToSet__AttributeAssignment_0_3");
					put(grammarAccess.getAttributeToSetAccess().getAttributeAssignment_1_3(), "rule__AttributeToSet__AttributeAssignment_1_3");
					put(grammarAccess.getFuncParamAccess().getTypeAssignment_0(), "rule__FuncParam__TypeAssignment_0");
					put(grammarAccess.getFuncParamAccess().getNameAssignment_1(), "rule__FuncParam__NameAssignment_1");
					put(grammarAccess.getFuncDefinitionAccess().getTypeAssignment_1(), "rule__FuncDefinition__TypeAssignment_1");
					put(grammarAccess.getFuncDefinitionAccess().getNameAssignment_2(), "rule__FuncDefinition__NameAssignment_2");
					put(grammarAccess.getFuncDefinitionAccess().getParamsAssignment_4_0(), "rule__FuncDefinition__ParamsAssignment_4_0");
					put(grammarAccess.getFuncDefinitionAccess().getParamsAssignment_4_1_1(), "rule__FuncDefinition__ParamsAssignment_4_1_1");
					put(grammarAccess.getFuncDefinitionAccess().getBlkAssignment_6(), "rule__FuncDefinition__BlkAssignment_6");
					put(grammarAccess.getFuncBlockAccess().getStatementsAssignment_2(), "rule__FuncBlock__StatementsAssignment_2");
					put(grammarAccess.getFuncVarDeclarationAccess().getNameAssignment_1(), "rule__FuncVarDeclaration__NameAssignment_1");
					put(grammarAccess.getFuncVarDeclarationAccess().getValAssignment_3(), "rule__FuncVarDeclaration__ValAssignment_3");
					put(grammarAccess.getFuncVarAssignAccess().getVarAssignment_0(), "rule__FuncVarAssign__VarAssignment_0");
					put(grammarAccess.getFuncVarAssignAccess().getValAssignment_2(), "rule__FuncVarAssign__ValAssignment_2");
					put(grammarAccess.getFuncIfElseAccess().getTestAssignment_2(), "rule__FuncIfElse__TestAssignment_2");
					put(grammarAccess.getFuncIfElseAccess().getThenAssignment_4(), "rule__FuncIfElse__ThenAssignment_4");
					put(grammarAccess.getFuncIfElseAccess().getTestAssignment_5_3(), "rule__FuncIfElse__TestAssignment_5_3");
					put(grammarAccess.getFuncIfElseAccess().getThenAssignment_5_5(), "rule__FuncIfElse__ThenAssignment_5_5");
					put(grammarAccess.getFuncIfElseAccess().getElseBranchAssignment_6_1(), "rule__FuncIfElse__ElseBranchAssignment_6_1");
					put(grammarAccess.getFuncReturnAccess().getValAssignment_1(), "rule__FuncReturn__ValAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public GoatComponentsGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(GoatComponentsGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
