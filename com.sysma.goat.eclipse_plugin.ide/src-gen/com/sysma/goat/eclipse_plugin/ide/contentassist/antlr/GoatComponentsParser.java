/*
 * generated by Xtext 2.12.0
 */
package com.sysma.goat.eclipse_plugin.ide.contentassist.antlr;

import com.google.inject.Inject;
import com.sysma.goat.eclipse_plugin.ide.contentassist.antlr.internal.InternalGoatComponentsParser;
import com.sysma.goat.eclipse_plugin.services.GoatComponentsGrammarAccess;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class GoatComponentsParser extends AbstractContentAssistParser {

	@Inject
	private GoatComponentsGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalGoatComponentsParser createParser() {
		InternalGoatComponentsParser result = new InternalGoatComponentsParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getModelAccess().getAlternatives(), "rule__Model__Alternatives");
					put(grammarAccess.getProcAccess().getAlternatives(), "rule__Proc__Alternatives");
					put(grammarAccess.getNonDeterminismProcessAccess().getAlternatives(), "rule__NonDeterminismProcess__Alternatives");
					put(grammarAccess.getPreconditionsAccess().getPrecondAlternatives_1_0(), "rule__Preconditions__PrecondAlternatives_1_0");
					put(grammarAccess.getPredOutputProcessOrInputProcessesAccess().getAlternatives_1(), "rule__PredOutputProcessOrInputProcesses__Alternatives_1");
					put(grammarAccess.getPredOutputProcessOrInputProcessAccess().getAlternatives_1(), "rule__PredOutputProcessOrInputProcess__Alternatives_1");
					put(grammarAccess.getNZCProcessAccess().getAlternatives(), "rule__NZCProcess__Alternatives");
					put(grammarAccess.getNProcessAccess().getAlternatives(), "rule__NProcess__Alternatives");
					put(grammarAccess.getValueAccess().getAlternatives(), "rule__Value__Alternatives");
					put(grammarAccess.getNotAccess().getAlternatives(), "rule__Not__Alternatives");
					put(grammarAccess.getTermAccess().getAlternatives(), "rule__Term__Alternatives");
					put(grammarAccess.getImmediateAccess().getAlternatives_1(), "rule__Immediate__Alternatives_1");
					put(grammarAccess.getEqualityTestAccess().getOp1Alternatives_1_0(), "rule__EqualityTest__Op1Alternatives_1_0");
					put(grammarAccess.getEqualityTestAccess().getOperandAlternatives_2_0(), "rule__EqualityTest__OperandAlternatives_2_0");
					put(grammarAccess.getFuncStatementAccess().getAlternatives(), "rule__FuncStatement__Alternatives");
					put(grammarAccess.getFuncVarParamAccess().getAlternatives(), "rule__FuncVarParam__Alternatives");
					put(grammarAccess.getFuncValAccess().getAlternatives(), "rule__FuncVal__Alternatives");
					put(grammarAccess.getFuncNotAccess().getAlternatives(), "rule__FuncNot__Alternatives");
					put(grammarAccess.getFuncTermAccess().getAlternatives(), "rule__FuncTerm__Alternatives");
					put(grammarAccess.getFuncImmediateAccess().getAlternatives_1(), "rule__FuncImmediate__Alternatives_1");
					put(grammarAccess.getFuncEqualityTestAccess().getOperandAlternatives_2_0(), "rule__FuncEqualityTest__OperandAlternatives_2_0");
					put(grammarAccess.getInterleavingProcessAccess().getGroup(), "rule__InterleavingProcess__Group__0");
					put(grammarAccess.getInterleavingProcessAccess().getGroup_2(), "rule__InterleavingProcess__Group_2__0");
					put(grammarAccess.getPreconditionsAccess().getGroup(), "rule__Preconditions__Group__0");
					put(grammarAccess.getPredOutputProcessOrInputProcessesAccess().getGroup(), "rule__PredOutputProcessOrInputProcesses__Group__0");
					put(grammarAccess.getPredOutputProcessOrInputProcessesAccess().getGroup_1_0(), "rule__PredOutputProcessOrInputProcesses__Group_1_0__0");
					put(grammarAccess.getPredOutputProcessOrInputProcessesAccess().getGroup_1_1(), "rule__PredOutputProcessOrInputProcesses__Group_1_1__0");
					put(grammarAccess.getPredOutputProcessOrInputProcessAccess().getGroup(), "rule__PredOutputProcessOrInputProcess__Group__0");
					put(grammarAccess.getPredOutputProcessOrInputProcessAccess().getGroup_1_0(), "rule__PredOutputProcessOrInputProcess__Group_1_0__0");
					put(grammarAccess.getPredOutputProcessOrInputProcessAccess().getGroup_1_1(), "rule__PredOutputProcessOrInputProcess__Group_1_1__0");
					put(grammarAccess.getInputProcessesPartAccess().getGroup(), "rule__InputProcessesPart__Group__0");
					put(grammarAccess.getInputProcessesPartAccess().getGroup_1(), "rule__InputProcessesPart__Group_1__0");
					put(grammarAccess.getInputProcessAccess().getGroup(), "rule__InputProcess__Group__0");
					put(grammarAccess.getInputProcessAccess().getGroup_5(), "rule__InputProcess__Group_5__0");
					put(grammarAccess.getInputProcessAccess().getGroup_5_1(), "rule__InputProcess__Group_5_1__0");
					put(grammarAccess.getOutputProcessPartAccess().getGroup(), "rule__OutputProcessPart__Group__0");
					put(grammarAccess.getOutputProcessPartAccess().getGroup_1(), "rule__OutputProcessPart__Group_1__0");
					put(grammarAccess.getOutputProcessPartAccess().getGroup_1_1(), "rule__OutputProcessPart__Group_1_1__0");
					put(grammarAccess.getOutputProcessPartAccess().getGroup_6(), "rule__OutputProcessPart__Group_6__0");
					put(grammarAccess.getIfProcessesAccess().getGroup(), "rule__IfProcesses__Group__0");
					put(grammarAccess.getIfProcessesAccess().getGroup_2(), "rule__IfProcesses__Group_2__0");
					put(grammarAccess.getIfBranchProcessAccess().getGroup(), "rule__IfBranchProcess__Group__0");
					put(grammarAccess.getUpdateAccess().getGroup(), "rule__Update__Group__0");
					put(grammarAccess.getUpdateAccess().getGroup_4(), "rule__Update__Group_4__0");
					put(grammarAccess.getAwarenessAccess().getGroup(), "rule__Awareness__Group__0");
					put(grammarAccess.getNZCProcessAccess().getGroup_0(), "rule__NZCProcess__Group_0__0");
					put(grammarAccess.getNProcessAccess().getGroup_0(), "rule__NProcess__Group_0__0");
					put(grammarAccess.getCallProcessAccess().getGroup(), "rule__CallProcess__Group__0");
					put(grammarAccess.getCallProcessAccess().getGroup_2(), "rule__CallProcess__Group_2__0");
					put(grammarAccess.getCallProcessAccess().getGroup_2_2(), "rule__CallProcess__Group_2_2__0");
					put(grammarAccess.getZeroProcessAccess().getGroup(), "rule__ZeroProcess__Group__0");
					put(grammarAccess.getProcessDefinitionAccess().getGroup(), "rule__ProcessDefinition__Group__0");
					put(grammarAccess.getProcessDefinitionAccess().getGroup_2(), "rule__ProcessDefinition__Group_2__0");
					put(grammarAccess.getProcessDefinitionAccess().getGroup_2_2(), "rule__ProcessDefinition__Group_2_2__0");
					put(grammarAccess.getEnvironmentAccess().getGroup(), "rule__Environment__Group__0");
					put(grammarAccess.getEnvironmentAccess().getGroup_2(), "rule__Environment__Group_2__0");
					put(grammarAccess.getEnvironmentAccess().getGroup_2_3(), "rule__Environment__Group_2_3__0");
					put(grammarAccess.getComponentDefinitionAccess().getGroup(), "rule__ComponentDefinition__Group__0");
					put(grammarAccess.getComponentDefinitionAccess().getGroup_3(), "rule__ComponentDefinition__Group_3__0");
					put(grammarAccess.getComponentDefinitionAccess().getGroup_3_2(), "rule__ComponentDefinition__Group_3_2__0");
					put(grammarAccess.getAttributeAccess().getGroup(), "rule__Attribute__Group__0");
					put(grammarAccess.getAttributeAccess().getGroup_0(), "rule__Attribute__Group_0__0");
					put(grammarAccess.getRecAttributeAccess().getGroup(), "rule__RecAttribute__Group__0");
					put(grammarAccess.getAttributeValueAccess().getGroup(), "rule__AttributeValue__Group__0");
					put(grammarAccess.getImmediateValueAccess().getGroup(), "rule__ImmediateValue__Group__0");
					put(grammarAccess.getGoStringFunctionAccess().getGroup(), "rule__GoStringFunction__Group__0");
					put(grammarAccess.getGoStringFunctionAccess().getGroup_3(), "rule__GoStringFunction__Group_3__0");
					put(grammarAccess.getGoStringFunctionAccess().getGroup_3_1(), "rule__GoStringFunction__Group_3_1__0");
					put(grammarAccess.getPredicateAccess().getGroup(), "rule__Predicate__Group__0");
					put(grammarAccess.getPredicateAccess().getGroup_1(), "rule__Predicate__Group_1__0");
					put(grammarAccess.getAndAccess().getGroup(), "rule__And__Group__0");
					put(grammarAccess.getAndAccess().getGroup_1(), "rule__And__Group_1__0");
					put(grammarAccess.getNotAccess().getGroup_1(), "rule__Not__Group_1__0");
					put(grammarAccess.getTermAccess().getGroup_2(), "rule__Term__Group_2__0");
					put(grammarAccess.getImmediateAccess().getGroup(), "rule__Immediate__Group__0");
					put(grammarAccess.getEqualityTestAccess().getGroup(), "rule__EqualityTest__Group__0");
					put(grammarAccess.getFuncDefinitionAccess().getGroup(), "rule__FuncDefinition__Group__0");
					put(grammarAccess.getFuncDefinitionAccess().getGroup_3(), "rule__FuncDefinition__Group_3__0");
					put(grammarAccess.getFuncDefinitionAccess().getGroup_3_1(), "rule__FuncDefinition__Group_3_1__0");
					put(grammarAccess.getFuncBlockAccess().getGroup(), "rule__FuncBlock__Group__0");
					put(grammarAccess.getFuncVarDeclarationAccess().getGroup(), "rule__FuncVarDeclaration__Group__0");
					put(grammarAccess.getFuncVarAssignAccess().getGroup(), "rule__FuncVarAssign__Group__0");
					put(grammarAccess.getFuncValAccess().getGroup_0(), "rule__FuncVal__Group_0__0");
					put(grammarAccess.getFuncValAccess().getGroup_1(), "rule__FuncVal__Group_1__0");
					put(grammarAccess.getFuncPredicateAccess().getGroup(), "rule__FuncPredicate__Group__0");
					put(grammarAccess.getFuncPredicateAccess().getGroup_1(), "rule__FuncPredicate__Group_1__0");
					put(grammarAccess.getFuncAndAccess().getGroup(), "rule__FuncAnd__Group__0");
					put(grammarAccess.getFuncAndAccess().getGroup_1(), "rule__FuncAnd__Group_1__0");
					put(grammarAccess.getFuncNotAccess().getGroup_1(), "rule__FuncNot__Group_1__0");
					put(grammarAccess.getFuncTermAccess().getGroup_2(), "rule__FuncTerm__Group_2__0");
					put(grammarAccess.getFuncImmediateAccess().getGroup(), "rule__FuncImmediate__Group__0");
					put(grammarAccess.getFuncEqualityTestAccess().getGroup(), "rule__FuncEqualityTest__Group__0");
					put(grammarAccess.getFuncIfElseAccess().getGroup(), "rule__FuncIfElse__Group__0");
					put(grammarAccess.getFuncIfElseAccess().getGroup_5(), "rule__FuncIfElse__Group_5__0");
					put(grammarAccess.getFuncIfElseAccess().getGroup_6(), "rule__FuncIfElse__Group_6__0");
					put(grammarAccess.getFuncReturnAccess().getGroup(), "rule__FuncReturn__Group__0");
					put(grammarAccess.getModelAccess().getProcessesAssignment_0(), "rule__Model__ProcessesAssignment_0");
					put(grammarAccess.getModelAccess().getComponentsAssignment_1(), "rule__Model__ComponentsAssignment_1");
					put(grammarAccess.getModelAccess().getFunctionsAssignment_2(), "rule__Model__FunctionsAssignment_2");
					put(grammarAccess.getInterleavingProcessAccess().getSubProcsAssignment_2_1(), "rule__InterleavingProcess__SubProcsAssignment_2_1");
					put(grammarAccess.getPreconditionsAccess().getPrecondAssignment_1(), "rule__Preconditions__PrecondAssignment_1");
					put(grammarAccess.getPredOutputProcessOrInputProcessAccess().getInputsAssignment_1_1_1(), "rule__PredOutputProcessOrInputProcess__InputsAssignment_1_1_1");
					put(grammarAccess.getInputProcessesPartAccess().getInputsAssignment_0(), "rule__InputProcessesPart__InputsAssignment_0");
					put(grammarAccess.getInputProcessesPartAccess().getPrecondsAssignment_1_1(), "rule__InputProcessesPart__PrecondsAssignment_1_1");
					put(grammarAccess.getInputProcessesPartAccess().getInputsAssignment_1_2(), "rule__InputProcessesPart__InputsAssignment_1_2");
					put(grammarAccess.getInputProcessAccess().getRec_predAssignment_2(), "rule__InputProcess__Rec_predAssignment_2");
					put(grammarAccess.getInputProcessAccess().getMsgInPartsAssignment_5_0(), "rule__InputProcess__MsgInPartsAssignment_5_0");
					put(grammarAccess.getInputProcessAccess().getMsgInPartsAssignment_5_1_1(), "rule__InputProcess__MsgInPartsAssignment_5_1_1");
					put(grammarAccess.getInputProcessAccess().getOutputAssignment_7(), "rule__InputProcess__OutputAssignment_7");
					put(grammarAccess.getInputProcessAccess().getNextAssignment_9(), "rule__InputProcess__NextAssignment_9");
					put(grammarAccess.getOutputProcessPartAccess().getMsgOutPartsAssignment_1_0(), "rule__OutputProcessPart__MsgOutPartsAssignment_1_0");
					put(grammarAccess.getOutputProcessPartAccess().getMsgOutPartsAssignment_1_1_1(), "rule__OutputProcessPart__MsgOutPartsAssignment_1_1_1");
					put(grammarAccess.getOutputProcessPartAccess().getSend_predAssignment_4(), "rule__OutputProcessPart__Send_predAssignment_4");
					put(grammarAccess.getOutputProcessPartAccess().getOutputAssignment_5(), "rule__OutputProcessPart__OutputAssignment_5");
					put(grammarAccess.getOutputProcessPartAccess().getMsecAssignment_6_2(), "rule__OutputProcessPart__MsecAssignment_6_2");
					put(grammarAccess.getOutputProcessPartAccess().getNextAssignment_8(), "rule__OutputProcessPart__NextAssignment_8");
					put(grammarAccess.getIfProcessesAccess().getBranchesAssignment_1(), "rule__IfProcesses__BranchesAssignment_1");
					put(grammarAccess.getIfProcessesAccess().getBranchesAssignment_2_1(), "rule__IfProcesses__BranchesAssignment_2_1");
					put(grammarAccess.getIfBranchProcessAccess().getCondAssignment_2(), "rule__IfBranchProcess__CondAssignment_2");
					put(grammarAccess.getIfBranchProcessAccess().getThenAssignment_4(), "rule__IfBranchProcess__ThenAssignment_4");
					put(grammarAccess.getUpdateAccess().getVarsAssignment_1(), "rule__Update__VarsAssignment_1");
					put(grammarAccess.getUpdateAccess().getValsAssignment_3(), "rule__Update__ValsAssignment_3");
					put(grammarAccess.getUpdateAccess().getVarsAssignment_4_1(), "rule__Update__VarsAssignment_4_1");
					put(grammarAccess.getUpdateAccess().getValsAssignment_4_3(), "rule__Update__ValsAssignment_4_3");
					put(grammarAccess.getAwarenessAccess().getPredAssignment_1(), "rule__Awareness__PredAssignment_1");
					put(grammarAccess.getCallProcessAccess().getProcnameAssignment_1(), "rule__CallProcess__ProcnameAssignment_1");
					put(grammarAccess.getCallProcessAccess().getParamsAssignment_2_1(), "rule__CallProcess__ParamsAssignment_2_1");
					put(grammarAccess.getCallProcessAccess().getParamsAssignment_2_2_1(), "rule__CallProcess__ParamsAssignment_2_2_1");
					put(grammarAccess.getProcessDefinitionAccess().getNameAssignment_1(), "rule__ProcessDefinition__NameAssignment_1");
					put(grammarAccess.getProcessDefinitionAccess().getParamsAssignment_2_1(), "rule__ProcessDefinition__ParamsAssignment_2_1");
					put(grammarAccess.getProcessDefinitionAccess().getParamsAssignment_2_2_1(), "rule__ProcessDefinition__ParamsAssignment_2_2_1");
					put(grammarAccess.getProcessDefinitionAccess().getProcAssignment_4(), "rule__ProcessDefinition__ProcAssignment_4");
					put(grammarAccess.getEnvironmentAccess().getAttrsAssignment_2_0(), "rule__Environment__AttrsAssignment_2_0");
					put(grammarAccess.getEnvironmentAccess().getValsAssignment_2_2(), "rule__Environment__ValsAssignment_2_2");
					put(grammarAccess.getEnvironmentAccess().getAttrsAssignment_2_3_1(), "rule__Environment__AttrsAssignment_2_3_1");
					put(grammarAccess.getEnvironmentAccess().getValsAssignment_2_3_3(), "rule__Environment__ValsAssignment_2_3_3");
					put(grammarAccess.getComponentDefinitionAccess().getEnvAssignment_1(), "rule__ComponentDefinition__EnvAssignment_1");
					put(grammarAccess.getComponentDefinitionAccess().getProcAssignment_2(), "rule__ComponentDefinition__ProcAssignment_2");
					put(grammarAccess.getComponentDefinitionAccess().getParamsAssignment_3_1(), "rule__ComponentDefinition__ParamsAssignment_3_1");
					put(grammarAccess.getComponentDefinitionAccess().getParamsAssignment_3_2_1(), "rule__ComponentDefinition__ParamsAssignment_3_2_1");
					put(grammarAccess.getComponentDefinitionAccess().getAddressAssignment_5(), "rule__ComponentDefinition__AddressAssignment_5");
					put(grammarAccess.getAttributeAccess().getCompAssignment_0_0(), "rule__Attribute__CompAssignment_0_0");
					put(grammarAccess.getAttributeAccess().getIdentAssignment_1(), "rule__Attribute__IdentAssignment_1");
					put(grammarAccess.getRecAttributeAccess().getIdentAssignment_2(), "rule__RecAttribute__IdentAssignment_2");
					put(grammarAccess.getAttributeValueAccess().getAttrAssignment_1(), "rule__AttributeValue__AttrAssignment_1");
					put(grammarAccess.getImmediateValueAccess().getImmAssignment_1(), "rule__ImmediateValue__ImmAssignment_1");
					put(grammarAccess.getGoStringFunctionAccess().getFuncnameAssignment_1(), "rule__GoStringFunction__FuncnameAssignment_1");
					put(grammarAccess.getGoStringFunctionAccess().getParamsAssignment_3_0(), "rule__GoStringFunction__ParamsAssignment_3_0");
					put(grammarAccess.getGoStringFunctionAccess().getParamsAssignment_3_1_1(), "rule__GoStringFunction__ParamsAssignment_3_1_1");
					put(grammarAccess.getPredicateAccess().getOrAssignment_1_2(), "rule__Predicate__OrAssignment_1_2");
					put(grammarAccess.getAndAccess().getAndAssignment_1_2(), "rule__And__AndAssignment_1_2");
					put(grammarAccess.getNotAccess().getNegAssignment_1_1(), "rule__Not__NegAssignment_1_1");
					put(grammarAccess.getNotAccess().getTermAssignment_1_2(), "rule__Not__TermAssignment_1_2");
					put(grammarAccess.getImmediateAccess().getIsTrueAssignment_1_0(), "rule__Immediate__IsTrueAssignment_1_0");
					put(grammarAccess.getEqualityTestAccess().getOp1Assignment_1(), "rule__EqualityTest__Op1Assignment_1");
					put(grammarAccess.getEqualityTestAccess().getOperandAssignment_2(), "rule__EqualityTest__OperandAssignment_2");
					put(grammarAccess.getEqualityTestAccess().getOp2Assignment_3(), "rule__EqualityTest__Op2Assignment_3");
					put(grammarAccess.getFuncParamAccess().getNameAssignment(), "rule__FuncParam__NameAssignment");
					put(grammarAccess.getFuncDefinitionAccess().getNameAssignment_1(), "rule__FuncDefinition__NameAssignment_1");
					put(grammarAccess.getFuncDefinitionAccess().getParamsAssignment_3_0(), "rule__FuncDefinition__ParamsAssignment_3_0");
					put(grammarAccess.getFuncDefinitionAccess().getParamsAssignment_3_1_1(), "rule__FuncDefinition__ParamsAssignment_3_1_1");
					put(grammarAccess.getFuncDefinitionAccess().getBlkAssignment_5(), "rule__FuncDefinition__BlkAssignment_5");
					put(grammarAccess.getFuncBlockAccess().getStatementsAssignment_2(), "rule__FuncBlock__StatementsAssignment_2");
					put(grammarAccess.getFuncVarDeclarationAccess().getNameAssignment_1(), "rule__FuncVarDeclaration__NameAssignment_1");
					put(grammarAccess.getFuncVarDeclarationAccess().getValAssignment_3(), "rule__FuncVarDeclaration__ValAssignment_3");
					put(grammarAccess.getFuncVarAssignAccess().getVarAssignment_0(), "rule__FuncVarAssign__VarAssignment_0");
					put(grammarAccess.getFuncVarAssignAccess().getValAssignment_2(), "rule__FuncVarAssign__ValAssignment_2");
					put(grammarAccess.getFuncValAccess().getImmAssignment_0_1(), "rule__FuncVal__ImmAssignment_0_1");
					put(grammarAccess.getFuncValAccess().getRefAssignment_1_1(), "rule__FuncVal__RefAssignment_1_1");
					put(grammarAccess.getFuncPredicateAccess().getOrAssignment_1_2(), "rule__FuncPredicate__OrAssignment_1_2");
					put(grammarAccess.getFuncAndAccess().getAndAssignment_1_2(), "rule__FuncAnd__AndAssignment_1_2");
					put(grammarAccess.getFuncNotAccess().getNegAssignment_1_1(), "rule__FuncNot__NegAssignment_1_1");
					put(grammarAccess.getFuncNotAccess().getTermAssignment_1_2(), "rule__FuncNot__TermAssignment_1_2");
					put(grammarAccess.getFuncImmediateAccess().getIsTrueAssignment_1_0(), "rule__FuncImmediate__IsTrueAssignment_1_0");
					put(grammarAccess.getFuncEqualityTestAccess().getOp1Assignment_1(), "rule__FuncEqualityTest__Op1Assignment_1");
					put(grammarAccess.getFuncEqualityTestAccess().getOperandAssignment_2(), "rule__FuncEqualityTest__OperandAssignment_2");
					put(grammarAccess.getFuncEqualityTestAccess().getOp2Assignment_3(), "rule__FuncEqualityTest__Op2Assignment_3");
					put(grammarAccess.getFuncIfElseAccess().getTestAssignment_2(), "rule__FuncIfElse__TestAssignment_2");
					put(grammarAccess.getFuncIfElseAccess().getThenAssignment_4(), "rule__FuncIfElse__ThenAssignment_4");
					put(grammarAccess.getFuncIfElseAccess().getTestAssignment_5_2(), "rule__FuncIfElse__TestAssignment_5_2");
					put(grammarAccess.getFuncIfElseAccess().getThenAssignment_5_4(), "rule__FuncIfElse__ThenAssignment_5_4");
					put(grammarAccess.getFuncIfElseAccess().getElseBranchAssignment_6_1(), "rule__FuncIfElse__ElseBranchAssignment_6_1");
					put(grammarAccess.getFuncReturnAccess().getValAssignment_1(), "rule__FuncReturn__ValAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public GoatComponentsGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(GoatComponentsGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
