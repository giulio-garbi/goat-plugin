/*
 * generated by Xtext 2.12.0
 */
parser grammar InternalGoatInfrastructureParser;

options {
	tokenVocab=InternalGoatInfrastructureLexer;
	superClass=AbstractInternalContentAssistParser;
}

@header {
package com.sysma.goat.eclipse_plugin.ide.contentassist.antlr.internal;
import java.util.Map;
import java.util.HashMap;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import com.sysma.goat.eclipse_plugin.services.GoatInfrastructureGrammarAccess;

}
@members {
	private GoatInfrastructureGrammarAccess grammarAccess;
	private final Map<String, String> tokenNameToValue = new HashMap<String, String>();
	
	{
		tokenNameToValue.put("Comma", "','");
		tokenNameToValue.put("Colon", "':'");
		tokenNameToValue.put("LeftCurlyBracket", "'{'");
		tokenNameToValue.put("RightCurlyBracket", "'}'");
		tokenNameToValue.put("External", "'external'");
		tokenNameToValue.put("SingleServer", "'singleServer'");
	}

	public void setGrammarAccess(GoatInfrastructureGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		String result = tokenNameToValue.get(tokenName);
		if (result == null)
			result = tokenName;
		return result;
	}
}

// Entry rule entryRuleInfrastructure
entryRuleInfrastructure
:
{ before(grammarAccess.getInfrastructureRule()); }
	 ruleInfrastructure
{ after(grammarAccess.getInfrastructureRule()); } 
	 EOF 
;

// Rule Infrastructure
ruleInfrastructure 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInfrastructureAccess().getSingleServerParserRuleCall()); }
		ruleSingleServer
		{ after(grammarAccess.getInfrastructureAccess().getSingleServerParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSingleServer
entryRuleSingleServer
:
{ before(grammarAccess.getSingleServerRule()); }
	 ruleSingleServer
{ after(grammarAccess.getSingleServerRule()); } 
	 EOF 
;

// Rule SingleServer
ruleSingleServer 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSingleServerAccess().getGroup()); }
		(rule__SingleServer__Group__0)
		{ after(grammarAccess.getSingleServerAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleParams
entryRuleParams
:
{ before(grammarAccess.getParamsRule()); }
	 ruleParams
{ after(grammarAccess.getParamsRule()); } 
	 EOF 
;

// Rule Params
ruleParams 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParamsAccess().getGroup()); }
		(rule__Params__Group__0)
		{ after(grammarAccess.getParamsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SingleServer__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SingleServer__Group__0__Impl
	rule__SingleServer__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SingleServer__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSingleServerAccess().getExternalAssignment_0()); }
	(rule__SingleServer__ExternalAssignment_0)?
	{ after(grammarAccess.getSingleServerAccess().getExternalAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SingleServer__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SingleServer__Group__1__Impl
	rule__SingleServer__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SingleServer__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSingleServerAccess().getSingleServerKeyword_1()); }
	SingleServer
	{ after(grammarAccess.getSingleServerAccess().getSingleServerKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SingleServer__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SingleServer__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SingleServer__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSingleServerAccess().getParamsAssignment_2()); }
	(rule__SingleServer__ParamsAssignment_2)
	{ after(grammarAccess.getSingleServerAccess().getParamsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Params__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Params__Group__0__Impl
	rule__Params__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Params__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParamsAccess().getLeftCurlyBracketKeyword_0()); }
	LeftCurlyBracket
	{ after(grammarAccess.getParamsAccess().getLeftCurlyBracketKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Params__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Params__Group__1__Impl
	rule__Params__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Params__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParamsAccess().getParamsAction_1()); }
	()
	{ after(grammarAccess.getParamsAccess().getParamsAction_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Params__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Params__Group__2__Impl
	rule__Params__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Params__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParamsAccess().getGroup_2()); }
	(rule__Params__Group_2__0)?
	{ after(grammarAccess.getParamsAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Params__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Params__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Params__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParamsAccess().getRightCurlyBracketKeyword_3()); }
	RightCurlyBracket
	{ after(grammarAccess.getParamsAccess().getRightCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Params__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Params__Group_2__0__Impl
	rule__Params__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Params__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParamsAccess().getGroup_2_0()); }
	(rule__Params__Group_2_0__0)*
	{ after(grammarAccess.getParamsAccess().getGroup_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Params__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Params__Group_2__1__Impl
	rule__Params__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Params__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParamsAccess().getKeysAssignment_2_1()); }
	(rule__Params__KeysAssignment_2_1)
	{ after(grammarAccess.getParamsAccess().getKeysAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Params__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Params__Group_2__2__Impl
	rule__Params__Group_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Params__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParamsAccess().getColonKeyword_2_2()); }
	Colon
	{ after(grammarAccess.getParamsAccess().getColonKeyword_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Params__Group_2__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Params__Group_2__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Params__Group_2__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParamsAccess().getValuesAssignment_2_3()); }
	(rule__Params__ValuesAssignment_2_3)
	{ after(grammarAccess.getParamsAccess().getValuesAssignment_2_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Params__Group_2_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Params__Group_2_0__0__Impl
	rule__Params__Group_2_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Params__Group_2_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParamsAccess().getKeysAssignment_2_0_0()); }
	(rule__Params__KeysAssignment_2_0_0)
	{ after(grammarAccess.getParamsAccess().getKeysAssignment_2_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Params__Group_2_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Params__Group_2_0__1__Impl
	rule__Params__Group_2_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Params__Group_2_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParamsAccess().getColonKeyword_2_0_1()); }
	Colon
	{ after(grammarAccess.getParamsAccess().getColonKeyword_2_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Params__Group_2_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Params__Group_2_0__2__Impl
	rule__Params__Group_2_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Params__Group_2_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParamsAccess().getValuesAssignment_2_0_2()); }
	(rule__Params__ValuesAssignment_2_0_2)
	{ after(grammarAccess.getParamsAccess().getValuesAssignment_2_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Params__Group_2_0__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Params__Group_2_0__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Params__Group_2_0__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParamsAccess().getCommaKeyword_2_0_3()); }
	Comma
	{ after(grammarAccess.getParamsAccess().getCommaKeyword_2_0_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SingleServer__ExternalAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSingleServerAccess().getExternalExternalKeyword_0_0()); }
		(
			{ before(grammarAccess.getSingleServerAccess().getExternalExternalKeyword_0_0()); }
			External
			{ after(grammarAccess.getSingleServerAccess().getExternalExternalKeyword_0_0()); }
		)
		{ after(grammarAccess.getSingleServerAccess().getExternalExternalKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SingleServer__ParamsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSingleServerAccess().getParamsParamsParserRuleCall_2_0()); }
		ruleParams
		{ after(grammarAccess.getSingleServerAccess().getParamsParamsParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Params__KeysAssignment_2_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParamsAccess().getKeysIDTerminalRuleCall_2_0_0_0()); }
		RULE_ID
		{ after(grammarAccess.getParamsAccess().getKeysIDTerminalRuleCall_2_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Params__ValuesAssignment_2_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParamsAccess().getValuesSTRINGTerminalRuleCall_2_0_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getParamsAccess().getValuesSTRINGTerminalRuleCall_2_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Params__KeysAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParamsAccess().getKeysIDTerminalRuleCall_2_1_0()); }
		RULE_ID
		{ after(grammarAccess.getParamsAccess().getKeysIDTerminalRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Params__ValuesAssignment_2_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParamsAccess().getValuesSTRINGTerminalRuleCall_2_3_0()); }
		RULE_STRING
		{ after(grammarAccess.getParamsAccess().getValuesSTRINGTerminalRuleCall_2_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}
