/*
 * generated by Xtext 2.12.0
 */
parser grammar InternalGoatInfrastructureParser;

options {
	tokenVocab=InternalGoatInfrastructureLexer;
	superClass=AbstractInternalContentAssistParser;
}

@header {
package com.sysma.goat.eclipse_plugin.ide.contentassist.antlr.internal;
import java.util.Map;
import java.util.HashMap;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import com.sysma.goat.eclipse_plugin.services.GoatInfrastructureGrammarAccess;

}
@members {
	private GoatInfrastructureGrammarAccess grammarAccess;
	private final Map<String, String> tokenNameToValue = new HashMap<String, String>();
	
	{
		tokenNameToValue.put("Comma", "','");
		tokenNameToValue.put("Colon", "':'");
		tokenNameToValue.put("LeftCurlyBracket", "'{'");
		tokenNameToValue.put("RightCurlyBracket", "'}'");
		tokenNameToValue.put("Ring", "'ring'");
		tokenNameToValue.put("Tree", "'tree'");
		tokenNameToValue.put("Cluster", "'cluster'");
		tokenNameToValue.put("Singleserver", "'singleserver'");
	}

	public void setGrammarAccess(GoatInfrastructureGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		String result = tokenNameToValue.get(tokenName);
		if (result == null)
			result = tokenName;
		return result;
	}
}

// Entry rule entryRuleInfrastructure
entryRuleInfrastructure
:
{ before(grammarAccess.getInfrastructureRule()); }
	 ruleInfrastructure
{ after(grammarAccess.getInfrastructureRule()); } 
	 EOF 
;

// Rule Infrastructure
ruleInfrastructure 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInfrastructureAccess().getSingleServerParserRuleCall()); }
		ruleSingleServer
		{ after(grammarAccess.getInfrastructureAccess().getSingleServerParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSingleServer
entryRuleSingleServer
:
{ before(grammarAccess.getSingleServerRule()); }
	 ruleSingleServer
{ after(grammarAccess.getSingleServerRule()); } 
	 EOF 
;

// Rule SingleServer
ruleSingleServer 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSingleServerAccess().getGroup()); }
		(rule__SingleServer__Group__0)
		{ after(grammarAccess.getSingleServerAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}


// Rule Params
ruleParams 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParamsAccess().getGroup()); }
		(rule__Params__Group__0)
		{ after(grammarAccess.getParamsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleParam
entryRuleParam
:
{ before(grammarAccess.getParamRule()); }
	 ruleParam
{ after(grammarAccess.getParamRule()); } 
	 EOF 
;

// Rule Param
ruleParam 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParamAccess().getGroup()); }
		(rule__Param__Group__0)
		{ after(grammarAccess.getParamAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SingleServer__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SingleServer__Group__0__Impl
	rule__SingleServer__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SingleServer__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSingleServerAccess().getSingleserverKeyword_0()); }
	Singleserver
	{ after(grammarAccess.getSingleServerAccess().getSingleserverKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SingleServer__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SingleServer__Group__1__Impl
	rule__SingleServer__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SingleServer__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSingleServerAccess().getNameAssignment_1()); }
	(rule__SingleServer__NameAssignment_1)
	{ after(grammarAccess.getSingleServerAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SingleServer__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SingleServer__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SingleServer__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSingleServerAccess().getParamsParserRuleCall_2()); }
	ruleParams
	{ after(grammarAccess.getSingleServerAccess().getParamsParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Params__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Params__Group__0__Impl
	rule__Params__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Params__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParamsAccess().getLeftCurlyBracketKeyword_0()); }
	LeftCurlyBracket
	{ after(grammarAccess.getParamsAccess().getLeftCurlyBracketKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Params__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Params__Group__1__Impl
	rule__Params__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Params__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParamsAccess().getGroup_1()); }
	(rule__Params__Group_1__0)?
	{ after(grammarAccess.getParamsAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Params__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Params__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Params__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParamsAccess().getRightCurlyBracketKeyword_2()); }
	RightCurlyBracket
	{ after(grammarAccess.getParamsAccess().getRightCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Params__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Params__Group_1__0__Impl
	rule__Params__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Params__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParamsAccess().getGroup_1_0()); }
	(rule__Params__Group_1_0__0)*
	{ after(grammarAccess.getParamsAccess().getGroup_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Params__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Params__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Params__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParamsAccess().getParamsAssignment_1_1()); }
	(rule__Params__ParamsAssignment_1_1)
	{ after(grammarAccess.getParamsAccess().getParamsAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Params__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Params__Group_1_0__0__Impl
	rule__Params__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Params__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParamsAccess().getParamsAssignment_1_0_0()); }
	(rule__Params__ParamsAssignment_1_0_0)
	{ after(grammarAccess.getParamsAccess().getParamsAssignment_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Params__Group_1_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Params__Group_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Params__Group_1_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParamsAccess().getCommaKeyword_1_0_1()); }
	Comma
	{ after(grammarAccess.getParamsAccess().getCommaKeyword_1_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Param__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Param__Group__0__Impl
	rule__Param__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Param__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParamAccess().getNameAssignment_0()); }
	(rule__Param__NameAssignment_0)
	{ after(grammarAccess.getParamAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Param__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Param__Group__1__Impl
	rule__Param__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Param__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParamAccess().getColonKeyword_1()); }
	Colon
	{ after(grammarAccess.getParamAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Param__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Param__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Param__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParamAccess().getValueAssignment_2()); }
	(rule__Param__ValueAssignment_2)
	{ after(grammarAccess.getParamAccess().getValueAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SingleServer__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSingleServerAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getSingleServerAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Params__ParamsAssignment_1_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParamsAccess().getParamsParamParserRuleCall_1_0_0_0()); }
		ruleParam
		{ after(grammarAccess.getParamsAccess().getParamsParamParserRuleCall_1_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Params__ParamsAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParamsAccess().getParamsParamParserRuleCall_1_1_0()); }
		ruleParam
		{ after(grammarAccess.getParamsAccess().getParamsParamParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Param__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParamAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getParamAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Param__ValueAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParamAccess().getValueSTRINGTerminalRuleCall_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getParamAccess().getValueSTRINGTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}
