/*
 * generated by Xtext 2.12.0
 */
parser grammar InternalGoatComponentsParser;

options {
	tokenVocab=InternalGoatComponentsLexer;
	superClass=AbstractInternalContentAssistParser;
}

@header {
package com.sysma.goat.eclipse_plugin.ide.contentassist.antlr.internal;
import java.util.Map;
import java.util.HashMap;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import com.sysma.goat.eclipse_plugin.services.GoatComponentsGrammarAccess;

}
@members {
	private GoatComponentsGrammarAccess grammarAccess;
	private final Map<String, String> tokenNameToValue = new HashMap<String, String>();
	
	{
		tokenNameToValue.put("ExclamationMark", "'!'");
		tokenNameToValue.put("LeftParenthesis", "'('");
		tokenNameToValue.put("RightParenthesis", "')'");
		tokenNameToValue.put("PlusSign", "'+'");
		tokenNameToValue.put("Comma", "','");
		tokenNameToValue.put("FullStop", "'.'");
		tokenNameToValue.put("DigitZero", "'0'");
		tokenNameToValue.put("LessThanSign", "'<'");
		tokenNameToValue.put("EqualsSign", "'='");
		tokenNameToValue.put("GreaterThanSign", "'>'");
		tokenNameToValue.put("CommercialAt", "'@'");
		tokenNameToValue.put("LeftSquareBracket", "'['");
		tokenNameToValue.put("RightSquareBracket", "']'");
		tokenNameToValue.put("LeftCurlyBracket", "'{'");
		tokenNameToValue.put("VerticalLine", "'|'");
		tokenNameToValue.put("RightCurlyBracket", "'}'");
		tokenNameToValue.put("ExclamationMarkEqualsSign", "'!='");
		tokenNameToValue.put("AmpersandAmpersand", "'&&'");
		tokenNameToValue.put("ColonEqualsSign", "':='");
		tokenNameToValue.put("LessThanSignEqualsSign", "'<='");
		tokenNameToValue.put("GreaterThanSignEqualsSign", "'>='");
		tokenNameToValue.put("At", "'at'");
		tokenNameToValue.put("If", "'if'");
		tokenNameToValue.put("VerticalLineVerticalLine", "'||'");
		tokenNameToValue.put("Var", "'var'");
		tokenNameToValue.put("Elif", "'elif'");
		tokenNameToValue.put("Else", "'else'");
		tokenNameToValue.put("Proc", "'proc'");
		tokenNameToValue.put("This", "'this'");
		tokenNameToValue.put("True", "'true'");
		tokenNameToValue.put("False", "'false'");
		tokenNameToValue.put("Sleep", "'sleep'");
		tokenNameToValue.put("Return", "'return'");
		tokenNameToValue.put("Function", "'function'");
		tokenNameToValue.put("Receiver", "'receiver'");
		tokenNameToValue.put("Component", "'component'");
	}

	public void setGrammarAccess(GoatComponentsGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		String result = tokenNameToValue.get(tokenName);
		if (result == null)
			result = tokenName;
		return result;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getAlternatives()); }
		(rule__Model__Alternatives)*
		{ after(grammarAccess.getModelAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleProc
entryRuleProc
:
{ before(grammarAccess.getProcRule()); }
	 ruleProc
{ after(grammarAccess.getProcRule()); } 
	 EOF 
;

// Rule Proc
ruleProc 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProcAccess().getAlternatives()); }
		(rule__Proc__Alternatives)
		{ after(grammarAccess.getProcAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInterleavingProcess
entryRuleInterleavingProcess
:
{ before(grammarAccess.getInterleavingProcessRule()); }
	 ruleInterleavingProcess
{ after(grammarAccess.getInterleavingProcessRule()); } 
	 EOF 
;

// Rule InterleavingProcess
ruleInterleavingProcess 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInterleavingProcessAccess().getGroup()); }
		(rule__InterleavingProcess__Group__0)
		{ after(grammarAccess.getInterleavingProcessAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNonDeterminismProcess
entryRuleNonDeterminismProcess
:
{ before(grammarAccess.getNonDeterminismProcessRule()); }
	 ruleNonDeterminismProcess
{ after(grammarAccess.getNonDeterminismProcessRule()); } 
	 EOF 
;

// Rule NonDeterminismProcess
ruleNonDeterminismProcess 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNonDeterminismProcessAccess().getAlternatives()); }
		(rule__NonDeterminismProcess__Alternatives)
		{ after(grammarAccess.getNonDeterminismProcessAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePreconditions
entryRulePreconditions
:
{ before(grammarAccess.getPreconditionsRule()); }
	 rulePreconditions
{ after(grammarAccess.getPreconditionsRule()); } 
	 EOF 
;

// Rule Preconditions
rulePreconditions 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPreconditionsAccess().getGroup()); }
		(rule__Preconditions__Group__0)
		{ after(grammarAccess.getPreconditionsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePredOutputProcessOrInputProcesses
entryRulePredOutputProcessOrInputProcesses
:
{ before(grammarAccess.getPredOutputProcessOrInputProcessesRule()); }
	 rulePredOutputProcessOrInputProcesses
{ after(grammarAccess.getPredOutputProcessOrInputProcessesRule()); } 
	 EOF 
;

// Rule PredOutputProcessOrInputProcesses
rulePredOutputProcessOrInputProcesses 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPredOutputProcessOrInputProcessesAccess().getGroup()); }
		(rule__PredOutputProcessOrInputProcesses__Group__0)
		{ after(grammarAccess.getPredOutputProcessOrInputProcessesAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePredOutputProcessOrInputProcess
entryRulePredOutputProcessOrInputProcess
:
{ before(grammarAccess.getPredOutputProcessOrInputProcessRule()); }
	 rulePredOutputProcessOrInputProcess
{ after(grammarAccess.getPredOutputProcessOrInputProcessRule()); } 
	 EOF 
;

// Rule PredOutputProcessOrInputProcess
rulePredOutputProcessOrInputProcess 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPredOutputProcessOrInputProcessAccess().getGroup()); }
		(rule__PredOutputProcessOrInputProcess__Group__0)
		{ after(grammarAccess.getPredOutputProcessOrInputProcessAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}


// Rule InputProcessesPart
ruleInputProcessesPart 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInputProcessesPartAccess().getGroup()); }
		(rule__InputProcessesPart__Group__0)
		{ after(grammarAccess.getInputProcessesPartAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInputProcess
entryRuleInputProcess
:
{ before(grammarAccess.getInputProcessRule()); }
	 ruleInputProcess
{ after(grammarAccess.getInputProcessRule()); } 
	 EOF 
;

// Rule InputProcess
ruleInputProcess 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInputProcessAccess().getGroup()); }
		(rule__InputProcess__Group__0)
		{ after(grammarAccess.getInputProcessAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}


// Rule OutputProcessPart
ruleOutputProcessPart 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOutputProcessPartAccess().getGroup()); }
		(rule__OutputProcessPart__Group__0)
		{ after(grammarAccess.getOutputProcessPartAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIfProcesses
entryRuleIfProcesses
:
{ before(grammarAccess.getIfProcessesRule()); }
	 ruleIfProcesses
{ after(grammarAccess.getIfProcessesRule()); } 
	 EOF 
;

// Rule IfProcesses
ruleIfProcesses 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIfProcessesAccess().getGroup()); }
		(rule__IfProcesses__Group__0)
		{ after(grammarAccess.getIfProcessesAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIfBranchProcess
entryRuleIfBranchProcess
:
{ before(grammarAccess.getIfBranchProcessRule()); }
	 ruleIfBranchProcess
{ after(grammarAccess.getIfBranchProcessRule()); } 
	 EOF 
;

// Rule IfBranchProcess
ruleIfBranchProcess 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIfBranchProcessAccess().getGroup()); }
		(rule__IfBranchProcess__Group__0)
		{ after(grammarAccess.getIfBranchProcessAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleUpdate
entryRuleUpdate
:
{ before(grammarAccess.getUpdateRule()); }
	 ruleUpdate
{ after(grammarAccess.getUpdateRule()); } 
	 EOF 
;

// Rule Update
ruleUpdate 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUpdateAccess().getGroup()); }
		(rule__Update__Group__0)
		{ after(grammarAccess.getUpdateAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAwareness
entryRuleAwareness
:
{ before(grammarAccess.getAwarenessRule()); }
	 ruleAwareness
{ after(grammarAccess.getAwarenessRule()); } 
	 EOF 
;

// Rule Awareness
ruleAwareness 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAwarenessAccess().getGroup()); }
		(rule__Awareness__Group__0)
		{ after(grammarAccess.getAwarenessAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNZCProcess
entryRuleNZCProcess
:
{ before(grammarAccess.getNZCProcessRule()); }
	 ruleNZCProcess
{ after(grammarAccess.getNZCProcessRule()); } 
	 EOF 
;

// Rule NZCProcess
ruleNZCProcess 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNZCProcessAccess().getAlternatives()); }
		(rule__NZCProcess__Alternatives)
		{ after(grammarAccess.getNZCProcessAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNProcess
entryRuleNProcess
:
{ before(grammarAccess.getNProcessRule()); }
	 ruleNProcess
{ after(grammarAccess.getNProcessRule()); } 
	 EOF 
;

// Rule NProcess
ruleNProcess 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNProcessAccess().getAlternatives()); }
		(rule__NProcess__Alternatives)
		{ after(grammarAccess.getNProcessAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCallProcess
entryRuleCallProcess
:
{ before(grammarAccess.getCallProcessRule()); }
	 ruleCallProcess
{ after(grammarAccess.getCallProcessRule()); } 
	 EOF 
;

// Rule CallProcess
ruleCallProcess 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCallProcessAccess().getGroup()); }
		(rule__CallProcess__Group__0)
		{ after(grammarAccess.getCallProcessAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleZeroProcess
entryRuleZeroProcess
:
{ before(grammarAccess.getZeroProcessRule()); }
	 ruleZeroProcess
{ after(grammarAccess.getZeroProcessRule()); } 
	 EOF 
;

// Rule ZeroProcess
ruleZeroProcess 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getZeroProcessAccess().getGroup()); }
		(rule__ZeroProcess__Group__0)
		{ after(grammarAccess.getZeroProcessAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleProcessDefinition
entryRuleProcessDefinition
:
{ before(grammarAccess.getProcessDefinitionRule()); }
	 ruleProcessDefinition
{ after(grammarAccess.getProcessDefinitionRule()); } 
	 EOF 
;

// Rule ProcessDefinition
ruleProcessDefinition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProcessDefinitionAccess().getGroup()); }
		(rule__ProcessDefinition__Group__0)
		{ after(grammarAccess.getProcessDefinitionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEnvironment
entryRuleEnvironment
:
{ before(grammarAccess.getEnvironmentRule()); }
	 ruleEnvironment
{ after(grammarAccess.getEnvironmentRule()); } 
	 EOF 
;

// Rule Environment
ruleEnvironment 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEnvironmentAccess().getGroup()); }
		(rule__Environment__Group__0)
		{ after(grammarAccess.getEnvironmentAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleComponentDefinition
entryRuleComponentDefinition
:
{ before(grammarAccess.getComponentDefinitionRule()); }
	 ruleComponentDefinition
{ after(grammarAccess.getComponentDefinitionRule()); } 
	 EOF 
;

// Rule ComponentDefinition
ruleComponentDefinition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getComponentDefinitionAccess().getGroup()); }
		(rule__ComponentDefinition__Group__0)
		{ after(grammarAccess.getComponentDefinitionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAttribute
entryRuleAttribute
:
{ before(grammarAccess.getAttributeRule()); }
	 ruleAttribute
{ after(grammarAccess.getAttributeRule()); } 
	 EOF 
;

// Rule Attribute
ruleAttribute 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAttributeAccess().getGroup()); }
		(rule__Attribute__Group__0)
		{ after(grammarAccess.getAttributeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRecAttribute
entryRuleRecAttribute
:
{ before(grammarAccess.getRecAttributeRule()); }
	 ruleRecAttribute
{ after(grammarAccess.getRecAttributeRule()); } 
	 EOF 
;

// Rule RecAttribute
ruleRecAttribute 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRecAttributeAccess().getGroup()); }
		(rule__RecAttribute__Group__0)
		{ after(grammarAccess.getRecAttributeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleValue
entryRuleValue
:
{ before(grammarAccess.getValueRule()); }
	 ruleValue
{ after(grammarAccess.getValueRule()); } 
	 EOF 
;

// Rule Value
ruleValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getValueAccess().getAlternatives()); }
		(rule__Value__Alternatives)
		{ after(grammarAccess.getValueAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAttributeValue
entryRuleAttributeValue
:
{ before(grammarAccess.getAttributeValueRule()); }
	 ruleAttributeValue
{ after(grammarAccess.getAttributeValueRule()); } 
	 EOF 
;

// Rule AttributeValue
ruleAttributeValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAttributeValueAccess().getGroup()); }
		(rule__AttributeValue__Group__0)
		{ after(grammarAccess.getAttributeValueAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleImmediateValue
entryRuleImmediateValue
:
{ before(grammarAccess.getImmediateValueRule()); }
	 ruleImmediateValue
{ after(grammarAccess.getImmediateValueRule()); } 
	 EOF 
;

// Rule ImmediateValue
ruleImmediateValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getImmediateValueAccess().getGroup()); }
		(rule__ImmediateValue__Group__0)
		{ after(grammarAccess.getImmediateValueAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGoStringFunction
entryRuleGoStringFunction
:
{ before(grammarAccess.getGoStringFunctionRule()); }
	 ruleGoStringFunction
{ after(grammarAccess.getGoStringFunctionRule()); } 
	 EOF 
;

// Rule GoStringFunction
ruleGoStringFunction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGoStringFunctionAccess().getGroup()); }
		(rule__GoStringFunction__Group__0)
		{ after(grammarAccess.getGoStringFunctionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePredicate
entryRulePredicate
:
{ before(grammarAccess.getPredicateRule()); }
	 rulePredicate
{ after(grammarAccess.getPredicateRule()); } 
	 EOF 
;

// Rule Predicate
rulePredicate 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPredicateAccess().getGroup()); }
		(rule__Predicate__Group__0)
		{ after(grammarAccess.getPredicateAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAnd
entryRuleAnd
:
{ before(grammarAccess.getAndRule()); }
	 ruleAnd
{ after(grammarAccess.getAndRule()); } 
	 EOF 
;

// Rule And
ruleAnd 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAndAccess().getGroup()); }
		(rule__And__Group__0)
		{ after(grammarAccess.getAndAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNot
entryRuleNot
:
{ before(grammarAccess.getNotRule()); }
	 ruleNot
{ after(grammarAccess.getNotRule()); } 
	 EOF 
;

// Rule Not
ruleNot 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNotAccess().getAlternatives()); }
		(rule__Not__Alternatives)
		{ after(grammarAccess.getNotAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTerm
entryRuleTerm
:
{ before(grammarAccess.getTermRule()); }
	 ruleTerm
{ after(grammarAccess.getTermRule()); } 
	 EOF 
;

// Rule Term
ruleTerm 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTermAccess().getAlternatives()); }
		(rule__Term__Alternatives)
		{ after(grammarAccess.getTermAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleImmediate
entryRuleImmediate
:
{ before(grammarAccess.getImmediateRule()); }
	 ruleImmediate
{ after(grammarAccess.getImmediateRule()); } 
	 EOF 
;

// Rule Immediate
ruleImmediate 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getImmediateAccess().getGroup()); }
		(rule__Immediate__Group__0)
		{ after(grammarAccess.getImmediateAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEqualityTest
entryRuleEqualityTest
:
{ before(grammarAccess.getEqualityTestRule()); }
	 ruleEqualityTest
{ after(grammarAccess.getEqualityTestRule()); } 
	 EOF 
;

// Rule EqualityTest
ruleEqualityTest 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEqualityTestAccess().getGroup()); }
		(rule__EqualityTest__Group__0)
		{ after(grammarAccess.getEqualityTestAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFuncParam
entryRuleFuncParam
:
{ before(grammarAccess.getFuncParamRule()); }
	 ruleFuncParam
{ after(grammarAccess.getFuncParamRule()); } 
	 EOF 
;

// Rule FuncParam
ruleFuncParam 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFuncParamAccess().getNameAssignment()); }
		(rule__FuncParam__NameAssignment)
		{ after(grammarAccess.getFuncParamAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFuncDefinition
entryRuleFuncDefinition
:
{ before(grammarAccess.getFuncDefinitionRule()); }
	 ruleFuncDefinition
{ after(grammarAccess.getFuncDefinitionRule()); } 
	 EOF 
;

// Rule FuncDefinition
ruleFuncDefinition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFuncDefinitionAccess().getGroup()); }
		(rule__FuncDefinition__Group__0)
		{ after(grammarAccess.getFuncDefinitionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFuncBlock
entryRuleFuncBlock
:
{ before(grammarAccess.getFuncBlockRule()); }
	 ruleFuncBlock
{ after(grammarAccess.getFuncBlockRule()); } 
	 EOF 
;

// Rule FuncBlock
ruleFuncBlock 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFuncBlockAccess().getGroup()); }
		(rule__FuncBlock__Group__0)
		{ after(grammarAccess.getFuncBlockAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFuncStatement
entryRuleFuncStatement
:
{ before(grammarAccess.getFuncStatementRule()); }
	 ruleFuncStatement
{ after(grammarAccess.getFuncStatementRule()); } 
	 EOF 
;

// Rule FuncStatement
ruleFuncStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFuncStatementAccess().getAlternatives()); }
		(rule__FuncStatement__Alternatives)
		{ after(grammarAccess.getFuncStatementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFuncVarDeclaration
entryRuleFuncVarDeclaration
:
{ before(grammarAccess.getFuncVarDeclarationRule()); }
	 ruleFuncVarDeclaration
{ after(grammarAccess.getFuncVarDeclarationRule()); } 
	 EOF 
;

// Rule FuncVarDeclaration
ruleFuncVarDeclaration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFuncVarDeclarationAccess().getGroup()); }
		(rule__FuncVarDeclaration__Group__0)
		{ after(grammarAccess.getFuncVarDeclarationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFuncVarAssign
entryRuleFuncVarAssign
:
{ before(grammarAccess.getFuncVarAssignRule()); }
	 ruleFuncVarAssign
{ after(grammarAccess.getFuncVarAssignRule()); } 
	 EOF 
;

// Rule FuncVarAssign
ruleFuncVarAssign 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFuncVarAssignAccess().getGroup()); }
		(rule__FuncVarAssign__Group__0)
		{ after(grammarAccess.getFuncVarAssignAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFuncVal
entryRuleFuncVal
:
{ before(grammarAccess.getFuncValRule()); }
	 ruleFuncVal
{ after(grammarAccess.getFuncValRule()); } 
	 EOF 
;

// Rule FuncVal
ruleFuncVal 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFuncValAccess().getAlternatives()); }
		(rule__FuncVal__Alternatives)
		{ after(grammarAccess.getFuncValAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFuncPredicate
entryRuleFuncPredicate
:
{ before(grammarAccess.getFuncPredicateRule()); }
	 ruleFuncPredicate
{ after(grammarAccess.getFuncPredicateRule()); } 
	 EOF 
;

// Rule FuncPredicate
ruleFuncPredicate 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFuncPredicateAccess().getGroup()); }
		(rule__FuncPredicate__Group__0)
		{ after(grammarAccess.getFuncPredicateAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFuncAnd
entryRuleFuncAnd
:
{ before(grammarAccess.getFuncAndRule()); }
	 ruleFuncAnd
{ after(grammarAccess.getFuncAndRule()); } 
	 EOF 
;

// Rule FuncAnd
ruleFuncAnd 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFuncAndAccess().getGroup()); }
		(rule__FuncAnd__Group__0)
		{ after(grammarAccess.getFuncAndAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFuncNot
entryRuleFuncNot
:
{ before(grammarAccess.getFuncNotRule()); }
	 ruleFuncNot
{ after(grammarAccess.getFuncNotRule()); } 
	 EOF 
;

// Rule FuncNot
ruleFuncNot 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFuncNotAccess().getAlternatives()); }
		(rule__FuncNot__Alternatives)
		{ after(grammarAccess.getFuncNotAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFuncTerm
entryRuleFuncTerm
:
{ before(grammarAccess.getFuncTermRule()); }
	 ruleFuncTerm
{ after(grammarAccess.getFuncTermRule()); } 
	 EOF 
;

// Rule FuncTerm
ruleFuncTerm 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFuncTermAccess().getAlternatives()); }
		(rule__FuncTerm__Alternatives)
		{ after(grammarAccess.getFuncTermAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFuncImmediate
entryRuleFuncImmediate
:
{ before(grammarAccess.getFuncImmediateRule()); }
	 ruleFuncImmediate
{ after(grammarAccess.getFuncImmediateRule()); } 
	 EOF 
;

// Rule FuncImmediate
ruleFuncImmediate 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFuncImmediateAccess().getGroup()); }
		(rule__FuncImmediate__Group__0)
		{ after(grammarAccess.getFuncImmediateAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFuncEqualityTest
entryRuleFuncEqualityTest
:
{ before(grammarAccess.getFuncEqualityTestRule()); }
	 ruleFuncEqualityTest
{ after(grammarAccess.getFuncEqualityTestRule()); } 
	 EOF 
;

// Rule FuncEqualityTest
ruleFuncEqualityTest 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFuncEqualityTestAccess().getGroup()); }
		(rule__FuncEqualityTest__Group__0)
		{ after(grammarAccess.getFuncEqualityTestAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFuncIfElse
entryRuleFuncIfElse
:
{ before(grammarAccess.getFuncIfElseRule()); }
	 ruleFuncIfElse
{ after(grammarAccess.getFuncIfElseRule()); } 
	 EOF 
;

// Rule FuncIfElse
ruleFuncIfElse 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFuncIfElseAccess().getGroup()); }
		(rule__FuncIfElse__Group__0)
		{ after(grammarAccess.getFuncIfElseAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFuncReturn
entryRuleFuncReturn
:
{ before(grammarAccess.getFuncReturnRule()); }
	 ruleFuncReturn
{ after(grammarAccess.getFuncReturnRule()); } 
	 EOF 
;

// Rule FuncReturn
ruleFuncReturn 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFuncReturnAccess().getGroup()); }
		(rule__FuncReturn__Group__0)
		{ after(grammarAccess.getFuncReturnAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getProcessesAssignment_0()); }
		(rule__Model__ProcessesAssignment_0)
		{ after(grammarAccess.getModelAccess().getProcessesAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getModelAccess().getComponentsAssignment_1()); }
		(rule__Model__ComponentsAssignment_1)
		{ after(grammarAccess.getModelAccess().getComponentsAssignment_1()); }
	)
	|
	(
		{ before(grammarAccess.getModelAccess().getFunctionsAssignment_2()); }
		(rule__Model__FunctionsAssignment_2)
		{ after(grammarAccess.getModelAccess().getFunctionsAssignment_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Proc__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProcAccess().getInterleavingProcessParserRuleCall_0()); }
		ruleInterleavingProcess
		{ after(grammarAccess.getProcAccess().getInterleavingProcessParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getProcAccess().getNonDeterminismProcessParserRuleCall_1()); }
		ruleNonDeterminismProcess
		{ after(grammarAccess.getProcAccess().getNonDeterminismProcessParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NonDeterminismProcess__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNonDeterminismProcessAccess().getPredOutputProcessOrInputProcessesParserRuleCall_0()); }
		rulePredOutputProcessOrInputProcesses
		{ after(grammarAccess.getNonDeterminismProcessAccess().getPredOutputProcessOrInputProcessesParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getNonDeterminismProcessAccess().getIfProcessesParserRuleCall_1()); }
		ruleIfProcesses
		{ after(grammarAccess.getNonDeterminismProcessAccess().getIfProcessesParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getNonDeterminismProcessAccess().getNProcessParserRuleCall_2()); }
		ruleNProcess
		{ after(grammarAccess.getNonDeterminismProcessAccess().getNProcessParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Preconditions__PrecondAlternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPreconditionsAccess().getPrecondUpdateParserRuleCall_1_0_0()); }
		ruleUpdate
		{ after(grammarAccess.getPreconditionsAccess().getPrecondUpdateParserRuleCall_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getPreconditionsAccess().getPrecondAwarenessParserRuleCall_1_0_1()); }
		ruleAwareness
		{ after(grammarAccess.getPreconditionsAccess().getPrecondAwarenessParserRuleCall_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredOutputProcessOrInputProcesses__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPredOutputProcessOrInputProcessesAccess().getGroup_1_0()); }
		(rule__PredOutputProcessOrInputProcesses__Group_1_0__0)
		{ after(grammarAccess.getPredOutputProcessOrInputProcessesAccess().getGroup_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getPredOutputProcessOrInputProcessesAccess().getGroup_1_1()); }
		(rule__PredOutputProcessOrInputProcesses__Group_1_1__0)
		{ after(grammarAccess.getPredOutputProcessOrInputProcessesAccess().getGroup_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredOutputProcessOrInputProcess__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPredOutputProcessOrInputProcessAccess().getGroup_1_0()); }
		(rule__PredOutputProcessOrInputProcess__Group_1_0__0)
		{ after(grammarAccess.getPredOutputProcessOrInputProcessAccess().getGroup_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getPredOutputProcessOrInputProcessAccess().getGroup_1_1()); }
		(rule__PredOutputProcessOrInputProcess__Group_1_1__0)
		{ after(grammarAccess.getPredOutputProcessOrInputProcessAccess().getGroup_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NZCProcess__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNZCProcessAccess().getGroup_0()); }
		(rule__NZCProcess__Group_0__0)
		{ after(grammarAccess.getNZCProcessAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getNZCProcessAccess().getZeroProcessParserRuleCall_1()); }
		ruleZeroProcess
		{ after(grammarAccess.getNZCProcessAccess().getZeroProcessParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getNZCProcessAccess().getCallProcessParserRuleCall_2()); }
		ruleCallProcess
		{ after(grammarAccess.getNZCProcessAccess().getCallProcessParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NProcess__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNProcessAccess().getGroup_0()); }
		(rule__NProcess__Group_0__0)
		{ after(grammarAccess.getNProcessAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getNProcessAccess().getZeroProcessParserRuleCall_1()); }
		ruleZeroProcess
		{ after(grammarAccess.getNProcessAccess().getZeroProcessParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Value__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getValueAccess().getAttributeValueParserRuleCall_0()); }
		ruleAttributeValue
		{ after(grammarAccess.getValueAccess().getAttributeValueParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getValueAccess().getImmediateValueParserRuleCall_1()); }
		ruleImmediateValue
		{ after(grammarAccess.getValueAccess().getImmediateValueParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getValueAccess().getGoStringFunctionParserRuleCall_2()); }
		ruleGoStringFunction
		{ after(grammarAccess.getValueAccess().getGoStringFunctionParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Not__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNotAccess().getTermParserRuleCall_0()); }
		ruleTerm
		{ after(grammarAccess.getNotAccess().getTermParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getNotAccess().getGroup_1()); }
		(rule__Not__Group_1__0)
		{ after(grammarAccess.getNotAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTermAccess().getImmediateParserRuleCall_0()); }
		ruleImmediate
		{ after(grammarAccess.getTermAccess().getImmediateParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getTermAccess().getEqualityTestParserRuleCall_1()); }
		ruleEqualityTest
		{ after(grammarAccess.getTermAccess().getEqualityTestParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getTermAccess().getGroup_2()); }
		(rule__Term__Group_2__0)
		{ after(grammarAccess.getTermAccess().getGroup_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Immediate__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getImmediateAccess().getIsTrueAssignment_1_0()); }
		(rule__Immediate__IsTrueAssignment_1_0)
		{ after(grammarAccess.getImmediateAccess().getIsTrueAssignment_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getImmediateAccess().getFalseKeyword_1_1()); }
		False
		{ after(grammarAccess.getImmediateAccess().getFalseKeyword_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityTest__Op1Alternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEqualityTestAccess().getOp1ValueParserRuleCall_1_0_0()); }
		ruleValue
		{ after(grammarAccess.getEqualityTestAccess().getOp1ValueParserRuleCall_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getEqualityTestAccess().getOp1RecAttributeParserRuleCall_1_0_1()); }
		ruleRecAttribute
		{ after(grammarAccess.getEqualityTestAccess().getOp1RecAttributeParserRuleCall_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityTest__OperandAlternatives_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEqualityTestAccess().getOperandLessThanSignKeyword_2_0_0()); }
		LessThanSign
		{ after(grammarAccess.getEqualityTestAccess().getOperandLessThanSignKeyword_2_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getEqualityTestAccess().getOperandGreaterThanSignKeyword_2_0_1()); }
		GreaterThanSign
		{ after(grammarAccess.getEqualityTestAccess().getOperandGreaterThanSignKeyword_2_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getEqualityTestAccess().getOperandLessThanSignEqualsSignKeyword_2_0_2()); }
		LessThanSignEqualsSign
		{ after(grammarAccess.getEqualityTestAccess().getOperandLessThanSignEqualsSignKeyword_2_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getEqualityTestAccess().getOperandGreaterThanSignEqualsSignKeyword_2_0_3()); }
		GreaterThanSignEqualsSign
		{ after(grammarAccess.getEqualityTestAccess().getOperandGreaterThanSignEqualsSignKeyword_2_0_3()); }
	)
	|
	(
		{ before(grammarAccess.getEqualityTestAccess().getOperandEqualsSignKeyword_2_0_4()); }
		EqualsSign
		{ after(grammarAccess.getEqualityTestAccess().getOperandEqualsSignKeyword_2_0_4()); }
	)
	|
	(
		{ before(grammarAccess.getEqualityTestAccess().getOperandExclamationMarkEqualsSignKeyword_2_0_5()); }
		ExclamationMarkEqualsSign
		{ after(grammarAccess.getEqualityTestAccess().getOperandExclamationMarkEqualsSignKeyword_2_0_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncStatement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFuncStatementAccess().getFuncVarAssignParserRuleCall_0()); }
		ruleFuncVarAssign
		{ after(grammarAccess.getFuncStatementAccess().getFuncVarAssignParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getFuncStatementAccess().getFuncIfElseParserRuleCall_1()); }
		ruleFuncIfElse
		{ after(grammarAccess.getFuncStatementAccess().getFuncIfElseParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getFuncStatementAccess().getFuncReturnParserRuleCall_2()); }
		ruleFuncReturn
		{ after(grammarAccess.getFuncStatementAccess().getFuncReturnParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getFuncStatementAccess().getFuncVarDeclarationParserRuleCall_3()); }
		ruleFuncVarDeclaration
		{ after(grammarAccess.getFuncStatementAccess().getFuncVarDeclarationParserRuleCall_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncVal__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFuncValAccess().getGroup_0()); }
		(rule__FuncVal__Group_0__0)
		{ after(grammarAccess.getFuncValAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getFuncValAccess().getGroup_1()); }
		(rule__FuncVal__Group_1__0)
		{ after(grammarAccess.getFuncValAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncNot__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFuncNotAccess().getFuncTermParserRuleCall_0()); }
		ruleFuncTerm
		{ after(grammarAccess.getFuncNotAccess().getFuncTermParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getFuncNotAccess().getGroup_1()); }
		(rule__FuncNot__Group_1__0)
		{ after(grammarAccess.getFuncNotAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncTerm__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFuncTermAccess().getFuncImmediateParserRuleCall_0()); }
		ruleFuncImmediate
		{ after(grammarAccess.getFuncTermAccess().getFuncImmediateParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getFuncTermAccess().getFuncEqualityTestParserRuleCall_1()); }
		ruleFuncEqualityTest
		{ after(grammarAccess.getFuncTermAccess().getFuncEqualityTestParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getFuncTermAccess().getGroup_2()); }
		(rule__FuncTerm__Group_2__0)
		{ after(grammarAccess.getFuncTermAccess().getGroup_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncImmediate__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFuncImmediateAccess().getIsTrueAssignment_1_0()); }
		(rule__FuncImmediate__IsTrueAssignment_1_0)
		{ after(grammarAccess.getFuncImmediateAccess().getIsTrueAssignment_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getFuncImmediateAccess().getFalseKeyword_1_1()); }
		False
		{ after(grammarAccess.getFuncImmediateAccess().getFalseKeyword_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncEqualityTest__OperandAlternatives_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFuncEqualityTestAccess().getOperandLessThanSignKeyword_2_0_0()); }
		LessThanSign
		{ after(grammarAccess.getFuncEqualityTestAccess().getOperandLessThanSignKeyword_2_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getFuncEqualityTestAccess().getOperandGreaterThanSignKeyword_2_0_1()); }
		GreaterThanSign
		{ after(grammarAccess.getFuncEqualityTestAccess().getOperandGreaterThanSignKeyword_2_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getFuncEqualityTestAccess().getOperandLessThanSignEqualsSignKeyword_2_0_2()); }
		LessThanSignEqualsSign
		{ after(grammarAccess.getFuncEqualityTestAccess().getOperandLessThanSignEqualsSignKeyword_2_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getFuncEqualityTestAccess().getOperandGreaterThanSignEqualsSignKeyword_2_0_3()); }
		GreaterThanSignEqualsSign
		{ after(grammarAccess.getFuncEqualityTestAccess().getOperandGreaterThanSignEqualsSignKeyword_2_0_3()); }
	)
	|
	(
		{ before(grammarAccess.getFuncEqualityTestAccess().getOperandEqualsSignKeyword_2_0_4()); }
		EqualsSign
		{ after(grammarAccess.getFuncEqualityTestAccess().getOperandEqualsSignKeyword_2_0_4()); }
	)
	|
	(
		{ before(grammarAccess.getFuncEqualityTestAccess().getOperandExclamationMarkEqualsSignKeyword_2_0_5()); }
		ExclamationMarkEqualsSign
		{ after(grammarAccess.getFuncEqualityTestAccess().getOperandExclamationMarkEqualsSignKeyword_2_0_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__InterleavingProcess__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InterleavingProcess__Group__0__Impl
	rule__InterleavingProcess__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InterleavingProcess__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInterleavingProcessAccess().getCallProcessParserRuleCall_0()); }
	ruleCallProcess
	{ after(grammarAccess.getInterleavingProcessAccess().getCallProcessParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InterleavingProcess__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InterleavingProcess__Group__1__Impl
	rule__InterleavingProcess__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__InterleavingProcess__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInterleavingProcessAccess().getInterleavingProcessSubProcsAction_1()); }
	()
	{ after(grammarAccess.getInterleavingProcessAccess().getInterleavingProcessSubProcsAction_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InterleavingProcess__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InterleavingProcess__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InterleavingProcess__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInterleavingProcessAccess().getGroup_2()); }
	(rule__InterleavingProcess__Group_2__0)*
	{ after(grammarAccess.getInterleavingProcessAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__InterleavingProcess__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InterleavingProcess__Group_2__0__Impl
	rule__InterleavingProcess__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InterleavingProcess__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInterleavingProcessAccess().getVerticalLineKeyword_2_0()); }
	VerticalLine
	{ after(grammarAccess.getInterleavingProcessAccess().getVerticalLineKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InterleavingProcess__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InterleavingProcess__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InterleavingProcess__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInterleavingProcessAccess().getSubProcsAssignment_2_1()); }
	(rule__InterleavingProcess__SubProcsAssignment_2_1)
	{ after(grammarAccess.getInterleavingProcessAccess().getSubProcsAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Preconditions__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Preconditions__Group__0__Impl
	rule__Preconditions__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Preconditions__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPreconditionsAccess().getPreconditionsAction_0()); }
	()
	{ after(grammarAccess.getPreconditionsAccess().getPreconditionsAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Preconditions__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Preconditions__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Preconditions__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPreconditionsAccess().getPrecondAssignment_1()); }
	(rule__Preconditions__PrecondAssignment_1)*
	{ after(grammarAccess.getPreconditionsAccess().getPrecondAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PredOutputProcessOrInputProcesses__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredOutputProcessOrInputProcesses__Group__0__Impl
	rule__PredOutputProcessOrInputProcesses__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PredOutputProcessOrInputProcesses__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredOutputProcessOrInputProcessesAccess().getPreconditionsParserRuleCall_0()); }
	rulePreconditions
	{ after(grammarAccess.getPredOutputProcessOrInputProcessesAccess().getPreconditionsParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredOutputProcessOrInputProcesses__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredOutputProcessOrInputProcesses__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PredOutputProcessOrInputProcesses__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredOutputProcessOrInputProcessesAccess().getAlternatives_1()); }
	(rule__PredOutputProcessOrInputProcesses__Alternatives_1)
	{ after(grammarAccess.getPredOutputProcessOrInputProcessesAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PredOutputProcessOrInputProcesses__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredOutputProcessOrInputProcesses__Group_1_0__0__Impl
	rule__PredOutputProcessOrInputProcesses__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PredOutputProcessOrInputProcesses__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredOutputProcessOrInputProcessesAccess().getOutputProcessPrecondAction_1_0_0()); }
	()
	{ after(grammarAccess.getPredOutputProcessOrInputProcessesAccess().getOutputProcessPrecondAction_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredOutputProcessOrInputProcesses__Group_1_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredOutputProcessOrInputProcesses__Group_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PredOutputProcessOrInputProcesses__Group_1_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredOutputProcessOrInputProcessesAccess().getOutputProcessPartParserRuleCall_1_0_1()); }
	ruleOutputProcessPart
	{ after(grammarAccess.getPredOutputProcessOrInputProcessesAccess().getOutputProcessPartParserRuleCall_1_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PredOutputProcessOrInputProcesses__Group_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredOutputProcessOrInputProcesses__Group_1_1__0__Impl
	rule__PredOutputProcessOrInputProcesses__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PredOutputProcessOrInputProcesses__Group_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredOutputProcessOrInputProcessesAccess().getInputProcessesPrecondsAction_1_1_0()); }
	()
	{ after(grammarAccess.getPredOutputProcessOrInputProcessesAccess().getInputProcessesPrecondsAction_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredOutputProcessOrInputProcesses__Group_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredOutputProcessOrInputProcesses__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PredOutputProcessOrInputProcesses__Group_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredOutputProcessOrInputProcessesAccess().getInputProcessesPartParserRuleCall_1_1_1()); }
	ruleInputProcessesPart
	{ after(grammarAccess.getPredOutputProcessOrInputProcessesAccess().getInputProcessesPartParserRuleCall_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PredOutputProcessOrInputProcess__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredOutputProcessOrInputProcess__Group__0__Impl
	rule__PredOutputProcessOrInputProcess__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PredOutputProcessOrInputProcess__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredOutputProcessOrInputProcessAccess().getPreconditionsParserRuleCall_0()); }
	rulePreconditions
	{ after(grammarAccess.getPredOutputProcessOrInputProcessAccess().getPreconditionsParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredOutputProcessOrInputProcess__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredOutputProcessOrInputProcess__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PredOutputProcessOrInputProcess__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredOutputProcessOrInputProcessAccess().getAlternatives_1()); }
	(rule__PredOutputProcessOrInputProcess__Alternatives_1)
	{ after(grammarAccess.getPredOutputProcessOrInputProcessAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PredOutputProcessOrInputProcess__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredOutputProcessOrInputProcess__Group_1_0__0__Impl
	rule__PredOutputProcessOrInputProcess__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PredOutputProcessOrInputProcess__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredOutputProcessOrInputProcessAccess().getOutputProcessPrecondAction_1_0_0()); }
	()
	{ after(grammarAccess.getPredOutputProcessOrInputProcessAccess().getOutputProcessPrecondAction_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredOutputProcessOrInputProcess__Group_1_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredOutputProcessOrInputProcess__Group_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PredOutputProcessOrInputProcess__Group_1_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredOutputProcessOrInputProcessAccess().getOutputProcessPartParserRuleCall_1_0_1()); }
	ruleOutputProcessPart
	{ after(grammarAccess.getPredOutputProcessOrInputProcessAccess().getOutputProcessPartParserRuleCall_1_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PredOutputProcessOrInputProcess__Group_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredOutputProcessOrInputProcess__Group_1_1__0__Impl
	rule__PredOutputProcessOrInputProcess__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PredOutputProcessOrInputProcess__Group_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredOutputProcessOrInputProcessAccess().getInputProcessesPrecondsAction_1_1_0()); }
	()
	{ after(grammarAccess.getPredOutputProcessOrInputProcessAccess().getInputProcessesPrecondsAction_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredOutputProcessOrInputProcess__Group_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredOutputProcessOrInputProcess__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PredOutputProcessOrInputProcess__Group_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredOutputProcessOrInputProcessAccess().getInputsAssignment_1_1_1()); }
	(rule__PredOutputProcessOrInputProcess__InputsAssignment_1_1_1)
	{ after(grammarAccess.getPredOutputProcessOrInputProcessAccess().getInputsAssignment_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__InputProcessesPart__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InputProcessesPart__Group__0__Impl
	rule__InputProcessesPart__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InputProcessesPart__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInputProcessesPartAccess().getInputsAssignment_0()); }
	(rule__InputProcessesPart__InputsAssignment_0)
	{ after(grammarAccess.getInputProcessesPartAccess().getInputsAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InputProcessesPart__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InputProcessesPart__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InputProcessesPart__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInputProcessesPartAccess().getGroup_1()); }
	(rule__InputProcessesPart__Group_1__0)*
	{ after(grammarAccess.getInputProcessesPartAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__InputProcessesPart__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InputProcessesPart__Group_1__0__Impl
	rule__InputProcessesPart__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InputProcessesPart__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInputProcessesPartAccess().getPlusSignKeyword_1_0()); }
	PlusSign
	{ after(grammarAccess.getInputProcessesPartAccess().getPlusSignKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InputProcessesPart__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InputProcessesPart__Group_1__1__Impl
	rule__InputProcessesPart__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__InputProcessesPart__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInputProcessesPartAccess().getPrecondsAssignment_1_1()); }
	(rule__InputProcessesPart__PrecondsAssignment_1_1)
	{ after(grammarAccess.getInputProcessesPartAccess().getPrecondsAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InputProcessesPart__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InputProcessesPart__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InputProcessesPart__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInputProcessesPartAccess().getInputsAssignment_1_2()); }
	(rule__InputProcessesPart__InputsAssignment_1_2)
	{ after(grammarAccess.getInputProcessesPartAccess().getInputsAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__InputProcess__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InputProcess__Group__0__Impl
	rule__InputProcess__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InputProcess__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInputProcessAccess().getInputProcessAction_0()); }
	()
	{ after(grammarAccess.getInputProcessAccess().getInputProcessAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InputProcess__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InputProcess__Group__1__Impl
	rule__InputProcess__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__InputProcess__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInputProcessAccess().getLeftCurlyBracketKeyword_1()); }
	LeftCurlyBracket
	{ after(grammarAccess.getInputProcessAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InputProcess__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InputProcess__Group__2__Impl
	rule__InputProcess__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__InputProcess__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInputProcessAccess().getRec_predAssignment_2()); }
	(rule__InputProcess__Rec_predAssignment_2)
	{ after(grammarAccess.getInputProcessAccess().getRec_predAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InputProcess__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InputProcess__Group__3__Impl
	rule__InputProcess__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__InputProcess__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInputProcessAccess().getRightCurlyBracketKeyword_3()); }
	RightCurlyBracket
	{ after(grammarAccess.getInputProcessAccess().getRightCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InputProcess__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InputProcess__Group__4__Impl
	rule__InputProcess__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__InputProcess__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInputProcessAccess().getLeftParenthesisKeyword_4()); }
	LeftParenthesis
	{ after(grammarAccess.getInputProcessAccess().getLeftParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InputProcess__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InputProcess__Group__5__Impl
	rule__InputProcess__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__InputProcess__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInputProcessAccess().getGroup_5()); }
	(rule__InputProcess__Group_5__0)?
	{ after(grammarAccess.getInputProcessAccess().getGroup_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InputProcess__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InputProcess__Group__6__Impl
	rule__InputProcess__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__InputProcess__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInputProcessAccess().getRightParenthesisKeyword_6()); }
	RightParenthesis
	{ after(grammarAccess.getInputProcessAccess().getRightParenthesisKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InputProcess__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InputProcess__Group__7__Impl
	rule__InputProcess__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__InputProcess__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInputProcessAccess().getOutputAssignment_7()); }
	(rule__InputProcess__OutputAssignment_7)?
	{ after(grammarAccess.getInputProcessAccess().getOutputAssignment_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InputProcess__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InputProcess__Group__8__Impl
	rule__InputProcess__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__InputProcess__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInputProcessAccess().getFullStopKeyword_8()); }
	FullStop
	{ after(grammarAccess.getInputProcessAccess().getFullStopKeyword_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InputProcess__Group__9
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InputProcess__Group__9__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InputProcess__Group__9__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInputProcessAccess().getNextAssignment_9()); }
	(rule__InputProcess__NextAssignment_9)
	{ after(grammarAccess.getInputProcessAccess().getNextAssignment_9()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__InputProcess__Group_5__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InputProcess__Group_5__0__Impl
	rule__InputProcess__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InputProcess__Group_5__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInputProcessAccess().getMsgInPartsAssignment_5_0()); }
	(rule__InputProcess__MsgInPartsAssignment_5_0)
	{ after(grammarAccess.getInputProcessAccess().getMsgInPartsAssignment_5_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InputProcess__Group_5__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InputProcess__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InputProcess__Group_5__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInputProcessAccess().getGroup_5_1()); }
	(rule__InputProcess__Group_5_1__0)*
	{ after(grammarAccess.getInputProcessAccess().getGroup_5_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__InputProcess__Group_5_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InputProcess__Group_5_1__0__Impl
	rule__InputProcess__Group_5_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InputProcess__Group_5_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInputProcessAccess().getCommaKeyword_5_1_0()); }
	Comma
	{ after(grammarAccess.getInputProcessAccess().getCommaKeyword_5_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InputProcess__Group_5_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InputProcess__Group_5_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InputProcess__Group_5_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInputProcessAccess().getMsgInPartsAssignment_5_1_1()); }
	(rule__InputProcess__MsgInPartsAssignment_5_1_1)
	{ after(grammarAccess.getInputProcessAccess().getMsgInPartsAssignment_5_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OutputProcessPart__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OutputProcessPart__Group__0__Impl
	rule__OutputProcessPart__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputProcessPart__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutputProcessPartAccess().getLeftParenthesisKeyword_0()); }
	LeftParenthesis
	{ after(grammarAccess.getOutputProcessPartAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputProcessPart__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OutputProcessPart__Group__1__Impl
	rule__OutputProcessPart__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputProcessPart__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutputProcessPartAccess().getGroup_1()); }
	(rule__OutputProcessPart__Group_1__0)?
	{ after(grammarAccess.getOutputProcessPartAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputProcessPart__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OutputProcessPart__Group__2__Impl
	rule__OutputProcessPart__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputProcessPart__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutputProcessPartAccess().getRightParenthesisKeyword_2()); }
	RightParenthesis
	{ after(grammarAccess.getOutputProcessPartAccess().getRightParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputProcessPart__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OutputProcessPart__Group__3__Impl
	rule__OutputProcessPart__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputProcessPart__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutputProcessPartAccess().getCommercialAtKeyword_3()); }
	CommercialAt
	{ after(grammarAccess.getOutputProcessPartAccess().getCommercialAtKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputProcessPart__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OutputProcessPart__Group__4__Impl
	rule__OutputProcessPart__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputProcessPart__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutputProcessPartAccess().getSend_predAssignment_4()); }
	(rule__OutputProcessPart__Send_predAssignment_4)
	{ after(grammarAccess.getOutputProcessPartAccess().getSend_predAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputProcessPart__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OutputProcessPart__Group__5__Impl
	rule__OutputProcessPart__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputProcessPart__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutputProcessPartAccess().getOutputAssignment_5()); }
	(rule__OutputProcessPart__OutputAssignment_5)?
	{ after(grammarAccess.getOutputProcessPartAccess().getOutputAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputProcessPart__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OutputProcessPart__Group__6__Impl
	rule__OutputProcessPart__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputProcessPart__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutputProcessPartAccess().getGroup_6()); }
	(rule__OutputProcessPart__Group_6__0)?
	{ after(grammarAccess.getOutputProcessPartAccess().getGroup_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputProcessPart__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OutputProcessPart__Group__7__Impl
	rule__OutputProcessPart__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputProcessPart__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutputProcessPartAccess().getFullStopKeyword_7()); }
	FullStop
	{ after(grammarAccess.getOutputProcessPartAccess().getFullStopKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputProcessPart__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OutputProcessPart__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputProcessPart__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutputProcessPartAccess().getNextAssignment_8()); }
	(rule__OutputProcessPart__NextAssignment_8)
	{ after(grammarAccess.getOutputProcessPartAccess().getNextAssignment_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OutputProcessPart__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OutputProcessPart__Group_1__0__Impl
	rule__OutputProcessPart__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputProcessPart__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutputProcessPartAccess().getMsgOutPartsAssignment_1_0()); }
	(rule__OutputProcessPart__MsgOutPartsAssignment_1_0)
	{ after(grammarAccess.getOutputProcessPartAccess().getMsgOutPartsAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputProcessPart__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OutputProcessPart__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputProcessPart__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutputProcessPartAccess().getGroup_1_1()); }
	(rule__OutputProcessPart__Group_1_1__0)*
	{ after(grammarAccess.getOutputProcessPartAccess().getGroup_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OutputProcessPart__Group_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OutputProcessPart__Group_1_1__0__Impl
	rule__OutputProcessPart__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputProcessPart__Group_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutputProcessPartAccess().getCommaKeyword_1_1_0()); }
	Comma
	{ after(grammarAccess.getOutputProcessPartAccess().getCommaKeyword_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputProcessPart__Group_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OutputProcessPart__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputProcessPart__Group_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutputProcessPartAccess().getMsgOutPartsAssignment_1_1_1()); }
	(rule__OutputProcessPart__MsgOutPartsAssignment_1_1_1)
	{ after(grammarAccess.getOutputProcessPartAccess().getMsgOutPartsAssignment_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OutputProcessPart__Group_6__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OutputProcessPart__Group_6__0__Impl
	rule__OutputProcessPart__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputProcessPart__Group_6__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutputProcessPartAccess().getSleepKeyword_6_0()); }
	Sleep
	{ after(grammarAccess.getOutputProcessPartAccess().getSleepKeyword_6_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputProcessPart__Group_6__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OutputProcessPart__Group_6__1__Impl
	rule__OutputProcessPart__Group_6__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputProcessPart__Group_6__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutputProcessPartAccess().getLeftParenthesisKeyword_6_1()); }
	LeftParenthesis
	{ after(grammarAccess.getOutputProcessPartAccess().getLeftParenthesisKeyword_6_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputProcessPart__Group_6__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OutputProcessPart__Group_6__2__Impl
	rule__OutputProcessPart__Group_6__3
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputProcessPart__Group_6__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutputProcessPartAccess().getMsecAssignment_6_2()); }
	(rule__OutputProcessPart__MsecAssignment_6_2)
	{ after(grammarAccess.getOutputProcessPartAccess().getMsecAssignment_6_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputProcessPart__Group_6__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OutputProcessPart__Group_6__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputProcessPart__Group_6__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutputProcessPartAccess().getRightParenthesisKeyword_6_3()); }
	RightParenthesis
	{ after(grammarAccess.getOutputProcessPartAccess().getRightParenthesisKeyword_6_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IfProcesses__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfProcesses__Group__0__Impl
	rule__IfProcesses__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfProcesses__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfProcessesAccess().getIfProcessesAction_0()); }
	()
	{ after(grammarAccess.getIfProcessesAccess().getIfProcessesAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfProcesses__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfProcesses__Group__1__Impl
	rule__IfProcesses__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IfProcesses__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfProcessesAccess().getBranchesAssignment_1()); }
	(rule__IfProcesses__BranchesAssignment_1)
	{ after(grammarAccess.getIfProcessesAccess().getBranchesAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfProcesses__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfProcesses__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfProcesses__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfProcessesAccess().getGroup_2()); }
	(rule__IfProcesses__Group_2__0)*
	{ after(grammarAccess.getIfProcessesAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IfProcesses__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfProcesses__Group_2__0__Impl
	rule__IfProcesses__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfProcesses__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfProcessesAccess().getElseKeyword_2_0()); }
	Else
	{ after(grammarAccess.getIfProcessesAccess().getElseKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfProcesses__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfProcesses__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfProcesses__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfProcessesAccess().getBranchesAssignment_2_1()); }
	(rule__IfProcesses__BranchesAssignment_2_1)
	{ after(grammarAccess.getIfProcessesAccess().getBranchesAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IfBranchProcess__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfBranchProcess__Group__0__Impl
	rule__IfBranchProcess__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfBranchProcess__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfBranchProcessAccess().getIfBranchProcessAction_0()); }
	()
	{ after(grammarAccess.getIfBranchProcessAccess().getIfBranchProcessAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfBranchProcess__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfBranchProcess__Group__1__Impl
	rule__IfBranchProcess__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IfBranchProcess__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfBranchProcessAccess().getIfKeyword_1()); }
	If
	{ after(grammarAccess.getIfBranchProcessAccess().getIfKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfBranchProcess__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfBranchProcess__Group__2__Impl
	rule__IfBranchProcess__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IfBranchProcess__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfBranchProcessAccess().getCondAssignment_2()); }
	(rule__IfBranchProcess__CondAssignment_2)
	{ after(grammarAccess.getIfBranchProcessAccess().getCondAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfBranchProcess__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfBranchProcess__Group__3__Impl
	rule__IfBranchProcess__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__IfBranchProcess__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfBranchProcessAccess().getLeftCurlyBracketKeyword_3()); }
	LeftCurlyBracket
	{ after(grammarAccess.getIfBranchProcessAccess().getLeftCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfBranchProcess__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfBranchProcess__Group__4__Impl
	rule__IfBranchProcess__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__IfBranchProcess__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfBranchProcessAccess().getThenAssignment_4()); }
	(rule__IfBranchProcess__ThenAssignment_4)
	{ after(grammarAccess.getIfBranchProcessAccess().getThenAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfBranchProcess__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfBranchProcess__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfBranchProcess__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfBranchProcessAccess().getRightCurlyBracketKeyword_5()); }
	RightCurlyBracket
	{ after(grammarAccess.getIfBranchProcessAccess().getRightCurlyBracketKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Update__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Update__Group__0__Impl
	rule__Update__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Update__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUpdateAccess().getLeftSquareBracketKeyword_0()); }
	LeftSquareBracket
	{ after(grammarAccess.getUpdateAccess().getLeftSquareBracketKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Update__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Update__Group__1__Impl
	rule__Update__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Update__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUpdateAccess().getVarsAssignment_1()); }
	(rule__Update__VarsAssignment_1)
	{ after(grammarAccess.getUpdateAccess().getVarsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Update__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Update__Group__2__Impl
	rule__Update__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Update__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUpdateAccess().getColonEqualsSignKeyword_2()); }
	ColonEqualsSign
	{ after(grammarAccess.getUpdateAccess().getColonEqualsSignKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Update__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Update__Group__3__Impl
	rule__Update__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Update__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUpdateAccess().getValsAssignment_3()); }
	(rule__Update__ValsAssignment_3)
	{ after(grammarAccess.getUpdateAccess().getValsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Update__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Update__Group__4__Impl
	rule__Update__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Update__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUpdateAccess().getGroup_4()); }
	(rule__Update__Group_4__0)*
	{ after(grammarAccess.getUpdateAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Update__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Update__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Update__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUpdateAccess().getRightSquareBracketKeyword_5()); }
	RightSquareBracket
	{ after(grammarAccess.getUpdateAccess().getRightSquareBracketKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Update__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Update__Group_4__0__Impl
	rule__Update__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Update__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUpdateAccess().getCommaKeyword_4_0()); }
	Comma
	{ after(grammarAccess.getUpdateAccess().getCommaKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Update__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Update__Group_4__1__Impl
	rule__Update__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Update__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUpdateAccess().getVarsAssignment_4_1()); }
	(rule__Update__VarsAssignment_4_1)
	{ after(grammarAccess.getUpdateAccess().getVarsAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Update__Group_4__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Update__Group_4__2__Impl
	rule__Update__Group_4__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Update__Group_4__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUpdateAccess().getColonEqualsSignKeyword_4_2()); }
	ColonEqualsSign
	{ after(grammarAccess.getUpdateAccess().getColonEqualsSignKeyword_4_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Update__Group_4__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Update__Group_4__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Update__Group_4__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUpdateAccess().getValsAssignment_4_3()); }
	(rule__Update__ValsAssignment_4_3)
	{ after(grammarAccess.getUpdateAccess().getValsAssignment_4_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Awareness__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Awareness__Group__0__Impl
	rule__Awareness__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Awareness__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAwarenessAccess().getLessThanSignKeyword_0()); }
	LessThanSign
	{ after(grammarAccess.getAwarenessAccess().getLessThanSignKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Awareness__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Awareness__Group__1__Impl
	rule__Awareness__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Awareness__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAwarenessAccess().getPredAssignment_1()); }
	(rule__Awareness__PredAssignment_1)
	{ after(grammarAccess.getAwarenessAccess().getPredAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Awareness__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Awareness__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Awareness__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAwarenessAccess().getGreaterThanSignKeyword_2()); }
	GreaterThanSign
	{ after(grammarAccess.getAwarenessAccess().getGreaterThanSignKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NZCProcess__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NZCProcess__Group_0__0__Impl
	rule__NZCProcess__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NZCProcess__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNZCProcessAccess().getLeftParenthesisKeyword_0_0()); }
	LeftParenthesis
	{ after(grammarAccess.getNZCProcessAccess().getLeftParenthesisKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NZCProcess__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NZCProcess__Group_0__1__Impl
	rule__NZCProcess__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NZCProcess__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNZCProcessAccess().getProcParserRuleCall_0_1()); }
	ruleProc
	{ after(grammarAccess.getNZCProcessAccess().getProcParserRuleCall_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NZCProcess__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NZCProcess__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NZCProcess__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNZCProcessAccess().getRightParenthesisKeyword_0_2()); }
	RightParenthesis
	{ after(grammarAccess.getNZCProcessAccess().getRightParenthesisKeyword_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NProcess__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NProcess__Group_0__0__Impl
	rule__NProcess__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NProcess__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNProcessAccess().getLeftParenthesisKeyword_0_0()); }
	LeftParenthesis
	{ after(grammarAccess.getNProcessAccess().getLeftParenthesisKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NProcess__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NProcess__Group_0__1__Impl
	rule__NProcess__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NProcess__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNProcessAccess().getProcParserRuleCall_0_1()); }
	ruleProc
	{ after(grammarAccess.getNProcessAccess().getProcParserRuleCall_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NProcess__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NProcess__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NProcess__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNProcessAccess().getRightParenthesisKeyword_0_2()); }
	RightParenthesis
	{ after(grammarAccess.getNProcessAccess().getRightParenthesisKeyword_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CallProcess__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CallProcess__Group__0__Impl
	rule__CallProcess__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CallProcess__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCallProcessAccess().getCallProcessAction_0()); }
	()
	{ after(grammarAccess.getCallProcessAccess().getCallProcessAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CallProcess__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CallProcess__Group__1__Impl
	rule__CallProcess__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CallProcess__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCallProcessAccess().getProcnameAssignment_1()); }
	(rule__CallProcess__ProcnameAssignment_1)
	{ after(grammarAccess.getCallProcessAccess().getProcnameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CallProcess__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CallProcess__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CallProcess__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCallProcessAccess().getGroup_2()); }
	(rule__CallProcess__Group_2__0)?
	{ after(grammarAccess.getCallProcessAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CallProcess__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CallProcess__Group_2__0__Impl
	rule__CallProcess__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CallProcess__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCallProcessAccess().getLeftSquareBracketKeyword_2_0()); }
	LeftSquareBracket
	{ after(grammarAccess.getCallProcessAccess().getLeftSquareBracketKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CallProcess__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CallProcess__Group_2__1__Impl
	rule__CallProcess__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CallProcess__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCallProcessAccess().getParamsAssignment_2_1()); }
	(rule__CallProcess__ParamsAssignment_2_1)
	{ after(grammarAccess.getCallProcessAccess().getParamsAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CallProcess__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CallProcess__Group_2__2__Impl
	rule__CallProcess__Group_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CallProcess__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCallProcessAccess().getGroup_2_2()); }
	(rule__CallProcess__Group_2_2__0)*
	{ after(grammarAccess.getCallProcessAccess().getGroup_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CallProcess__Group_2__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CallProcess__Group_2__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CallProcess__Group_2__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCallProcessAccess().getRightSquareBracketKeyword_2_3()); }
	RightSquareBracket
	{ after(grammarAccess.getCallProcessAccess().getRightSquareBracketKeyword_2_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CallProcess__Group_2_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CallProcess__Group_2_2__0__Impl
	rule__CallProcess__Group_2_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CallProcess__Group_2_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCallProcessAccess().getCommaKeyword_2_2_0()); }
	Comma
	{ after(grammarAccess.getCallProcessAccess().getCommaKeyword_2_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CallProcess__Group_2_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CallProcess__Group_2_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CallProcess__Group_2_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCallProcessAccess().getParamsAssignment_2_2_1()); }
	(rule__CallProcess__ParamsAssignment_2_2_1)
	{ after(grammarAccess.getCallProcessAccess().getParamsAssignment_2_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ZeroProcess__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ZeroProcess__Group__0__Impl
	rule__ZeroProcess__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ZeroProcess__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getZeroProcessAccess().getZeroProcessAction_0()); }
	()
	{ after(grammarAccess.getZeroProcessAccess().getZeroProcessAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ZeroProcess__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ZeroProcess__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ZeroProcess__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getZeroProcessAccess().getDigitZeroKeyword_1()); }
	DigitZero
	{ after(grammarAccess.getZeroProcessAccess().getDigitZeroKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ProcessDefinition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProcessDefinition__Group__0__Impl
	rule__ProcessDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessDefinition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcessDefinitionAccess().getProcKeyword_0()); }
	Proc
	{ after(grammarAccess.getProcessDefinitionAccess().getProcKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessDefinition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProcessDefinition__Group__1__Impl
	rule__ProcessDefinition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessDefinition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcessDefinitionAccess().getNameAssignment_1()); }
	(rule__ProcessDefinition__NameAssignment_1)
	{ after(grammarAccess.getProcessDefinitionAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessDefinition__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProcessDefinition__Group__2__Impl
	rule__ProcessDefinition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessDefinition__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcessDefinitionAccess().getGroup_2()); }
	(rule__ProcessDefinition__Group_2__0)?
	{ after(grammarAccess.getProcessDefinitionAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessDefinition__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProcessDefinition__Group__3__Impl
	rule__ProcessDefinition__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessDefinition__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcessDefinitionAccess().getEqualsSignKeyword_3()); }
	EqualsSign
	{ after(grammarAccess.getProcessDefinitionAccess().getEqualsSignKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessDefinition__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProcessDefinition__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessDefinition__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcessDefinitionAccess().getProcAssignment_4()); }
	(rule__ProcessDefinition__ProcAssignment_4)
	{ after(grammarAccess.getProcessDefinitionAccess().getProcAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ProcessDefinition__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProcessDefinition__Group_2__0__Impl
	rule__ProcessDefinition__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessDefinition__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcessDefinitionAccess().getLeftSquareBracketKeyword_2_0()); }
	LeftSquareBracket
	{ after(grammarAccess.getProcessDefinitionAccess().getLeftSquareBracketKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessDefinition__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProcessDefinition__Group_2__1__Impl
	rule__ProcessDefinition__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessDefinition__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcessDefinitionAccess().getParamsAssignment_2_1()); }
	(rule__ProcessDefinition__ParamsAssignment_2_1)
	{ after(grammarAccess.getProcessDefinitionAccess().getParamsAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessDefinition__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProcessDefinition__Group_2__2__Impl
	rule__ProcessDefinition__Group_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessDefinition__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcessDefinitionAccess().getGroup_2_2()); }
	(rule__ProcessDefinition__Group_2_2__0)*
	{ after(grammarAccess.getProcessDefinitionAccess().getGroup_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessDefinition__Group_2__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProcessDefinition__Group_2__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessDefinition__Group_2__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcessDefinitionAccess().getRightSquareBracketKeyword_2_3()); }
	RightSquareBracket
	{ after(grammarAccess.getProcessDefinitionAccess().getRightSquareBracketKeyword_2_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ProcessDefinition__Group_2_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProcessDefinition__Group_2_2__0__Impl
	rule__ProcessDefinition__Group_2_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessDefinition__Group_2_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcessDefinitionAccess().getCommaKeyword_2_2_0()); }
	Comma
	{ after(grammarAccess.getProcessDefinitionAccess().getCommaKeyword_2_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessDefinition__Group_2_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProcessDefinition__Group_2_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessDefinition__Group_2_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcessDefinitionAccess().getParamsAssignment_2_2_1()); }
	(rule__ProcessDefinition__ParamsAssignment_2_2_1)
	{ after(grammarAccess.getProcessDefinitionAccess().getParamsAssignment_2_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Environment__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Environment__Group__0__Impl
	rule__Environment__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Environment__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnvironmentAccess().getEnvironmentAction_0()); }
	()
	{ after(grammarAccess.getEnvironmentAccess().getEnvironmentAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Environment__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Environment__Group__1__Impl
	rule__Environment__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Environment__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnvironmentAccess().getLeftCurlyBracketKeyword_1()); }
	LeftCurlyBracket
	{ after(grammarAccess.getEnvironmentAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Environment__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Environment__Group__2__Impl
	rule__Environment__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Environment__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnvironmentAccess().getGroup_2()); }
	(rule__Environment__Group_2__0)?
	{ after(grammarAccess.getEnvironmentAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Environment__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Environment__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Environment__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnvironmentAccess().getRightCurlyBracketKeyword_3()); }
	RightCurlyBracket
	{ after(grammarAccess.getEnvironmentAccess().getRightCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Environment__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Environment__Group_2__0__Impl
	rule__Environment__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Environment__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnvironmentAccess().getAttrsAssignment_2_0()); }
	(rule__Environment__AttrsAssignment_2_0)
	{ after(grammarAccess.getEnvironmentAccess().getAttrsAssignment_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Environment__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Environment__Group_2__1__Impl
	rule__Environment__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Environment__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnvironmentAccess().getColonEqualsSignKeyword_2_1()); }
	ColonEqualsSign
	{ after(grammarAccess.getEnvironmentAccess().getColonEqualsSignKeyword_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Environment__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Environment__Group_2__2__Impl
	rule__Environment__Group_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Environment__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnvironmentAccess().getValsAssignment_2_2()); }
	(rule__Environment__ValsAssignment_2_2)
	{ after(grammarAccess.getEnvironmentAccess().getValsAssignment_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Environment__Group_2__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Environment__Group_2__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Environment__Group_2__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnvironmentAccess().getGroup_2_3()); }
	(rule__Environment__Group_2_3__0)*
	{ after(grammarAccess.getEnvironmentAccess().getGroup_2_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Environment__Group_2_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Environment__Group_2_3__0__Impl
	rule__Environment__Group_2_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Environment__Group_2_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnvironmentAccess().getCommaKeyword_2_3_0()); }
	Comma
	{ after(grammarAccess.getEnvironmentAccess().getCommaKeyword_2_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Environment__Group_2_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Environment__Group_2_3__1__Impl
	rule__Environment__Group_2_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Environment__Group_2_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnvironmentAccess().getAttrsAssignment_2_3_1()); }
	(rule__Environment__AttrsAssignment_2_3_1)
	{ after(grammarAccess.getEnvironmentAccess().getAttrsAssignment_2_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Environment__Group_2_3__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Environment__Group_2_3__2__Impl
	rule__Environment__Group_2_3__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Environment__Group_2_3__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnvironmentAccess().getColonEqualsSignKeyword_2_3_2()); }
	ColonEqualsSign
	{ after(grammarAccess.getEnvironmentAccess().getColonEqualsSignKeyword_2_3_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Environment__Group_2_3__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Environment__Group_2_3__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Environment__Group_2_3__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnvironmentAccess().getValsAssignment_2_3_3()); }
	(rule__Environment__ValsAssignment_2_3_3)
	{ after(grammarAccess.getEnvironmentAccess().getValsAssignment_2_3_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ComponentDefinition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComponentDefinition__Group__0__Impl
	rule__ComponentDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentDefinition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComponentDefinitionAccess().getComponentKeyword_0()); }
	Component
	{ after(grammarAccess.getComponentDefinitionAccess().getComponentKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentDefinition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComponentDefinition__Group__1__Impl
	rule__ComponentDefinition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentDefinition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComponentDefinitionAccess().getEnvAssignment_1()); }
	(rule__ComponentDefinition__EnvAssignment_1)
	{ after(grammarAccess.getComponentDefinitionAccess().getEnvAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentDefinition__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComponentDefinition__Group__2__Impl
	rule__ComponentDefinition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentDefinition__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComponentDefinitionAccess().getProcAssignment_2()); }
	(rule__ComponentDefinition__ProcAssignment_2)
	{ after(grammarAccess.getComponentDefinitionAccess().getProcAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentDefinition__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComponentDefinition__Group__3__Impl
	rule__ComponentDefinition__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentDefinition__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComponentDefinitionAccess().getGroup_3()); }
	(rule__ComponentDefinition__Group_3__0)?
	{ after(grammarAccess.getComponentDefinitionAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentDefinition__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComponentDefinition__Group__4__Impl
	rule__ComponentDefinition__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentDefinition__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComponentDefinitionAccess().getAtKeyword_4()); }
	At
	{ after(grammarAccess.getComponentDefinitionAccess().getAtKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentDefinition__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComponentDefinition__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentDefinition__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComponentDefinitionAccess().getAddressAssignment_5()); }
	(rule__ComponentDefinition__AddressAssignment_5)
	{ after(grammarAccess.getComponentDefinitionAccess().getAddressAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ComponentDefinition__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComponentDefinition__Group_3__0__Impl
	rule__ComponentDefinition__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentDefinition__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComponentDefinitionAccess().getLeftSquareBracketKeyword_3_0()); }
	LeftSquareBracket
	{ after(grammarAccess.getComponentDefinitionAccess().getLeftSquareBracketKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentDefinition__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComponentDefinition__Group_3__1__Impl
	rule__ComponentDefinition__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentDefinition__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComponentDefinitionAccess().getParamsAssignment_3_1()); }
	(rule__ComponentDefinition__ParamsAssignment_3_1)
	{ after(grammarAccess.getComponentDefinitionAccess().getParamsAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentDefinition__Group_3__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComponentDefinition__Group_3__2__Impl
	rule__ComponentDefinition__Group_3__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentDefinition__Group_3__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComponentDefinitionAccess().getGroup_3_2()); }
	(rule__ComponentDefinition__Group_3_2__0)*
	{ after(grammarAccess.getComponentDefinitionAccess().getGroup_3_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentDefinition__Group_3__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComponentDefinition__Group_3__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentDefinition__Group_3__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComponentDefinitionAccess().getRightSquareBracketKeyword_3_3()); }
	RightSquareBracket
	{ after(grammarAccess.getComponentDefinitionAccess().getRightSquareBracketKeyword_3_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ComponentDefinition__Group_3_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComponentDefinition__Group_3_2__0__Impl
	rule__ComponentDefinition__Group_3_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentDefinition__Group_3_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComponentDefinitionAccess().getCommaKeyword_3_2_0()); }
	Comma
	{ after(grammarAccess.getComponentDefinitionAccess().getCommaKeyword_3_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentDefinition__Group_3_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComponentDefinition__Group_3_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentDefinition__Group_3_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComponentDefinitionAccess().getParamsAssignment_3_2_1()); }
	(rule__ComponentDefinition__ParamsAssignment_3_2_1)
	{ after(grammarAccess.getComponentDefinitionAccess().getParamsAssignment_3_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Attribute__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Attribute__Group__0__Impl
	rule__Attribute__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributeAccess().getGroup_0()); }
	(rule__Attribute__Group_0__0)?
	{ after(grammarAccess.getAttributeAccess().getGroup_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Attribute__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributeAccess().getIdentAssignment_1()); }
	(rule__Attribute__IdentAssignment_1)
	{ after(grammarAccess.getAttributeAccess().getIdentAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Attribute__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Attribute__Group_0__0__Impl
	rule__Attribute__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributeAccess().getCompAssignment_0_0()); }
	(rule__Attribute__CompAssignment_0_0)
	{ after(grammarAccess.getAttributeAccess().getCompAssignment_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Attribute__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributeAccess().getFullStopKeyword_0_1()); }
	FullStop
	{ after(grammarAccess.getAttributeAccess().getFullStopKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RecAttribute__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RecAttribute__Group__0__Impl
	rule__RecAttribute__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RecAttribute__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRecAttributeAccess().getReceiverKeyword_0()); }
	Receiver
	{ after(grammarAccess.getRecAttributeAccess().getReceiverKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RecAttribute__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RecAttribute__Group__1__Impl
	rule__RecAttribute__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RecAttribute__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRecAttributeAccess().getFullStopKeyword_1()); }
	FullStop
	{ after(grammarAccess.getRecAttributeAccess().getFullStopKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RecAttribute__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RecAttribute__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RecAttribute__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRecAttributeAccess().getIdentAssignment_2()); }
	(rule__RecAttribute__IdentAssignment_2)
	{ after(grammarAccess.getRecAttributeAccess().getIdentAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AttributeValue__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AttributeValue__Group__0__Impl
	rule__AttributeValue__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeValue__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributeValueAccess().getAttributeValueAction_0()); }
	()
	{ after(grammarAccess.getAttributeValueAccess().getAttributeValueAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeValue__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AttributeValue__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeValue__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributeValueAccess().getAttrAssignment_1()); }
	(rule__AttributeValue__AttrAssignment_1)
	{ after(grammarAccess.getAttributeValueAccess().getAttrAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ImmediateValue__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ImmediateValue__Group__0__Impl
	rule__ImmediateValue__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ImmediateValue__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImmediateValueAccess().getImmediateValueAction_0()); }
	()
	{ after(grammarAccess.getImmediateValueAccess().getImmediateValueAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ImmediateValue__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ImmediateValue__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ImmediateValue__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImmediateValueAccess().getImmAssignment_1()); }
	(rule__ImmediateValue__ImmAssignment_1)
	{ after(grammarAccess.getImmediateValueAccess().getImmAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__GoStringFunction__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GoStringFunction__Group__0__Impl
	rule__GoStringFunction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GoStringFunction__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGoStringFunctionAccess().getGoStringFunctionAction_0()); }
	()
	{ after(grammarAccess.getGoStringFunctionAccess().getGoStringFunctionAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GoStringFunction__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GoStringFunction__Group__1__Impl
	rule__GoStringFunction__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__GoStringFunction__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGoStringFunctionAccess().getFuncnameAssignment_1()); }
	(rule__GoStringFunction__FuncnameAssignment_1)
	{ after(grammarAccess.getGoStringFunctionAccess().getFuncnameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GoStringFunction__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GoStringFunction__Group__2__Impl
	rule__GoStringFunction__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__GoStringFunction__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGoStringFunctionAccess().getLeftParenthesisKeyword_2()); }
	LeftParenthesis
	{ after(grammarAccess.getGoStringFunctionAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GoStringFunction__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GoStringFunction__Group__3__Impl
	rule__GoStringFunction__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__GoStringFunction__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGoStringFunctionAccess().getGroup_3()); }
	(rule__GoStringFunction__Group_3__0)?
	{ after(grammarAccess.getGoStringFunctionAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GoStringFunction__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GoStringFunction__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GoStringFunction__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGoStringFunctionAccess().getRightParenthesisKeyword_4()); }
	RightParenthesis
	{ after(grammarAccess.getGoStringFunctionAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__GoStringFunction__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GoStringFunction__Group_3__0__Impl
	rule__GoStringFunction__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GoStringFunction__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGoStringFunctionAccess().getParamsAssignment_3_0()); }
	(rule__GoStringFunction__ParamsAssignment_3_0)
	{ after(grammarAccess.getGoStringFunctionAccess().getParamsAssignment_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GoStringFunction__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GoStringFunction__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GoStringFunction__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGoStringFunctionAccess().getGroup_3_1()); }
	(rule__GoStringFunction__Group_3_1__0)*
	{ after(grammarAccess.getGoStringFunctionAccess().getGroup_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__GoStringFunction__Group_3_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GoStringFunction__Group_3_1__0__Impl
	rule__GoStringFunction__Group_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GoStringFunction__Group_3_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGoStringFunctionAccess().getCommaKeyword_3_1_0()); }
	Comma
	{ after(grammarAccess.getGoStringFunctionAccess().getCommaKeyword_3_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GoStringFunction__Group_3_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GoStringFunction__Group_3_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GoStringFunction__Group_3_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGoStringFunctionAccess().getParamsAssignment_3_1_1()); }
	(rule__GoStringFunction__ParamsAssignment_3_1_1)
	{ after(grammarAccess.getGoStringFunctionAccess().getParamsAssignment_3_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Predicate__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Predicate__Group__0__Impl
	rule__Predicate__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Predicate__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredicateAccess().getAndParserRuleCall_0()); }
	ruleAnd
	{ after(grammarAccess.getPredicateAccess().getAndParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Predicate__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Predicate__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Predicate__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredicateAccess().getGroup_1()); }
	(rule__Predicate__Group_1__0)*
	{ after(grammarAccess.getPredicateAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Predicate__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Predicate__Group_1__0__Impl
	rule__Predicate__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Predicate__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredicateAccess().getPredicateOrAction_1_0()); }
	()
	{ after(grammarAccess.getPredicateAccess().getPredicateOrAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Predicate__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Predicate__Group_1__1__Impl
	rule__Predicate__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Predicate__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredicateAccess().getVerticalLineVerticalLineKeyword_1_1()); }
	VerticalLineVerticalLine
	{ after(grammarAccess.getPredicateAccess().getVerticalLineVerticalLineKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Predicate__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Predicate__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Predicate__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredicateAccess().getOrAssignment_1_2()); }
	(rule__Predicate__OrAssignment_1_2)
	{ after(grammarAccess.getPredicateAccess().getOrAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__And__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group__0__Impl
	rule__And__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getNotParserRuleCall_0()); }
	ruleNot
	{ after(grammarAccess.getAndAccess().getNotParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getGroup_1()); }
	(rule__And__Group_1__0)*
	{ after(grammarAccess.getAndAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__And__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group_1__0__Impl
	rule__And__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getAndAndAction_1_0()); }
	()
	{ after(grammarAccess.getAndAccess().getAndAndAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group_1__1__Impl
	rule__And__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getAmpersandAmpersandKeyword_1_1()); }
	AmpersandAmpersand
	{ after(grammarAccess.getAndAccess().getAmpersandAmpersandKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getAndAssignment_1_2()); }
	(rule__And__AndAssignment_1_2)
	{ after(grammarAccess.getAndAccess().getAndAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Not__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Not__Group_1__0__Impl
	rule__Not__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Not__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNotAccess().getNotAction_1_0()); }
	()
	{ after(grammarAccess.getNotAccess().getNotAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Not__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Not__Group_1__1__Impl
	rule__Not__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Not__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNotAccess().getNegAssignment_1_1()); }
	(rule__Not__NegAssignment_1_1)
	{ after(grammarAccess.getNotAccess().getNegAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Not__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Not__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Not__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNotAccess().getTermAssignment_1_2()); }
	(rule__Not__TermAssignment_1_2)
	{ after(grammarAccess.getNotAccess().getTermAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Term__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Term__Group_2__0__Impl
	rule__Term__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTermAccess().getLeftParenthesisKeyword_2_0()); }
	LeftParenthesis
	{ after(grammarAccess.getTermAccess().getLeftParenthesisKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Term__Group_2__1__Impl
	rule__Term__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTermAccess().getPredicateParserRuleCall_2_1()); }
	rulePredicate
	{ after(grammarAccess.getTermAccess().getPredicateParserRuleCall_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Term__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTermAccess().getRightParenthesisKeyword_2_2()); }
	RightParenthesis
	{ after(grammarAccess.getTermAccess().getRightParenthesisKeyword_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Immediate__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Immediate__Group__0__Impl
	rule__Immediate__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Immediate__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImmediateAccess().getImmediateAction_0()); }
	()
	{ after(grammarAccess.getImmediateAccess().getImmediateAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Immediate__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Immediate__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Immediate__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImmediateAccess().getAlternatives_1()); }
	(rule__Immediate__Alternatives_1)
	{ after(grammarAccess.getImmediateAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EqualityTest__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EqualityTest__Group__0__Impl
	rule__EqualityTest__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityTest__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualityTestAccess().getEqualityTestAction_0()); }
	()
	{ after(grammarAccess.getEqualityTestAccess().getEqualityTestAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityTest__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EqualityTest__Group__1__Impl
	rule__EqualityTest__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityTest__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualityTestAccess().getOp1Assignment_1()); }
	(rule__EqualityTest__Op1Assignment_1)
	{ after(grammarAccess.getEqualityTestAccess().getOp1Assignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityTest__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EqualityTest__Group__2__Impl
	rule__EqualityTest__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityTest__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualityTestAccess().getOperandAssignment_2()); }
	(rule__EqualityTest__OperandAssignment_2)
	{ after(grammarAccess.getEqualityTestAccess().getOperandAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityTest__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EqualityTest__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityTest__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualityTestAccess().getOp2Assignment_3()); }
	(rule__EqualityTest__Op2Assignment_3)
	{ after(grammarAccess.getEqualityTestAccess().getOp2Assignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FuncDefinition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncDefinition__Group__0__Impl
	rule__FuncDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncDefinition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncDefinitionAccess().getFunctionKeyword_0()); }
	Function
	{ after(grammarAccess.getFuncDefinitionAccess().getFunctionKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncDefinition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncDefinition__Group__1__Impl
	rule__FuncDefinition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncDefinition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncDefinitionAccess().getNameAssignment_1()); }
	(rule__FuncDefinition__NameAssignment_1)
	{ after(grammarAccess.getFuncDefinitionAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncDefinition__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncDefinition__Group__2__Impl
	rule__FuncDefinition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncDefinition__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncDefinitionAccess().getLeftParenthesisKeyword_2()); }
	LeftParenthesis
	{ after(grammarAccess.getFuncDefinitionAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncDefinition__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncDefinition__Group__3__Impl
	rule__FuncDefinition__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncDefinition__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncDefinitionAccess().getGroup_3()); }
	(rule__FuncDefinition__Group_3__0)?
	{ after(grammarAccess.getFuncDefinitionAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncDefinition__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncDefinition__Group__4__Impl
	rule__FuncDefinition__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncDefinition__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncDefinitionAccess().getRightParenthesisKeyword_4()); }
	RightParenthesis
	{ after(grammarAccess.getFuncDefinitionAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncDefinition__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncDefinition__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncDefinition__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncDefinitionAccess().getBlkAssignment_5()); }
	(rule__FuncDefinition__BlkAssignment_5)
	{ after(grammarAccess.getFuncDefinitionAccess().getBlkAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FuncDefinition__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncDefinition__Group_3__0__Impl
	rule__FuncDefinition__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncDefinition__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncDefinitionAccess().getParamsAssignment_3_0()); }
	(rule__FuncDefinition__ParamsAssignment_3_0)
	{ after(grammarAccess.getFuncDefinitionAccess().getParamsAssignment_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncDefinition__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncDefinition__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncDefinition__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncDefinitionAccess().getGroup_3_1()); }
	(rule__FuncDefinition__Group_3_1__0)*
	{ after(grammarAccess.getFuncDefinitionAccess().getGroup_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FuncDefinition__Group_3_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncDefinition__Group_3_1__0__Impl
	rule__FuncDefinition__Group_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncDefinition__Group_3_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncDefinitionAccess().getCommaKeyword_3_1_0()); }
	Comma
	{ after(grammarAccess.getFuncDefinitionAccess().getCommaKeyword_3_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncDefinition__Group_3_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncDefinition__Group_3_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncDefinition__Group_3_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncDefinitionAccess().getParamsAssignment_3_1_1()); }
	(rule__FuncDefinition__ParamsAssignment_3_1_1)
	{ after(grammarAccess.getFuncDefinitionAccess().getParamsAssignment_3_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FuncBlock__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncBlock__Group__0__Impl
	rule__FuncBlock__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncBlock__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncBlockAccess().getLeftCurlyBracketKeyword_0()); }
	LeftCurlyBracket
	{ after(grammarAccess.getFuncBlockAccess().getLeftCurlyBracketKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncBlock__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncBlock__Group__1__Impl
	rule__FuncBlock__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncBlock__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncBlockAccess().getFuncBlockAction_1()); }
	()
	{ after(grammarAccess.getFuncBlockAccess().getFuncBlockAction_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncBlock__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncBlock__Group__2__Impl
	rule__FuncBlock__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncBlock__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncBlockAccess().getStatementsAssignment_2()); }
	(rule__FuncBlock__StatementsAssignment_2)*
	{ after(grammarAccess.getFuncBlockAccess().getStatementsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncBlock__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncBlock__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncBlock__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncBlockAccess().getRightCurlyBracketKeyword_3()); }
	RightCurlyBracket
	{ after(grammarAccess.getFuncBlockAccess().getRightCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FuncVarDeclaration__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncVarDeclaration__Group__0__Impl
	rule__FuncVarDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncVarDeclaration__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncVarDeclarationAccess().getVarKeyword_0()); }
	Var
	{ after(grammarAccess.getFuncVarDeclarationAccess().getVarKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncVarDeclaration__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncVarDeclaration__Group__1__Impl
	rule__FuncVarDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncVarDeclaration__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncVarDeclarationAccess().getNameAssignment_1()); }
	(rule__FuncVarDeclaration__NameAssignment_1)
	{ after(grammarAccess.getFuncVarDeclarationAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncVarDeclaration__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncVarDeclaration__Group__2__Impl
	rule__FuncVarDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncVarDeclaration__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncVarDeclarationAccess().getEqualsSignKeyword_2()); }
	EqualsSign
	{ after(grammarAccess.getFuncVarDeclarationAccess().getEqualsSignKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncVarDeclaration__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncVarDeclaration__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncVarDeclaration__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncVarDeclarationAccess().getValAssignment_3()); }
	(rule__FuncVarDeclaration__ValAssignment_3)
	{ after(grammarAccess.getFuncVarDeclarationAccess().getValAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FuncVarAssign__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncVarAssign__Group__0__Impl
	rule__FuncVarAssign__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncVarAssign__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncVarAssignAccess().getVarAssignment_0()); }
	(rule__FuncVarAssign__VarAssignment_0)
	{ after(grammarAccess.getFuncVarAssignAccess().getVarAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncVarAssign__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncVarAssign__Group__1__Impl
	rule__FuncVarAssign__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncVarAssign__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncVarAssignAccess().getEqualsSignKeyword_1()); }
	EqualsSign
	{ after(grammarAccess.getFuncVarAssignAccess().getEqualsSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncVarAssign__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncVarAssign__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncVarAssign__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncVarAssignAccess().getValAssignment_2()); }
	(rule__FuncVarAssign__ValAssignment_2)
	{ after(grammarAccess.getFuncVarAssignAccess().getValAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FuncVal__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncVal__Group_0__0__Impl
	rule__FuncVal__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncVal__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncValAccess().getFuncStringAction_0_0()); }
	()
	{ after(grammarAccess.getFuncValAccess().getFuncStringAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncVal__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncVal__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncVal__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncValAccess().getImmAssignment_0_1()); }
	(rule__FuncVal__ImmAssignment_0_1)
	{ after(grammarAccess.getFuncValAccess().getImmAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FuncVal__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncVal__Group_1__0__Impl
	rule__FuncVal__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncVal__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncValAccess().getFuncMemoryRefAction_1_0()); }
	()
	{ after(grammarAccess.getFuncValAccess().getFuncMemoryRefAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncVal__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncVal__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncVal__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncValAccess().getRefAssignment_1_1()); }
	(rule__FuncVal__RefAssignment_1_1)
	{ after(grammarAccess.getFuncValAccess().getRefAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FuncPredicate__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncPredicate__Group__0__Impl
	rule__FuncPredicate__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncPredicate__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncPredicateAccess().getFuncAndParserRuleCall_0()); }
	ruleFuncAnd
	{ after(grammarAccess.getFuncPredicateAccess().getFuncAndParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncPredicate__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncPredicate__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncPredicate__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncPredicateAccess().getGroup_1()); }
	(rule__FuncPredicate__Group_1__0)*
	{ after(grammarAccess.getFuncPredicateAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FuncPredicate__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncPredicate__Group_1__0__Impl
	rule__FuncPredicate__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncPredicate__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncPredicateAccess().getFuncPredicateOrAction_1_0()); }
	()
	{ after(grammarAccess.getFuncPredicateAccess().getFuncPredicateOrAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncPredicate__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncPredicate__Group_1__1__Impl
	rule__FuncPredicate__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncPredicate__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncPredicateAccess().getVerticalLineVerticalLineKeyword_1_1()); }
	VerticalLineVerticalLine
	{ after(grammarAccess.getFuncPredicateAccess().getVerticalLineVerticalLineKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncPredicate__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncPredicate__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncPredicate__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncPredicateAccess().getOrAssignment_1_2()); }
	(rule__FuncPredicate__OrAssignment_1_2)
	{ after(grammarAccess.getFuncPredicateAccess().getOrAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FuncAnd__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncAnd__Group__0__Impl
	rule__FuncAnd__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncAnd__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncAndAccess().getFuncNotParserRuleCall_0()); }
	ruleFuncNot
	{ after(grammarAccess.getFuncAndAccess().getFuncNotParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncAnd__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncAnd__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncAnd__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncAndAccess().getGroup_1()); }
	(rule__FuncAnd__Group_1__0)*
	{ after(grammarAccess.getFuncAndAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FuncAnd__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncAnd__Group_1__0__Impl
	rule__FuncAnd__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncAnd__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncAndAccess().getFuncAndAndAction_1_0()); }
	()
	{ after(grammarAccess.getFuncAndAccess().getFuncAndAndAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncAnd__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncAnd__Group_1__1__Impl
	rule__FuncAnd__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncAnd__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncAndAccess().getAmpersandAmpersandKeyword_1_1()); }
	AmpersandAmpersand
	{ after(grammarAccess.getFuncAndAccess().getAmpersandAmpersandKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncAnd__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncAnd__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncAnd__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncAndAccess().getAndAssignment_1_2()); }
	(rule__FuncAnd__AndAssignment_1_2)
	{ after(grammarAccess.getFuncAndAccess().getAndAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FuncNot__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncNot__Group_1__0__Impl
	rule__FuncNot__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncNot__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncNotAccess().getFuncNotAction_1_0()); }
	()
	{ after(grammarAccess.getFuncNotAccess().getFuncNotAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncNot__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncNot__Group_1__1__Impl
	rule__FuncNot__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncNot__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncNotAccess().getNegAssignment_1_1()); }
	(rule__FuncNot__NegAssignment_1_1)
	{ after(grammarAccess.getFuncNotAccess().getNegAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncNot__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncNot__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncNot__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncNotAccess().getTermAssignment_1_2()); }
	(rule__FuncNot__TermAssignment_1_2)
	{ after(grammarAccess.getFuncNotAccess().getTermAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FuncTerm__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncTerm__Group_2__0__Impl
	rule__FuncTerm__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncTerm__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncTermAccess().getLeftParenthesisKeyword_2_0()); }
	LeftParenthesis
	{ after(grammarAccess.getFuncTermAccess().getLeftParenthesisKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncTerm__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncTerm__Group_2__1__Impl
	rule__FuncTerm__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncTerm__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncTermAccess().getFuncPredicateParserRuleCall_2_1()); }
	ruleFuncPredicate
	{ after(grammarAccess.getFuncTermAccess().getFuncPredicateParserRuleCall_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncTerm__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncTerm__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncTerm__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncTermAccess().getRightParenthesisKeyword_2_2()); }
	RightParenthesis
	{ after(grammarAccess.getFuncTermAccess().getRightParenthesisKeyword_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FuncImmediate__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncImmediate__Group__0__Impl
	rule__FuncImmediate__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncImmediate__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncImmediateAccess().getFuncImmediateAction_0()); }
	()
	{ after(grammarAccess.getFuncImmediateAccess().getFuncImmediateAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncImmediate__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncImmediate__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncImmediate__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncImmediateAccess().getAlternatives_1()); }
	(rule__FuncImmediate__Alternatives_1)
	{ after(grammarAccess.getFuncImmediateAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FuncEqualityTest__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncEqualityTest__Group__0__Impl
	rule__FuncEqualityTest__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncEqualityTest__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncEqualityTestAccess().getFuncEqualityTestAction_0()); }
	()
	{ after(grammarAccess.getFuncEqualityTestAccess().getFuncEqualityTestAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncEqualityTest__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncEqualityTest__Group__1__Impl
	rule__FuncEqualityTest__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncEqualityTest__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncEqualityTestAccess().getOp1Assignment_1()); }
	(rule__FuncEqualityTest__Op1Assignment_1)
	{ after(grammarAccess.getFuncEqualityTestAccess().getOp1Assignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncEqualityTest__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncEqualityTest__Group__2__Impl
	rule__FuncEqualityTest__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncEqualityTest__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncEqualityTestAccess().getOperandAssignment_2()); }
	(rule__FuncEqualityTest__OperandAssignment_2)
	{ after(grammarAccess.getFuncEqualityTestAccess().getOperandAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncEqualityTest__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncEqualityTest__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncEqualityTest__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncEqualityTestAccess().getOp2Assignment_3()); }
	(rule__FuncEqualityTest__Op2Assignment_3)
	{ after(grammarAccess.getFuncEqualityTestAccess().getOp2Assignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FuncIfElse__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncIfElse__Group__0__Impl
	rule__FuncIfElse__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncIfElse__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncIfElseAccess().getIfKeyword_0()); }
	If
	{ after(grammarAccess.getFuncIfElseAccess().getIfKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncIfElse__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncIfElse__Group__1__Impl
	rule__FuncIfElse__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncIfElse__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncIfElseAccess().getLeftParenthesisKeyword_1()); }
	LeftParenthesis
	{ after(grammarAccess.getFuncIfElseAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncIfElse__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncIfElse__Group__2__Impl
	rule__FuncIfElse__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncIfElse__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncIfElseAccess().getTestAssignment_2()); }
	(rule__FuncIfElse__TestAssignment_2)
	{ after(grammarAccess.getFuncIfElseAccess().getTestAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncIfElse__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncIfElse__Group__3__Impl
	rule__FuncIfElse__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncIfElse__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncIfElseAccess().getRightParenthesisKeyword_3()); }
	RightParenthesis
	{ after(grammarAccess.getFuncIfElseAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncIfElse__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncIfElse__Group__4__Impl
	rule__FuncIfElse__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncIfElse__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncIfElseAccess().getThenAssignment_4()); }
	(rule__FuncIfElse__ThenAssignment_4)
	{ after(grammarAccess.getFuncIfElseAccess().getThenAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncIfElse__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncIfElse__Group__5__Impl
	rule__FuncIfElse__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncIfElse__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncIfElseAccess().getGroup_5()); }
	(rule__FuncIfElse__Group_5__0)*
	{ after(grammarAccess.getFuncIfElseAccess().getGroup_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncIfElse__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncIfElse__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncIfElse__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncIfElseAccess().getGroup_6()); }
	(rule__FuncIfElse__Group_6__0)?
	{ after(grammarAccess.getFuncIfElseAccess().getGroup_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FuncIfElse__Group_5__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncIfElse__Group_5__0__Impl
	rule__FuncIfElse__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncIfElse__Group_5__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncIfElseAccess().getElifKeyword_5_0()); }
	Elif
	{ after(grammarAccess.getFuncIfElseAccess().getElifKeyword_5_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncIfElse__Group_5__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncIfElse__Group_5__1__Impl
	rule__FuncIfElse__Group_5__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncIfElse__Group_5__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncIfElseAccess().getLeftParenthesisKeyword_5_1()); }
	LeftParenthesis
	{ after(grammarAccess.getFuncIfElseAccess().getLeftParenthesisKeyword_5_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncIfElse__Group_5__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncIfElse__Group_5__2__Impl
	rule__FuncIfElse__Group_5__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncIfElse__Group_5__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncIfElseAccess().getTestAssignment_5_2()); }
	(rule__FuncIfElse__TestAssignment_5_2)
	{ after(grammarAccess.getFuncIfElseAccess().getTestAssignment_5_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncIfElse__Group_5__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncIfElse__Group_5__3__Impl
	rule__FuncIfElse__Group_5__4
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncIfElse__Group_5__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncIfElseAccess().getRightParenthesisKeyword_5_3()); }
	RightParenthesis
	{ after(grammarAccess.getFuncIfElseAccess().getRightParenthesisKeyword_5_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncIfElse__Group_5__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncIfElse__Group_5__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncIfElse__Group_5__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncIfElseAccess().getThenAssignment_5_4()); }
	(rule__FuncIfElse__ThenAssignment_5_4)
	{ after(grammarAccess.getFuncIfElseAccess().getThenAssignment_5_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FuncIfElse__Group_6__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncIfElse__Group_6__0__Impl
	rule__FuncIfElse__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncIfElse__Group_6__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncIfElseAccess().getElseKeyword_6_0()); }
	Else
	{ after(grammarAccess.getFuncIfElseAccess().getElseKeyword_6_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncIfElse__Group_6__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncIfElse__Group_6__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncIfElse__Group_6__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncIfElseAccess().getElseBranchAssignment_6_1()); }
	(rule__FuncIfElse__ElseBranchAssignment_6_1)
	{ after(grammarAccess.getFuncIfElseAccess().getElseBranchAssignment_6_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FuncReturn__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncReturn__Group__0__Impl
	rule__FuncReturn__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncReturn__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncReturnAccess().getReturnKeyword_0()); }
	Return
	{ after(grammarAccess.getFuncReturnAccess().getReturnKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncReturn__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncReturn__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncReturn__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncReturnAccess().getValAssignment_1()); }
	(rule__FuncReturn__ValAssignment_1)
	{ after(grammarAccess.getFuncReturnAccess().getValAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__ProcessesAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getProcessesProcessDefinitionParserRuleCall_0_0()); }
		ruleProcessDefinition
		{ after(grammarAccess.getModelAccess().getProcessesProcessDefinitionParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__ComponentsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getComponentsComponentDefinitionParserRuleCall_1_0()); }
		ruleComponentDefinition
		{ after(grammarAccess.getModelAccess().getComponentsComponentDefinitionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__FunctionsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getFunctionsFuncDefinitionParserRuleCall_2_0()); }
		ruleFuncDefinition
		{ after(grammarAccess.getModelAccess().getFunctionsFuncDefinitionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__InterleavingProcess__SubProcsAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInterleavingProcessAccess().getSubProcsCallProcessParserRuleCall_2_1_0()); }
		ruleCallProcess
		{ after(grammarAccess.getInterleavingProcessAccess().getSubProcsCallProcessParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Preconditions__PrecondAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPreconditionsAccess().getPrecondAlternatives_1_0()); }
		(rule__Preconditions__PrecondAlternatives_1_0)
		{ after(grammarAccess.getPreconditionsAccess().getPrecondAlternatives_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredOutputProcessOrInputProcess__InputsAssignment_1_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPredOutputProcessOrInputProcessAccess().getInputsInputProcessParserRuleCall_1_1_1_0()); }
		ruleInputProcess
		{ after(grammarAccess.getPredOutputProcessOrInputProcessAccess().getInputsInputProcessParserRuleCall_1_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__InputProcessesPart__InputsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInputProcessesPartAccess().getInputsInputProcessParserRuleCall_0_0()); }
		ruleInputProcess
		{ after(grammarAccess.getInputProcessesPartAccess().getInputsInputProcessParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__InputProcessesPart__PrecondsAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInputProcessesPartAccess().getPrecondsPreconditionsParserRuleCall_1_1_0()); }
		rulePreconditions
		{ after(grammarAccess.getInputProcessesPartAccess().getPrecondsPreconditionsParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__InputProcessesPart__InputsAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInputProcessesPartAccess().getInputsInputProcessParserRuleCall_1_2_0()); }
		ruleInputProcess
		{ after(grammarAccess.getInputProcessesPartAccess().getInputsInputProcessParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__InputProcess__Rec_predAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInputProcessAccess().getRec_predPredicateParserRuleCall_2_0()); }
		rulePredicate
		{ after(grammarAccess.getInputProcessAccess().getRec_predPredicateParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__InputProcess__MsgInPartsAssignment_5_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInputProcessAccess().getMsgInPartsAttributeParserRuleCall_5_0_0()); }
		ruleAttribute
		{ after(grammarAccess.getInputProcessAccess().getMsgInPartsAttributeParserRuleCall_5_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__InputProcess__MsgInPartsAssignment_5_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInputProcessAccess().getMsgInPartsAttributeParserRuleCall_5_1_1_0()); }
		ruleAttribute
		{ after(grammarAccess.getInputProcessAccess().getMsgInPartsAttributeParserRuleCall_5_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__InputProcess__OutputAssignment_7
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInputProcessAccess().getOutputSTRINGTerminalRuleCall_7_0()); }
		RULE_STRING
		{ after(grammarAccess.getInputProcessAccess().getOutputSTRINGTerminalRuleCall_7_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__InputProcess__NextAssignment_9
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInputProcessAccess().getNextNZCProcessParserRuleCall_9_0()); }
		ruleNZCProcess
		{ after(grammarAccess.getInputProcessAccess().getNextNZCProcessParserRuleCall_9_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputProcessPart__MsgOutPartsAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOutputProcessPartAccess().getMsgOutPartsValueParserRuleCall_1_0_0()); }
		ruleValue
		{ after(grammarAccess.getOutputProcessPartAccess().getMsgOutPartsValueParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputProcessPart__MsgOutPartsAssignment_1_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOutputProcessPartAccess().getMsgOutPartsValueParserRuleCall_1_1_1_0()); }
		ruleValue
		{ after(grammarAccess.getOutputProcessPartAccess().getMsgOutPartsValueParserRuleCall_1_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputProcessPart__Send_predAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOutputProcessPartAccess().getSend_predPredicateParserRuleCall_4_0()); }
		rulePredicate
		{ after(grammarAccess.getOutputProcessPartAccess().getSend_predPredicateParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputProcessPart__OutputAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOutputProcessPartAccess().getOutputSTRINGTerminalRuleCall_5_0()); }
		RULE_STRING
		{ after(grammarAccess.getOutputProcessPartAccess().getOutputSTRINGTerminalRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputProcessPart__MsecAssignment_6_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOutputProcessPartAccess().getMsecINTTerminalRuleCall_6_2_0()); }
		RULE_INT
		{ after(grammarAccess.getOutputProcessPartAccess().getMsecINTTerminalRuleCall_6_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputProcessPart__NextAssignment_8
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOutputProcessPartAccess().getNextNZCProcessParserRuleCall_8_0()); }
		ruleNZCProcess
		{ after(grammarAccess.getOutputProcessPartAccess().getNextNZCProcessParserRuleCall_8_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfProcesses__BranchesAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfProcessesAccess().getBranchesIfBranchProcessParserRuleCall_1_0()); }
		ruleIfBranchProcess
		{ after(grammarAccess.getIfProcessesAccess().getBranchesIfBranchProcessParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfProcesses__BranchesAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfProcessesAccess().getBranchesIfBranchProcessParserRuleCall_2_1_0()); }
		ruleIfBranchProcess
		{ after(grammarAccess.getIfProcessesAccess().getBranchesIfBranchProcessParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfBranchProcess__CondAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfBranchProcessAccess().getCondPreconditionsParserRuleCall_2_0()); }
		rulePreconditions
		{ after(grammarAccess.getIfBranchProcessAccess().getCondPreconditionsParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfBranchProcess__ThenAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfBranchProcessAccess().getThenPredOutputProcessOrInputProcessParserRuleCall_4_0()); }
		rulePredOutputProcessOrInputProcess
		{ after(grammarAccess.getIfBranchProcessAccess().getThenPredOutputProcessOrInputProcessParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Update__VarsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUpdateAccess().getVarsAttributeParserRuleCall_1_0()); }
		ruleAttribute
		{ after(grammarAccess.getUpdateAccess().getVarsAttributeParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Update__ValsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUpdateAccess().getValsValueParserRuleCall_3_0()); }
		ruleValue
		{ after(grammarAccess.getUpdateAccess().getValsValueParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Update__VarsAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUpdateAccess().getVarsAttributeParserRuleCall_4_1_0()); }
		ruleAttribute
		{ after(grammarAccess.getUpdateAccess().getVarsAttributeParserRuleCall_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Update__ValsAssignment_4_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUpdateAccess().getValsValueParserRuleCall_4_3_0()); }
		ruleValue
		{ after(grammarAccess.getUpdateAccess().getValsValueParserRuleCall_4_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Awareness__PredAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAwarenessAccess().getPredPredicateParserRuleCall_1_0()); }
		rulePredicate
		{ after(grammarAccess.getAwarenessAccess().getPredPredicateParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CallProcess__ProcnameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCallProcessAccess().getProcnameProcessDefinitionCrossReference_1_0()); }
		(
			{ before(grammarAccess.getCallProcessAccess().getProcnameProcessDefinitionIDTerminalRuleCall_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getCallProcessAccess().getProcnameProcessDefinitionIDTerminalRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getCallProcessAccess().getProcnameProcessDefinitionCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CallProcess__ParamsAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCallProcessAccess().getParamsValueParserRuleCall_2_1_0()); }
		ruleValue
		{ after(grammarAccess.getCallProcessAccess().getParamsValueParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CallProcess__ParamsAssignment_2_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCallProcessAccess().getParamsValueParserRuleCall_2_2_1_0()); }
		ruleValue
		{ after(grammarAccess.getCallProcessAccess().getParamsValueParserRuleCall_2_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessDefinition__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProcessDefinitionAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getProcessDefinitionAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessDefinition__ParamsAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProcessDefinitionAccess().getParamsIDTerminalRuleCall_2_1_0()); }
		RULE_ID
		{ after(grammarAccess.getProcessDefinitionAccess().getParamsIDTerminalRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessDefinition__ParamsAssignment_2_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProcessDefinitionAccess().getParamsIDTerminalRuleCall_2_2_1_0()); }
		RULE_ID
		{ after(grammarAccess.getProcessDefinitionAccess().getParamsIDTerminalRuleCall_2_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessDefinition__ProcAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProcessDefinitionAccess().getProcProcParserRuleCall_4_0()); }
		ruleProc
		{ after(grammarAccess.getProcessDefinitionAccess().getProcProcParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Environment__AttrsAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEnvironmentAccess().getAttrsIDTerminalRuleCall_2_0_0()); }
		RULE_ID
		{ after(grammarAccess.getEnvironmentAccess().getAttrsIDTerminalRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Environment__ValsAssignment_2_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEnvironmentAccess().getValsSTRINGTerminalRuleCall_2_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getEnvironmentAccess().getValsSTRINGTerminalRuleCall_2_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Environment__AttrsAssignment_2_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEnvironmentAccess().getAttrsIDTerminalRuleCall_2_3_1_0()); }
		RULE_ID
		{ after(grammarAccess.getEnvironmentAccess().getAttrsIDTerminalRuleCall_2_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Environment__ValsAssignment_2_3_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEnvironmentAccess().getValsSTRINGTerminalRuleCall_2_3_3_0()); }
		RULE_STRING
		{ after(grammarAccess.getEnvironmentAccess().getValsSTRINGTerminalRuleCall_2_3_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentDefinition__EnvAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComponentDefinitionAccess().getEnvEnvironmentParserRuleCall_1_0()); }
		ruleEnvironment
		{ after(grammarAccess.getComponentDefinitionAccess().getEnvEnvironmentParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentDefinition__ProcAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComponentDefinitionAccess().getProcProcessDefinitionCrossReference_2_0()); }
		(
			{ before(grammarAccess.getComponentDefinitionAccess().getProcProcessDefinitionIDTerminalRuleCall_2_0_1()); }
			RULE_ID
			{ after(grammarAccess.getComponentDefinitionAccess().getProcProcessDefinitionIDTerminalRuleCall_2_0_1()); }
		)
		{ after(grammarAccess.getComponentDefinitionAccess().getProcProcessDefinitionCrossReference_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentDefinition__ParamsAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComponentDefinitionAccess().getParamsSTRINGTerminalRuleCall_3_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getComponentDefinitionAccess().getParamsSTRINGTerminalRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentDefinition__ParamsAssignment_3_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComponentDefinitionAccess().getParamsSTRINGTerminalRuleCall_3_2_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getComponentDefinitionAccess().getParamsSTRINGTerminalRuleCall_3_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentDefinition__AddressAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComponentDefinitionAccess().getAddressSTRINGTerminalRuleCall_5_0()); }
		RULE_STRING
		{ after(grammarAccess.getComponentDefinitionAccess().getAddressSTRINGTerminalRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__CompAssignment_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAttributeAccess().getCompThisKeyword_0_0_0()); }
		(
			{ before(grammarAccess.getAttributeAccess().getCompThisKeyword_0_0_0()); }
			This
			{ after(grammarAccess.getAttributeAccess().getCompThisKeyword_0_0_0()); }
		)
		{ after(grammarAccess.getAttributeAccess().getCompThisKeyword_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__IdentAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAttributeAccess().getIdentIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getAttributeAccess().getIdentIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RecAttribute__IdentAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRecAttributeAccess().getIdentIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getRecAttributeAccess().getIdentIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeValue__AttrAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAttributeValueAccess().getAttrAttributeParserRuleCall_1_0()); }
		ruleAttribute
		{ after(grammarAccess.getAttributeValueAccess().getAttrAttributeParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ImmediateValue__ImmAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getImmediateValueAccess().getImmSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getImmediateValueAccess().getImmSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GoStringFunction__FuncnameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGoStringFunctionAccess().getFuncnameFuncDefinitionCrossReference_1_0()); }
		(
			{ before(grammarAccess.getGoStringFunctionAccess().getFuncnameFuncDefinitionIDTerminalRuleCall_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getGoStringFunctionAccess().getFuncnameFuncDefinitionIDTerminalRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getGoStringFunctionAccess().getFuncnameFuncDefinitionCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GoStringFunction__ParamsAssignment_3_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGoStringFunctionAccess().getParamsValueParserRuleCall_3_0_0()); }
		ruleValue
		{ after(grammarAccess.getGoStringFunctionAccess().getParamsValueParserRuleCall_3_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GoStringFunction__ParamsAssignment_3_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGoStringFunctionAccess().getParamsValueParserRuleCall_3_1_1_0()); }
		ruleValue
		{ after(grammarAccess.getGoStringFunctionAccess().getParamsValueParserRuleCall_3_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Predicate__OrAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPredicateAccess().getOrAndParserRuleCall_1_2_0()); }
		ruleAnd
		{ after(grammarAccess.getPredicateAccess().getOrAndParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__And__AndAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAndAccess().getAndNotParserRuleCall_1_2_0()); }
		ruleNot
		{ after(grammarAccess.getAndAccess().getAndNotParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Not__NegAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNotAccess().getNegExclamationMarkKeyword_1_1_0()); }
		(
			{ before(grammarAccess.getNotAccess().getNegExclamationMarkKeyword_1_1_0()); }
			ExclamationMark
			{ after(grammarAccess.getNotAccess().getNegExclamationMarkKeyword_1_1_0()); }
		)
		{ after(grammarAccess.getNotAccess().getNegExclamationMarkKeyword_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Not__TermAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNotAccess().getTermTermParserRuleCall_1_2_0()); }
		ruleTerm
		{ after(grammarAccess.getNotAccess().getTermTermParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Immediate__IsTrueAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getImmediateAccess().getIsTrueTrueKeyword_1_0_0()); }
		(
			{ before(grammarAccess.getImmediateAccess().getIsTrueTrueKeyword_1_0_0()); }
			True
			{ after(grammarAccess.getImmediateAccess().getIsTrueTrueKeyword_1_0_0()); }
		)
		{ after(grammarAccess.getImmediateAccess().getIsTrueTrueKeyword_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityTest__Op1Assignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEqualityTestAccess().getOp1Alternatives_1_0()); }
		(rule__EqualityTest__Op1Alternatives_1_0)
		{ after(grammarAccess.getEqualityTestAccess().getOp1Alternatives_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityTest__OperandAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEqualityTestAccess().getOperandAlternatives_2_0()); }
		(rule__EqualityTest__OperandAlternatives_2_0)
		{ after(grammarAccess.getEqualityTestAccess().getOperandAlternatives_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityTest__Op2Assignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEqualityTestAccess().getOp2ValueParserRuleCall_3_0()); }
		ruleValue
		{ after(grammarAccess.getEqualityTestAccess().getOp2ValueParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncParam__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFuncParamAccess().getNameIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getFuncParamAccess().getNameIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncDefinition__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFuncDefinitionAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getFuncDefinitionAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncDefinition__ParamsAssignment_3_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFuncDefinitionAccess().getParamsFuncParamParserRuleCall_3_0_0()); }
		ruleFuncParam
		{ after(grammarAccess.getFuncDefinitionAccess().getParamsFuncParamParserRuleCall_3_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncDefinition__ParamsAssignment_3_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFuncDefinitionAccess().getParamsFuncParamParserRuleCall_3_1_1_0()); }
		ruleFuncParam
		{ after(grammarAccess.getFuncDefinitionAccess().getParamsFuncParamParserRuleCall_3_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncDefinition__BlkAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFuncDefinitionAccess().getBlkFuncBlockParserRuleCall_5_0()); }
		ruleFuncBlock
		{ after(grammarAccess.getFuncDefinitionAccess().getBlkFuncBlockParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncBlock__StatementsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFuncBlockAccess().getStatementsFuncStatementParserRuleCall_2_0()); }
		ruleFuncStatement
		{ after(grammarAccess.getFuncBlockAccess().getStatementsFuncStatementParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncVarDeclaration__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFuncVarDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getFuncVarDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncVarDeclaration__ValAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFuncVarDeclarationAccess().getValFuncValParserRuleCall_3_0()); }
		ruleFuncVal
		{ after(grammarAccess.getFuncVarDeclarationAccess().getValFuncValParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncVarAssign__VarAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFuncVarAssignAccess().getVarFuncVarDeclarationCrossReference_0_0()); }
		(
			{ before(grammarAccess.getFuncVarAssignAccess().getVarFuncVarDeclarationIDTerminalRuleCall_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getFuncVarAssignAccess().getVarFuncVarDeclarationIDTerminalRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getFuncVarAssignAccess().getVarFuncVarDeclarationCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncVarAssign__ValAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFuncVarAssignAccess().getValFuncValParserRuleCall_2_0()); }
		ruleFuncVal
		{ after(grammarAccess.getFuncVarAssignAccess().getValFuncValParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncVal__ImmAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFuncValAccess().getImmSTRINGTerminalRuleCall_0_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getFuncValAccess().getImmSTRINGTerminalRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncVal__RefAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFuncValAccess().getRefFuncVarParamCrossReference_1_1_0()); }
		(
			{ before(grammarAccess.getFuncValAccess().getRefFuncVarParamIDTerminalRuleCall_1_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getFuncValAccess().getRefFuncVarParamIDTerminalRuleCall_1_1_0_1()); }
		)
		{ after(grammarAccess.getFuncValAccess().getRefFuncVarParamCrossReference_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncPredicate__OrAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFuncPredicateAccess().getOrFuncAndParserRuleCall_1_2_0()); }
		ruleFuncAnd
		{ after(grammarAccess.getFuncPredicateAccess().getOrFuncAndParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncAnd__AndAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFuncAndAccess().getAndFuncNotParserRuleCall_1_2_0()); }
		ruleFuncNot
		{ after(grammarAccess.getFuncAndAccess().getAndFuncNotParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncNot__NegAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFuncNotAccess().getNegExclamationMarkKeyword_1_1_0()); }
		(
			{ before(grammarAccess.getFuncNotAccess().getNegExclamationMarkKeyword_1_1_0()); }
			ExclamationMark
			{ after(grammarAccess.getFuncNotAccess().getNegExclamationMarkKeyword_1_1_0()); }
		)
		{ after(grammarAccess.getFuncNotAccess().getNegExclamationMarkKeyword_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncNot__TermAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFuncNotAccess().getTermFuncTermParserRuleCall_1_2_0()); }
		ruleFuncTerm
		{ after(grammarAccess.getFuncNotAccess().getTermFuncTermParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncImmediate__IsTrueAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFuncImmediateAccess().getIsTrueTrueKeyword_1_0_0()); }
		(
			{ before(grammarAccess.getFuncImmediateAccess().getIsTrueTrueKeyword_1_0_0()); }
			True
			{ after(grammarAccess.getFuncImmediateAccess().getIsTrueTrueKeyword_1_0_0()); }
		)
		{ after(grammarAccess.getFuncImmediateAccess().getIsTrueTrueKeyword_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncEqualityTest__Op1Assignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFuncEqualityTestAccess().getOp1FuncValParserRuleCall_1_0()); }
		ruleFuncVal
		{ after(grammarAccess.getFuncEqualityTestAccess().getOp1FuncValParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncEqualityTest__OperandAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFuncEqualityTestAccess().getOperandAlternatives_2_0()); }
		(rule__FuncEqualityTest__OperandAlternatives_2_0)
		{ after(grammarAccess.getFuncEqualityTestAccess().getOperandAlternatives_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncEqualityTest__Op2Assignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFuncEqualityTestAccess().getOp2FuncValParserRuleCall_3_0()); }
		ruleFuncVal
		{ after(grammarAccess.getFuncEqualityTestAccess().getOp2FuncValParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncIfElse__TestAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFuncIfElseAccess().getTestFuncPredicateParserRuleCall_2_0()); }
		ruleFuncPredicate
		{ after(grammarAccess.getFuncIfElseAccess().getTestFuncPredicateParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncIfElse__ThenAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFuncIfElseAccess().getThenFuncBlockParserRuleCall_4_0()); }
		ruleFuncBlock
		{ after(grammarAccess.getFuncIfElseAccess().getThenFuncBlockParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncIfElse__TestAssignment_5_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFuncIfElseAccess().getTestFuncPredicateParserRuleCall_5_2_0()); }
		ruleFuncPredicate
		{ after(grammarAccess.getFuncIfElseAccess().getTestFuncPredicateParserRuleCall_5_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncIfElse__ThenAssignment_5_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFuncIfElseAccess().getThenFuncBlockParserRuleCall_5_4_0()); }
		ruleFuncBlock
		{ after(grammarAccess.getFuncIfElseAccess().getThenFuncBlockParserRuleCall_5_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncIfElse__ElseBranchAssignment_6_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFuncIfElseAccess().getElseBranchFuncBlockParserRuleCall_6_1_0()); }
		ruleFuncBlock
		{ after(grammarAccess.getFuncIfElseAccess().getElseBranchFuncBlockParserRuleCall_6_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncReturn__ValAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFuncReturnAccess().getValFuncValParserRuleCall_1_0()); }
		ruleFuncVal
		{ after(grammarAccess.getFuncReturnAccess().getValFuncValParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}
